(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.0.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AdManager = function() {
};
$hxClasses["AdManager"] = AdManager;
AdManager.__name__ = "AdManager";
AdManager.__properties__ = {get_AnimInstance:"get_AnimInstance",get_AchievInstance:"get_AchievInstance",get_ScoreInstance:"get_ScoreInstance",get_AdEventInstance:"get_AdEventInstance",get_AdInstance:"get_AdInstance"};
AdManager.get_AdInstance = function() {
	return AdManager.adInstance;
};
AdManager.get_AdEventInstance = function() {
	return AdManager.adEventInstance;
};
AdManager.get_ScoreInstance = function() {
	return AdManager.scoreInstance;
};
AdManager.get_AchievInstance = function() {
	return AdManager.achievInstance;
};
AdManager.get_AnimInstance = function() {
	return AdManager.animInstance;
};
AdManager.init = function() {
	if(AdManager.Inited) {
		return;
	}
	haxe_Log.trace("ad manager init",{ fileName : "src/AdManager.hx", lineNumber : 95, className : "AdManager", methodName : "init"});
};
AdManager.isShowing = function() {
	if(AdManager.adEventInstance != null) {
		return AdManager.adEventInstance.isShowing();
	} else if(AdManager.adInstance != null) {
		return AdManager.adInstance.isShowing();
	} else {
		return false;
	}
};
AdManager.getSignalAd = function() {
	if(AdManager.adEventInstance != null) {
		return AdManager.adEventInstance.getSignalAd();
	} else if(AdManager.adInstance != null) {
		return AdManager.adInstance.getSignalAd();
	} else {
		return new hxsignal_impl_Signal1();
	}
};
AdManager.submitScore = function(score) {
	if(AdManager.scoreInstance != null) {
		AdManager.scoreInstance.submitScore("Leaderboard",score);
	}
};
AdManager.delay = function() {
	AdManager.delayed = true;
	haxe_Timer.delay(function() {
		AdManager.delayed = false;
	},120000);
};
AdManager.submitStat = function(statName,score) {
	if(score == 0) {
		return;
	}
};
AdManager.showAd = function() {
	if(AdManager.delayed) {
		return false;
	}
	if(AdManager.adEventInstance != null) {
		AdManager.adEventInstance.sendEvent(apiManager_AdEventType.SHOW_AD);
	} else if(AdManager.adInstance != null) {
		AdManager.adInstance.showAd();
	} else {
		return false;
	}
	return true;
};
AdManager.showScore = function(tableName) {
};
AdManager.sendEvent = function(e,data) {
	if(AdManager.adEventInstance != null) {
		AdManager.adEventInstance.sendEvent(e,data);
	}
};
AdManager.submitAchievement = function(achievementName) {
};
AdManager.showAnimation = function(callback) {
};
AdManager.prototype = {
	__class__: AdManager
};
var iriysoft_core_IIsfDisposable = function() { };
$hxClasses["iriysoft.core.IIsfDisposable"] = iriysoft_core_IIsfDisposable;
iriysoft_core_IIsfDisposable.__name__ = "iriysoft.core.IIsfDisposable";
iriysoft_core_IIsfDisposable.__isInterface__ = true;
iriysoft_core_IIsfDisposable.prototype = {
	disposed: null
	,signalDisposed: null
	,dispose: null
	,__class__: iriysoft_core_IIsfDisposable
};
var iriysoft_core_IsfDisposableObject = function() {
	this.disposed = false;
	this.signalDisposed = new iriysoft_signal_IsfSignal1();
};
$hxClasses["iriysoft.core.IsfDisposableObject"] = iriysoft_core_IsfDisposableObject;
iriysoft_core_IsfDisposableObject.__name__ = "iriysoft.core.IsfDisposableObject";
iriysoft_core_IsfDisposableObject.__interfaces__ = [iriysoft_core_IIsfDisposable];
iriysoft_core_IsfDisposableObject.prototype = {
	disposed: null
	,signalDisposed: null
	,dispose: function() {
		if(!this.disposed) {
			this.disposed = true;
			this.signalDisposed.dispatch(this);
			this.signalDisposed.dispose();
			this.signalDisposed = null;
			this.customDispose();
		}
	}
	,customDispose: function() {
	}
	,__class__: iriysoft_core_IsfDisposableObject
};
var iriysoft_core_IIsfProcessable = function() { };
$hxClasses["iriysoft.core.IIsfProcessable"] = iriysoft_core_IIsfProcessable;
iriysoft_core_IIsfProcessable.__name__ = "iriysoft.core.IIsfProcessable";
iriysoft_core_IIsfProcessable.__isInterface__ = true;
iriysoft_core_IIsfProcessable.prototype = {
	get_paused: null
	,set_paused: null
	,process: null
	,__class__: iriysoft_core_IIsfProcessable
	,__properties__: {set_paused:"set_paused",get_paused:"get_paused"}
};
var iriysoft_core_IIsfBaseObject = function() { };
$hxClasses["iriysoft.core.IIsfBaseObject"] = iriysoft_core_IIsfBaseObject;
iriysoft_core_IIsfBaseObject.__name__ = "iriysoft.core.IIsfBaseObject";
iriysoft_core_IIsfBaseObject.__isInterface__ = true;
iriysoft_core_IIsfBaseObject.__interfaces__ = [iriysoft_core_IIsfDisposable,iriysoft_core_IIsfProcessable];
var iriysoft_core_IsfBaseObject = function() {
	iriysoft_core_IsfDisposableObject.call(this);
	this.resetLifetime();
	this.m_paused = false;
	this.processPeriod = 0;
	this.m_accumulator = 0;
};
$hxClasses["iriysoft.core.IsfBaseObject"] = iriysoft_core_IsfBaseObject;
iriysoft_core_IsfBaseObject.__name__ = "iriysoft.core.IsfBaseObject";
iriysoft_core_IsfBaseObject.__interfaces__ = [iriysoft_core_IIsfBaseObject];
iriysoft_core_IsfBaseObject.__super__ = iriysoft_core_IsfDisposableObject;
iriysoft_core_IsfBaseObject.prototype = $extend(iriysoft_core_IsfDisposableObject.prototype,{
	m_paused: null
	,get_paused: function() {
		return this.m_paused;
	}
	,set_paused: function(_paused) {
		return this.m_paused = _paused;
	}
	,m_lifetime: null
	,processPeriod: null
	,m_accumulator: null
	,resetLifetime: function() {
		this.m_lifetime = 0;
	}
	,resetAccumulator: function() {
		this.m_accumulator = 0;
	}
	,process: function(_timeStep) {
		if(this.disposed) {
			return;
		}
		if(this.m_paused == false) {
			this.m_accumulator += _timeStep;
			var tmpProcessPeriod = this.processPeriod;
			if(tmpProcessPeriod == 0) {
				this.m_lifetime += this.m_accumulator;
				this.customProcess(this.m_accumulator);
				this.m_accumulator = 0;
			} else {
				while(this.m_accumulator >= tmpProcessPeriod) {
					if(this.disposed) {
						break;
					}
					this.m_lifetime += tmpProcessPeriod;
					this.customProcess(tmpProcessPeriod);
					this.m_accumulator -= tmpProcessPeriod;
				}
			}
		}
	}
	,customProcess: function(_timeStep) {
	}
	,customDispose: function() {
		iriysoft_core_IsfDisposableObject.prototype.customDispose.call(this);
	}
	,__class__: iriysoft_core_IsfBaseObject
	,__properties__: {set_paused:"set_paused",get_paused:"get_paused"}
});
var IDeviceControl = function() { };
$hxClasses["IDeviceControl"] = IDeviceControl;
IDeviceControl.__name__ = "IDeviceControl";
IDeviceControl.__isInterface__ = true;
IDeviceControl.__interfaces__ = [iriysoft_core_IIsfProcessable];
IDeviceControl.prototype = {
	get_x: null
	,get_y: null
	,get_ox: null
	,get_oy: null
	,get_isTap: null
	,get_isPanBegan: null
	,get_isPanChanged: null
	,get_isPanEnded: null
	,get_isDown: null
	,get_isPinchBegan: null
	,get_isPinchChanged: null
	,get_isPinchEnded: null
	,get_pinchScale: null
	,scale_x: null
	,scale_y: null
	,offset_x: null
	,offset_y: null
	,x: null
	,y: null
	,ox: null
	,oy: null
	,isTap: null
	,isPanBegan: null
	,isPanChanged: null
	,isPanEnded: null
	,isDown: null
	,isPinchBegan: null
	,isPinchChanged: null
	,isPinchEnded: null
	,pinchScale: null
	,reset: null
	,__class__: IDeviceControl
	,__properties__: {get_pinchScale:"get_pinchScale",get_isPinchEnded:"get_isPinchEnded",get_isPinchChanged:"get_isPinchChanged",get_isPinchBegan:"get_isPinchBegan",get_isDown:"get_isDown",get_isPanEnded:"get_isPanEnded",get_isPanChanged:"get_isPanChanged",get_isPanBegan:"get_isPanBegan",get_isTap:"get_isTap",get_oy:"get_oy",get_ox:"get_ox",get_y:"get_y",get_x:"get_x"}
};
var MouseDeviceControl = function(_stage) {
	this.scale_y = 1;
	this.scale_x = 1;
	iriysoft_core_IsfBaseObject.call(this);
	this.m_down = new FlagTime();
	this.m_up = new FlagTime();
	this.m_move = new FlagTime();
	this.reset();
	this.m_x = _stage.get_mouseX();
	this.m_y = _stage.get_mouseY();
	this.m_pinchScale = 1;
	this.ref_eventDispatcher = _stage;
	this.ref_eventDispatcher.addEventListener("mouseUp",$bind(this,this.onMouseUp));
	this.ref_eventDispatcher.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	this.ref_eventDispatcher.addEventListener("mouseMove",$bind(this,this.onMouseMove));
};
$hxClasses["MouseDeviceControl"] = MouseDeviceControl;
MouseDeviceControl.__name__ = "MouseDeviceControl";
MouseDeviceControl.__interfaces__ = [IDeviceControl];
MouseDeviceControl.__super__ = iriysoft_core_IsfBaseObject;
MouseDeviceControl.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	ref_eventDispatcher: null
	,m_down: null
	,m_up: null
	,m_move: null
	,m_startPanTime: null
	,offset_x: null
	,offset_y: null
	,x: null
	,m_x: null
	,get_x: function() {
		return this.m_x * this.scale_x;
	}
	,y: null
	,m_y: null
	,get_y: function() {
		return this.m_y * this.scale_y;
	}
	,ox: null
	,get_ox: function() {
		return this.m_x * this.scale_y + this.offset_x;
	}
	,oy: null
	,get_oy: function() {
		return this.m_y * this.scale_y + this.offset_y;
	}
	,scale_x: null
	,scale_y: null
	,isTap: null
	,m_isTap: null
	,get_isTap: function() {
		return this.m_isTap;
	}
	,isPanBegan: null
	,m_isPanBegan: null
	,get_isPanBegan: function() {
		return this.m_isPanBegan;
	}
	,isPanChanged: null
	,m_isPanChanged: null
	,get_isPanChanged: function() {
		return this.m_isPanChanged;
	}
	,isPanEnded: null
	,m_isPanEnded: null
	,get_isPanEnded: function() {
		return this.m_isPanEnded;
	}
	,isDown: null
	,m_isDown: null
	,get_isDown: function() {
		return this.m_isDown;
	}
	,isPinchBegan: null
	,m_isPinchBegan: null
	,get_isPinchBegan: function() {
		return this.m_isPinchBegan;
	}
	,isPinchChanged: null
	,m_isPinchChanged: null
	,get_isPinchChanged: function() {
		return this.m_isPinchChanged;
	}
	,isPinchEnded: null
	,m_isPinchEnded: null
	,get_isPinchEnded: function() {
		return this.m_isPinchEnded;
	}
	,pinchScale: null
	,m_pinchScale: null
	,get_pinchScale: function() {
		return this.m_pinchScale;
	}
	,reset: function() {
		this.m_isTap = false;
		this.m_isPanBegan = false;
		this.m_isPanChanged = false;
		this.m_isPanEnded = false;
		this.m_isPinchBegan = false;
		this.m_isPinchChanged = false;
		this.m_isPinchEnded = false;
		this.m_isDown = false;
		this.m_down.reset();
		this.m_up.reset();
		this.m_move.reset();
		this.m_startPanTime = -2;
	}
	,customDispose: function() {
		if(this.ref_eventDispatcher != null) {
			this.ref_eventDispatcher.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
			this.ref_eventDispatcher.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
			this.ref_eventDispatcher.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
			this.ref_eventDispatcher = null;
		}
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeStep);
		this.m_down.check(this.m_lifetime);
		this.m_up.check(this.m_lifetime);
		this.m_move.check(this.m_lifetime);
		var R = 12;
		var dt = this.m_lifetime - this.m_down.time;
		if(this.m_startPanTime < this.m_down.time && this.m_up.time < this.m_down.time && this.m_move.time == this.m_lifetime && !(Math.abs(this.m_move.x - this.m_down.x) < R && Math.abs(this.m_move.y - this.m_down.y) < R)) {
			this.m_startPanTime = this.m_lifetime;
		}
		this.m_isTap = this.m_up.time == this.m_lifetime && this.m_startPanTime < this.m_down.time;
		this.m_isPanBegan = this.m_startPanTime == this.m_lifetime;
		this.m_isPanChanged = this.m_move.time == this.m_lifetime && this.m_startPanTime >= this.m_up.time;
		this.m_isPanEnded = this.m_up.time == this.m_lifetime && this.m_startPanTime >= this.m_down.time;
		this.m_isDown = this.m_down.time == this.m_lifetime;
	}
	,onMouseMove: function(e) {
		this.m_x = e.localX;
		this.m_y = e.localY;
		this.m_move.invalidate = true;
		this.m_move.x = this.m_x;
		this.m_move.y = this.m_y;
	}
	,onMouseDown: function(e) {
		this.m_x = e.localX;
		this.m_y = e.localY;
		this.m_down.invalidate = true;
		this.m_down.x = this.m_x;
		this.m_down.y = this.m_y;
		this.m_move.x = this.m_x;
		this.m_move.y = this.m_y;
	}
	,onMouseUp: function(e) {
		this.m_x = e.localX;
		this.m_y = e.localY;
		this.m_up.invalidate = true;
		this.m_up.x = this.m_x;
		this.m_up.y = this.m_y;
		this.m_move.x = this.m_x;
		this.m_move.y = this.m_y;
	}
	,__class__: MouseDeviceControl
	,__properties__: $extend(iriysoft_core_IsfBaseObject.prototype.__properties__,{get_pinchScale:"get_pinchScale",get_isPinchEnded:"get_isPinchEnded",get_isPinchChanged:"get_isPinchChanged",get_isPinchBegan:"get_isPinchBegan",get_isDown:"get_isDown",get_isPanEnded:"get_isPanEnded",get_isPanChanged:"get_isPanChanged",get_isPanBegan:"get_isPanBegan",get_isTap:"get_isTap",get_oy:"get_oy",get_ox:"get_ox",get_y:"get_y",get_x:"get_x"})
});
var AdvMouseDeviceControl = function(_stage) {
	MouseDeviceControl.call(this,_stage);
	this.isShiftOn = false;
	this.ref_eventDispatcher.addEventListener("keyDown",$bind(this,this.onKeyDown));
};
$hxClasses["AdvMouseDeviceControl"] = AdvMouseDeviceControl;
AdvMouseDeviceControl.__name__ = "AdvMouseDeviceControl";
AdvMouseDeviceControl.__super__ = MouseDeviceControl;
AdvMouseDeviceControl.prototype = $extend(MouseDeviceControl.prototype,{
	isShiftOn: null
	,customDispose: function() {
		if(this.ref_eventDispatcher != null) {
			this.ref_eventDispatcher.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		}
		MouseDeviceControl.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		MouseDeviceControl.prototype.customProcess.call(this,_timeStep);
		if(this.isShiftOn) {
			this.m_isPinchBegan = this.m_isPanBegan;
			this.m_isPinchChanged = this.m_isPanChanged;
			this.m_isPinchEnded = this.m_isPanEnded;
			this.m_isPanBegan = false;
			this.m_isPanChanged = false;
			this.m_isPanEnded = false;
		} else {
			this.m_isPinchBegan = false;
			this.m_isPinchChanged = false;
			this.m_isPinchEnded = false;
			this.m_pinchScale = 1;
		}
		this.isShiftOn = false;
	}
	,onKeyDown: function(e) {
		this.isShiftOn = e.keyCode == 16;
	}
	,onMouseMove: function(e) {
		if(this.isShiftOn) {
			this.m_pinchScale += (this.m_x - e.localX) / 100;
			this.m_move.invalidate = true;
		} else {
			MouseDeviceControl.prototype.onMouseMove.call(this,e);
		}
	}
	,__class__: AdvMouseDeviceControl
});
var iriysoft_IGameApp = function() { };
$hxClasses["iriysoft.IGameApp"] = iriysoft_IGameApp;
iriysoft_IGameApp.__name__ = "iriysoft.IGameApp";
iriysoft_IGameApp.__isInterface__ = true;
iriysoft_IGameApp.__interfaces__ = [iriysoft_core_IIsfProcessable];
iriysoft_IGameApp.prototype = {
	resize: null
	,__class__: iriysoft_IGameApp
};
var AppTemplate = function(_visualManager,_devCtrl) {
	this.transitionOn = false;
	this.isWindowShowed = true;
	this.onWindowShowed = null;
	this.onWindowHidden = null;
	iriysoft_core_IsfBaseObject.call(this);
	this.devCtrl = _devCtrl;
	this.visualManager = _visualManager;
	this.createStateBlock();
};
$hxClasses["AppTemplate"] = AppTemplate;
AppTemplate.__name__ = "AppTemplate";
AppTemplate.__interfaces__ = [iriysoft_IGameApp];
AppTemplate.__super__ = iriysoft_core_IsfBaseObject;
AppTemplate.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	visualManager: null
	,devCtrl: null
	,onWindowHidden: null
	,onWindowShowed: null
	,isWindowShowed: null
	,dispose: function() {
		this.disposeStateBlock();
		this.devCtrl = null;
		this.visualManager = null;
		iriysoft_core_IsfBaseObject.prototype.dispose.call(this);
	}
	,customProcess: function(_timeStep) {
		if(this.devCtrl != null) {
			this.devCtrl.process(_timeStep);
		}
		this.processStateBlock(_timeStep);
		this.visualManager.process(_timeStep);
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeStep);
	}
	,screenManager: null
	,createStateBlock: function() {
		this.screenManager = new ScreenManager();
	}
	,disposeStateBlock: function() {
		if(this.screenManager != null) {
			this.screenManager.dispose();
			this.screenManager = null;
		}
	}
	,processStateBlock: function(_timeStep) {
		this.screenManager.process(_timeStep);
	}
	,changeScreen: function(_newState,transitionScreen) {
		while(this.screenManager.getScreensPool().length > 1) this.screenManager.get_topState().dispose();
		var curState = this.screenManager.get_topState();
		var tr = null;
		if(this.transitionOn == false) {
			if(transitionScreen != null) {
				tr = transitionScreen;
			} else {
				tr = new ScreenTransitionBlackAlpha(this.visualManager);
			}
		}
		this.screenManager.addScreen(_newState);
		if(this.transitionOn == false) {
			this.screenManager.addScreen(tr);
			tr.startTransition(curState,_newState);
			tr.signalDisposed.addSlot($bind(this,this.onTransitionDisposed));
			this.transitionOn = true;
		}
	}
	,transitionOn: null
	,onTransitionDisposed: function(_) {
		this.transitionOn = false;
	}
	,addScreen: function(_gameScreen) {
		_gameScreen.startLoading();
		this.screenManager.addScreen(_gameScreen,this.transitionOn);
	}
	,resize: function(_newWidth,_newHeight) {
		this.screenManager.resize(_newWidth,_newHeight);
	}
	,disableCursorButtons: function() {
		
        console.log("Cursor buttons disabled");
        if(window.onkeydown != null)
          console.warn("window.onkeydown has been overwritten");
        window.onkeydown = function (event) {
          if (event.keyCode == 32 || 
            event.keyCode == 37 || 
            event.keyCode == 38 || 
            event.keyCode == 39 ||
            event.keyCode == 40) {
            event.preventDefault();
          }      
        };
      ;
	}
	,VisChangeCallback: function() {
		if(window.document.hidden) {
			openfl_Lib.get_current().stage.dispatchEvent(new openfl_events_Event("deactivate"));
		}
		if(!window.document.hidden) {
			openfl_Lib.get_current().stage.dispatchEvent(new openfl_events_Event("activate"));
		}
	}
	,ClickCallback: function() {
		if(!this.isWindowShowed) {
			openfl_Lib.get_current().stage.dispatchEvent(new openfl_events_Event("activate"));
		}
		this.isWindowShowed = true;
	}
	,addVisibilityChange: function() {
		var callback = $bind(this,this.VisChangeCallback);
		var callback2 = $bind(this,this.ClickCallback);
		
        document.onvisibilitychange = callback;
        window.onclick = callback2;
        window.ontouchstart = callback2;
      ;
	}
	,__class__: AppTemplate
});
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g2 = 0;
			var _g3 = this.parent.__windows;
			while(_g2 < _g3.length) {
				var window1 = _g3[_g2];
				++_g2;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g11 = data.buttons.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g21 = 0;
				var _g3 = data.axes.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g4 = 0;
				var _g12 = data.buttons.length;
				while(_g4 < _g12) {
					var i3 = _g4++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g22 = 0;
				var _g31 = data.axes.length;
				while(_g22 < _g31) {
					var i4 = _g22++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var f = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				f(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			f(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp1 = function(button) {
			f1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp2 = function(button1) {
			f2(gamepad3,button1);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp3 = function() {
			f3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			f(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp1 = function(button) {
			f1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp2 = function(button1) {
			f2(joystick3,button1);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp3 = function() {
			f3(joystick4);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp4 = function(hat,position) {
			f4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp5 = function(trackball,x,y) {
			f5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("DeadZed",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	var _this = app.meta;
	if(__map_reserved["build"] != null) {
		_this.setReserved("build","1");
	} else {
		_this.h["build"] = "1";
	}
	var _this1 = app.meta;
	if(__map_reserved["company"] != null) {
		_this1.setReserved("company","iriysoft");
	} else {
		_this1.h["company"] = "iriysoft";
	}
	var _this2 = app.meta;
	if(__map_reserved["file"] != null) {
		_this2.setReserved("file","DeadZed");
	} else {
		_this2.h["file"] = "DeadZed";
	}
	var _this3 = app.meta;
	if(__map_reserved["name"] != null) {
		_this3.setReserved("name","DeadZed");
	} else {
		_this3.h["name"] = "DeadZed";
	}
	var _this4 = app.meta;
	if(__map_reserved["packageName"] != null) {
		_this4.setReserved("packageName","com.iriysoft.DeadZed");
	} else {
		_this4.h["packageName"] = "com.iriysoft.DeadZed";
	}
	var _this5 = app.meta;
	if(__map_reserved["version"] != null) {
		_this5.setReserved("version","1.0.0");
	} else {
		_this5.h["version"] = "1.0.0";
	}
	var attributes = { allowHighDPI : true, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "DeadZed", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new Preloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = (js_Boot.__cast(app.__window , openfl_display_Window)).stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraries;
	while(_g2 < _g11.length) {
		var library = _g11[_g2];
		++_g2;
		app.__preloader.addLibrary(library);
	}
	var _g21 = 0;
	var _g3 = ManifestResources.preloadLibraryNames;
	while(_g21 < _g3.length) {
		var name = _g3[_g21];
		++_g21;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		stage.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g = 0;
			var _g1 = list1.length;
			while(_g < _g1) {
				var i = _g++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderDOM: null
	,__renderGL: null
	,__renderGLMask: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = "openfl._Vector.Vector_Impl_";
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,value) {
	return this1.push(value);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl__$Vector_Vector_$Impl_$.convert = function(vec) {
	return vec;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.__isInterface__ = true;
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,filter: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_ObjectVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_ObjectVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			var _this = openfl_display_DisplayObject.__broadcastEvents;
			if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
				var _this1 = openfl_display_DisplayObject.__broadcastEvents;
				var value = [];
				if(__map_reserved[type] != null) {
					_this1.setReserved(type,value);
				} else {
					_this1.h[type] = value;
				}
			}
			var _this2 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				var _this = openfl_display_DisplayObject.__broadcastEvents;
				if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
					var _this1 = openfl_display_DisplayObject.__broadcastEvents;
					HxOverrides.remove(__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable)) {
					var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
					if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						var context = renderer.context;
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap,false);
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = alpha;
						var scrollRect = bitmap.__scrollRect;
						renderer.setTransform(bitmap.__renderTransform,context);
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer.__popMaskObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable)) {
					var alpha1 = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha1 <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context1 = renderer.context;
							renderer.setTransform(this.__renderTransform,context1);
							var color = this.opaqueBackground;
							context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context1.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(!(!this.__renderable)) {
								var alpha2 = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha2 <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context2 = renderer.context;
											var scrollRect1 = this.__scrollRect;
											var scale9Grid = this.__worldScale9Grid;
											if(scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context2.globalAlpha = alpha2;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context2.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context2,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context2.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context2.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context2.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context2.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context2.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context2.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context2.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context2.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context2.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context2.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context2.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context2.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context2.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context2.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context2.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context2);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context2.scale(reverseScale,reverseScale);
													}
													context2.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__softwareDirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderer);
	}
	,__renderEvent: function(renderer) {
		if(this.__customRenderEvent != null && this.__renderable) {
			this.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			this.__customRenderEvent.objectMatrix.copyFrom(this.__renderTransform);
			this.__customRenderEvent.objectColorTransform.__copyFrom(this.__worldColorTransform);
			this.__customRenderEvent.renderer = renderer;
			switch(renderer.__type) {
			case "cairo":
				this.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				this.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(this.stage != null && this.__worldVisible) {
					this.__customRenderEvent.type = "renderDOM";
				} else {
					this.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(this.__worldShader);
				renderer1.__context3D.__flushGL();
				this.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(this.__worldBlendMode);
			renderer.__pushMaskObject(this);
			this.dispatchEvent(this.__customRenderEvent);
			renderer.__popMaskObject(this);
			if(renderer.__type == "opengl") {
				var renderer2 = renderer;
				renderer2.setViewport();
			}
		}
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderer.__pushMaskRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__shouldCacheHardware: function(value) {
		if(value == true || this.__filters != null) {
			return true;
		}
		if(value == false || this.__graphics != null && !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(this.__graphics)) {
			return false;
		}
		return null;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(this.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(this.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0) || this.opaqueBackground != this.__cacheBitmapBackground;
			var softwareDirty = needRender || this.__graphics != null && this.__graphics.__softwareDirty || !this.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var hardwareDirty = needRender || this.__graphics != null && this.__graphics.__hardwareDirty;
			var renderType = renderer.__type;
			if(softwareDirty || hardwareDirty) {
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(null) == false) {
						renderType = "canvas";
					}
				}
				if(softwareDirty && (renderType == "canvas" || renderType == "cairo")) {
					needRender = true;
				}
				if(hardwareDirty && renderType == "opengl") {
					needRender = true;
				}
			}
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(this.__cacheBitmapMatrix == null) {
				this.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = this.__cacheAsBitmapMatrix != null ? this.__cacheAsBitmapMatrix : this.__renderTransform;
			if(!needRender && (bitmapMatrix.a != this.__cacheBitmapMatrix.a || bitmapMatrix.b != this.__cacheBitmapMatrix.b || bitmapMatrix.c != this.__cacheBitmapMatrix.c || bitmapMatrix.d != this.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && this.__cacheBitmapData != null && this.__cacheBitmapData.image != null && this.__cacheBitmapData.image.version < this.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			this.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			this.__cacheBitmapMatrix.tx = 0;
			this.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				this.__getFilterBounds(rect,this.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				offsetX = rect.x > 0 ? Math.ceil(rect.x) : Math.floor(rect.x);
				offsetY = rect.y > 0 ? Math.ceil(rect.y) : Math.floor(rect.y);
				if(this.__cacheBitmapData != null) {
					if(filterWidth > this.__cacheBitmapData.width || filterHeight > this.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,this.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,this.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = this.__cacheBitmapData.width;
						bitmapHeight = this.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				this.__cacheBitmapBackground = this.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = this.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(this.__cacheBitmapData == null || bitmapWidth > this.__cacheBitmapData.width || bitmapHeight > this.__cacheBitmapData.height) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						this.__cacheBitmapRenderer = null;
					} else {
						this.__cacheBitmapData.__fillRect(this.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						this.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					this.__cacheBitmapData2 = null;
					this.__cacheBitmapData3 = null;
					this.__cacheBitmapRenderer = null;
					return true;
				}
			} else {
				this.__cacheBitmapData = this.__cacheBitmap.get_bitmapData();
				this.__cacheBitmapData2 = null;
				this.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				if(bitmapMatrix == this.__renderTransform) {
					this.__cacheBitmap.__renderTransform.identity();
					this.__cacheBitmap.__renderTransform.tx = this.__renderTransform.tx + offsetX;
					this.__cacheBitmap.__renderTransform.ty = this.__renderTransform.ty + offsetY;
				} else {
					this.__cacheBitmap.__renderTransform.copyFrom(this.__cacheBitmapMatrix);
					this.__cacheBitmap.__renderTransform.invert();
					this.__cacheBitmap.__renderTransform.concat(this.__renderTransform);
					this.__cacheBitmap.__renderTransform.tx += offsetX;
					this.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			this.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__worldShader = this.__worldShader;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				if(this.__cacheBitmapRenderer == null || renderType != this.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						this.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,this.__cacheBitmapData);
					} else {
						if(this.__cacheBitmapData.image == null) {
							var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
							this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__cacheBitmapData.image);
						this.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(this.__cacheBitmapData.image.buffer.__srcContext);
					}
					this.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					this.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapRenderer.__stage = this.stage;
				this.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				this.__cacheBitmapRenderer.__setBlendMode(10);
				this.__cacheBitmapRenderer.__worldAlpha = 1 / this.__worldAlpha;
				this.__cacheBitmapRenderer.__worldTransform.copyFrom(this.__renderTransform);
				this.__cacheBitmapRenderer.__worldTransform.invert();
				this.__cacheBitmapRenderer.__worldTransform.concat(this.__cacheBitmapMatrix);
				this.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				this.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				this.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				this.__cacheBitmapRenderer.__worldColorTransform.__invert();
				this.__isCacheBitmapRender = true;
				if(this.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = this.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					this.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(this.__cacheBitmapData);
					if(this.__cacheBitmapData.image != null) {
						this.__cacheBitmapData.__textureVersion = this.__cacheBitmapData.image.version + 1;
					}
					this.__cacheBitmapData.__drawGL(this,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g2 = 0;
						var _g11 = this.__filters;
						while(_g2 < _g11.length) {
							var filter1 = _g11[_g2];
							++_g2;
							if(filter1.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = this.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(this.__cacheBitmapData2 == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
							this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							if(this.__cacheBitmapData2.image != null) {
								this.__cacheBitmapData2.__textureVersion = this.__cacheBitmapData2.image.version + 1;
							}
						}
						this.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = this.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(this.__cacheBitmapData3 == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
								if(this.__cacheBitmapData3.image != null) {
									this.__cacheBitmapData3.__textureVersion = this.__cacheBitmapData3.image.version + 1;
								}
							}
							this.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = this.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g21 = 0;
						var _g3 = this.__filters;
						while(_g21 < _g3.length) {
							var filter2 = _g3[_g21];
							++_g21;
							if(filter2.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter2.__smooth);
							}
							var _g22 = 0;
							var _g31 = filter2.__numShaderPasses;
							while(_g22 < _g31) {
								var i = _g22++;
								shader = filter2.__initShader(childRenderer,i);
								childRenderer.__setBlendMode(filter2.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter2.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							if(filter2.__preserveObject) {
								childRenderer.__setBlendMode(10);
								childRenderer.__setRenderTarget(bitmap);
								childRenderer.__renderFilterPass(bitmap3,childRenderer.__defaultDisplayShader,filter2.__smooth,false);
							}
							filter2.__renderDirty = false;
						}
						this.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					this.__cacheBitmapData.__drawCanvas(this,this.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData1 = false;
						var needCopyOfOriginal1 = false;
						var _g4 = 0;
						var _g12 = this.__filters;
						while(_g4 < _g12.length) {
							var filter3 = _g12[_g4];
							++_g4;
							if(filter3.__needSecondBitmapData) {
								needSecondBitmapData1 = true;
							}
							if(filter3.__preserveObject) {
								needCopyOfOriginal1 = true;
							}
						}
						var bitmap1 = this.__cacheBitmapData;
						var bitmap21 = null;
						var bitmap31 = null;
						if(needSecondBitmapData1) {
							if(this.__cacheBitmapData2 == null || this.__cacheBitmapData2.image == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
								this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							}
							bitmap21 = this.__cacheBitmapData2;
						} else {
							bitmap21 = bitmap1;
						}
						if(needCopyOfOriginal1) {
							if(this.__cacheBitmapData3 == null || this.__cacheBitmapData3.image == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
							}
							bitmap31 = this.__cacheBitmapData3;
						}
						if(this.__tempPoint == null) {
							this.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = this.__tempPoint;
						var cacheBitmap1;
						var lastBitmap;
						var _g23 = 0;
						var _g32 = this.__filters;
						while(_g23 < _g32.length) {
							var filter4 = _g32[_g23];
							++_g23;
							if(filter4.__preserveObject) {
								bitmap31.copyPixels(bitmap1,bitmap1.rect,destPoint);
							}
							lastBitmap = filter4.__applyFilter(bitmap21,bitmap1,bitmap1.rect,destPoint);
							if(filter4.__preserveObject) {
								lastBitmap.draw(bitmap31,null,this.__objectTransform != null ? this.__objectTransform.get_colorTransform() : null);
							}
							filter4.__renderDirty = false;
							if(needSecondBitmapData1 && lastBitmap == bitmap21) {
								cacheBitmap1 = bitmap1;
								bitmap1 = bitmap21;
								bitmap21 = cacheBitmap1;
							}
						}
						if(this.__cacheBitmapData != bitmap1) {
							cacheBitmap1 = this.__cacheBitmapData;
							this.__cacheBitmapData = bitmap1;
							this.__cacheBitmapData2 = cacheBitmap1;
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
							this.__cacheBitmapRenderer = null;
						}
						this.__cacheBitmap.__imageVersion = this.__cacheBitmapData.__textureVersion;
					}
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!this.__cacheBitmapColorTransform.__isDefault(true)) {
						this.__cacheBitmapColorTransform.alphaMultiplier = 1;
						this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
					}
				}
				this.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(this.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				this.__cacheBitmap.__renderDOMClear(renderer);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapData2 = null;
			this.__cacheBitmapData3 = null;
			this.__cacheBitmapColorTransform = null;
			this.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		return updated;
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform1 = renderParent.__renderTransform;
			var target1 = this.__renderTransform;
			target1.a = local.a * parentTransform1.a + local.b * parentTransform1.c;
			target1.b = local.a * parentTransform1.b + local.b * parentTransform1.d;
			target1.c = local.c * parentTransform1.a + local.d * parentTransform1.c;
			target1.d = local.c * parentTransform1.b + local.d * parentTransform1.d;
			target1.tx = local.tx * parentTransform1.a + local.ty * parentTransform1.c + parentTransform1.tx;
			target1.ty = local.tx * parentTransform1.b + local.ty * parentTransform1.d + parentTransform1.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.get_colorTransform().__equals(value.get_colorTransform(),true) || !this.get_cacheAsBitmap() && this.__objectTransform.get_colorTransform().alphaMultiplier != value.get_colorTransform().alphaMultiplier) {
			this.__objectTransform.get_colorTransform().__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value));
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = openfl_events_Event.__pool.get();
			event.type = "added";
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			openfl_events_Event.__pool.release(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getFilterBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest1 = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest1 = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest1;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderCanvasMask: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvasMask(renderer);
		}
	}
	,__renderDOM: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__renderDOM(renderer);
			}
		}
		var orphan2 = this.__removedChildren.iterator();
		while(orphan2.hasNext()) {
			var orphan3 = orphan2.next();
			if(orphan3.stage == null) {
				orphan3.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderDOM(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderDOMClear: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__renderDOMClear(renderer);
			}
		}
		var orphan2 = this.__removedChildren.iterator();
		while(orphan2.hasNext()) {
			var orphan3 = orphan2.next();
			if(orphan3.stage == null) {
				orphan3.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOMClear(renderer);
		}
	}
	,__renderGL: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderer.__pushMaskObject(this);
			if(renderer.__stage != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderer);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderer);
				}
			}
		}
		if(this.__children.length > 0) {
			renderer.__popMaskObject(this);
		}
	}
	,__renderGLMask: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGLMask(renderer);
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		}
		value = openfl_display_InteractiveObject.prototype.__shouldCacheHardware.call(this,value);
		if(value == true) {
			return true;
		}
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				value = child.__shouldCacheHardware(value);
				if(value == true) {
					return true;
				}
			}
		}
		return value;
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var MainTemplate = function() {
	this.game = null;
	openfl_display_Sprite.call(this);
	this.root_ = new openfl_display_Sprite();
	this.root_.addEventListener("addedToStage",$bind(this,this.added));
	this.addChild(this.root_);
};
$hxClasses["MainTemplate"] = MainTemplate;
MainTemplate.__name__ = "MainTemplate";
MainTemplate.__super__ = openfl_display_Sprite;
MainTemplate.prototype = $extend(openfl_display_Sprite.prototype,{
	inited: null
	,game: null
	,resize: function(e) {
		if(!this.inited) {
			this.init();
		} else {
			this.game.resize(this.stage.stageWidth,this.stage.stageHeight);
		}
	}
	,init: function() {
		if(this.inited) {
			return;
		}
		this.inited = true;
		GlobalBase.initScreenParam(this.stage.stageWidth,this.stage.stageHeight);
		this.game = GlobalBase.createGameApp(this.root_);
		this.previousTime = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,previousTime: null
	,onEnterFrame: function(_event) {
		var currentTime = openfl_Lib.getTimer();
		var deltaTime = (currentTime - this.previousTime) / 1000;
		if(deltaTime > 0.1) {
			deltaTime = 0.1;
		}
		this.previousTime = currentTime;
		this.game.process(deltaTime);
	}
	,root_: null
	,added: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.added));
		this.stage.addEventListener("resize",$bind(this,this.resize));
		this.init();
	}
	,__class__: MainTemplate
});
var Main = function() {
	new Global();
	MainTemplate.call(this);
	iriysoft_graphic_IsfRenderDataNME.tilemap_shader = new OurShader();
	lime_utils_Assets.cache.enabled = false;
	openfl_utils_Assets.cache.set_enabled(false);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	openfl_Lib.get_current().addChild(new Main());
};
Main.__super__ = MainTemplate;
Main.prototype = $extend(MainTemplate.prototype,{
	added: function(e) {
		MainTemplate.prototype.added.call(this,e);
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var Backpack = function(width,height) {
	this.free_ = [];
	this.busy_ = [];
	this.bounds_rc_ = new openfl_geom_Rectangle();
	this.height_ = 0;
	this.width_ = 0;
	this.id_ = 0;
	this.width_ = width;
	this.height_ = height;
	this.AddFreeElem(new openfl_geom_Rectangle(0,0,this.width_,this.height_));
};
$hxClasses["Backpack"] = Backpack;
Backpack.__name__ = "Backpack";
Backpack.prototype = {
	Alloc: function(width,height) {
		var elem = this.AllocElem(width,height);
		if(elem == null) {
			return -1;
		}
		elem.id = this.id_++;
		return elem.id;
	}
	,Free: function(id) {
		var _g = 0;
		var _g1 = this.busy_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.id == id) {
				HxOverrides.remove(this.busy_,elem);
				elem.id = -1;
				this.free_.push(elem);
				this.SortFree();
				break;
			}
		}
	}
	,GetRect: function(id) {
		var _g = 0;
		var _g1 = this.busy_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.id == id) {
				return elem.rc;
			}
		}
		return null;
	}
	,GetElems: function() {
		return this.busy_;
	}
	,PackNew: function(width,height) {
		this.busy_.sort(function(l,r) {
			if(l.sum < r.sum) {
				return 1;
			}
			if(l.sum > r.sum) {
				return -1;
			}
			return 0;
		});
		var packed = new Backpack(width,height);
		packed.SetLastId(this.id_);
		var _g = 0;
		var _g1 = this.busy_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			var packed_elem = packed.AllocElem(elem.rc.width | 0,elem.rc.height | 0);
			if(packed_elem == null) {
				return null;
			}
			packed_elem.id = elem.id;
		}
		return packed;
	}
	,GetBounds: function() {
		return this.bounds_rc_;
	}
	,width: function() {
		return this.width_;
	}
	,height: function() {
		return this.height_;
	}
	,Dispose: function() {
		this.bounds_rc_ = null;
		this.busy_ = null;
		this.free_ = null;
	}
	,Trace: function() {
		haxe_Log.trace("#### busy",{ fileName : "../framework/hx/src_fw/Backpack.hx", lineNumber : 69, className : "Backpack", methodName : "Trace"});
		haxe_Log.trace(this.busy_,{ fileName : "../framework/hx/src_fw/Backpack.hx", lineNumber : 70, className : "Backpack", methodName : "Trace"});
		haxe_Log.trace("#### free",{ fileName : "../framework/hx/src_fw/Backpack.hx", lineNumber : 71, className : "Backpack", methodName : "Trace"});
		haxe_Log.trace(this.free_,{ fileName : "../framework/hx/src_fw/Backpack.hx", lineNumber : 72, className : "Backpack", methodName : "Trace"});
	}
	,SetLastId: function(id) {
		this.id_ = id;
	}
	,SortFree: function() {
		this.free_.sort(function(l,r) {
			if(l.sum < r.sum) {
				return 1;
			}
			if(l.sum > r.sum) {
				return -1;
			}
			return 0;
		});
	}
	,AllocElem: function(width,height) {
		if(width <= 0 || height <= 0) {
			return null;
		}
		var fit_elem = null;
		var _g = 0;
		var _g1 = this.free_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(width > elem.rc.width || height > elem.rc.height) {
				continue;
			}
			fit_elem = elem;
			if(width == elem.rc.width && height == elem.rc.height) {
				break;
			}
		}
		if(fit_elem == null) {
			return null;
		}
		var fit_rc = fit_elem.rc;
		if(fit_rc.width - width >= 4) {
			this.AddFreeElem(new openfl_geom_Rectangle(fit_rc.x + width,fit_rc.y,fit_rc.width - width,height));
		}
		if(fit_rc.height - height >= 4) {
			this.AddFreeElem(new openfl_geom_Rectangle(fit_rc.x,fit_rc.y + height,fit_rc.width,fit_rc.height - height));
		}
		this.SortFree();
		this.SetBusy(fit_elem,width,height);
		this.bounds_rc_ = this.bounds_rc_.union(fit_elem.rc);
		return fit_elem;
	}
	,AddFreeElem: function(rc) {
		var elem = new Elem(rc);
		this.free_.push(elem);
	}
	,SetBusy: function(elem,width,height) {
		HxOverrides.remove(this.free_,elem);
		elem.rc.width = width;
		elem.rc.height = height;
		elem.sum = width + height;
		this.busy_.push(elem);
	}
	,id_: null
	,width_: null
	,height_: null
	,bounds_rc_: null
	,busy_: null
	,free_: null
	,__class__: Backpack
};
var Elem = function(rc_) {
	this.sum = 0;
	this.rc = null;
	this.id = -1;
	this.rc = rc_;
	this.sum = Math.ceil(this.rc.width + this.rc.height);
};
$hxClasses["Elem"] = Elem;
Elem.__name__ = "Elem";
Elem.prototype = {
	id: null
	,rc: null
	,sum: null
	,__class__: Elem
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = "Const";
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var GameApp = function(root) {
	this.activeGameState = false;
	this.gm_ctx_ = null;
	this.curr_time = 0;
	AppTemplate.call(this,new GameVisualManager(root,["system","permanent","backgrounds","enemes","enemes2","screens"],[],"",true),new AdvMouseDeviceControl(root.stage));
	this.gm_ctx_ = new GameContext();
	this.gm_ctx_.root = root;
	this.gm_ctx_.vs_mgr = this.visualManager;
	var tmp = openfl_utils_Assets.getText("ui/screens_data.json");
	this.gm_ctx_.screens_root = JSON.parse(tmp).root;
	this.gm_ctx_.root.stage.addEventListener("activate",$bind(this,this.OnActivate));
	this.gm_ctx_.root.stage.addEventListener("deactivate",$bind(this,this.OnDeactivate));
	this.gm_ctx_.root.set_scrollRect(new openfl_geom_Rectangle(0,0,Global.kMaxScrWidth,Global.kMaxScrHeight));
	this.processPeriod = 1 / Global.kFps;
	text_TextRes.SetLocalizationData(text_En.data);
	SoundConst.Init();
	var interface_snd_man = new iriysoft_sound_SoundManager(SoundConst.sounds_);
	interface_snd_man = new iriysoft_sound_SoundManager(SoundConst.sounds_);
	this.gm_ctx_.gui_snd = interface_snd_man;
	var game_snd_man = new iriysoft_sound_SoundManager(SoundConst.sounds_);
	game_snd_man = new iriysoft_sound_SoundManager(SoundConst.sounds_);
	this.gm_ctx_.game_snd = game_snd_man;
	var music_manager = new iriysoft_sound_MusicManager(new iriysoft_sound_SoundManager(SoundConst.sounds_));
	this.gm_ctx_.music = music_manager;
	this.gm_ctx_.save_data = new SaveData("com.iriysoft.deadzed");
	this.gm_ctx_.save_data.Load();
	AdManager.getSignalAd().connect($bind(this,this.onAdEvent));
	this.CreateStartScr();
};
$hxClasses["GameApp"] = GameApp;
GameApp.__name__ = "GameApp";
GameApp.vs_mgr = function() {
	return GameApp.vs_mgr_;
};
GameApp.resize_data = function() {
	return GameApp.resize_data_;
};
GameApp.__super__ = AppTemplate;
GameApp.prototype = $extend(AppTemplate.prototype,{
	ChangeScreen: function(screen) {
		this.resetAccumulator();
		this.changeScreen(screen,new ui_AlphaTransitionScr(this.gm_ctx_));
	}
	,CreateStartScr: function() {
		haxe_Log.trace("CreateStartScr",{ fileName : "src_base/GameApp.hx", lineNumber : 112, className : "GameApp", methodName : "CreateStartScr"});
		var scr = new ui_StartScr(this.gm_ctx_);
		scr.game_scr_sg().connect($bind(this,this.OnGameScr));
		this.ChangeScreen(scr);
	}
	,OnPauseScr: function() {
	}
	,OnGameScr: function() {
		this.CreateGameScr();
	}
	,CreateGameScr: function() {
		var scr = new ui_GameScr(this.gm_ctx_);
		scr.close_sg().connect($bind(this,this.OnCloseGameScr));
		this.ChangeScreen(scr);
	}
	,OnCloseGameScr: function() {
		this.CreateStartScr();
	}
	,OnActivate: function(e) {
		haxe_Log.trace("OnActivate " + Std.string(AdManager.isShowing()),{ fileName : "src_base/GameApp.hx", lineNumber : 156, className : "GameApp", methodName : "OnActivate"});
		if(!AdManager.isShowing()) {
			this.resetAccumulator();
			this.gm_ctx_.game_snd.set_mute(false);
			this.gm_ctx_.gui_snd.set_mute(false);
			this.gm_ctx_.music.set_mute(false);
		}
	}
	,OnDeactivate: function(e) {
		haxe_Log.trace("OnDeactivate " + Std.string(AdManager.isShowing()),{ fileName : "src_base/GameApp.hx", lineNumber : 166, className : "GameApp", methodName : "OnDeactivate"});
		if(Const.CurrentStateGame != null) {
			Const.CurrentStateGame.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
		}
		this.isWindowShowed = false;
		if(!AdManager.isShowing()) {
			this.resetAccumulator();
			this.gm_ctx_.game_snd.set_mute(true);
			this.gm_ctx_.gui_snd.set_mute(true);
			this.gm_ctx_.music.set_mute(true);
		}
	}
	,curr_time: null
	,UpdateActuate: function(time_step) {
		var _gthis = this;
		motion_actuators_SimpleActuator.getTime = function() {
			return _gthis.curr_time;
		};
		motion_actuators_SimpleActuator.stage_onEnterFrame(null);
		this.curr_time += time_step;
	}
	,customProcess: function(time_step) {
		GameApp.resize_data_ = iriysoft_helper_Fwh.CalcResizeData();
		this.UpdateActuate(time_step);
		AppTemplate.prototype.customProcess.call(this,time_step);
	}
	,onAdEvent: function(e) {
		if(e == apiManager_AdEventType.START) {
			this.gm_ctx_.music.set_mute(true);
			this.gm_ctx_.gui_snd.set_mute(true);
			this.gm_ctx_.game_snd.set_mute(true);
		}
		if(e == apiManager_AdEventType.FINISH) {
			this.gm_ctx_.music.set_mute(false);
			this.gm_ctx_.gui_snd.set_mute(false);
			this.gm_ctx_.game_snd.set_mute(false);
		}
		if(e == apiManager_AdEventType.ERROR) {
			this.gm_ctx_.music.set_mute(false);
			this.gm_ctx_.gui_snd.set_mute(false);
			this.gm_ctx_.game_snd.set_mute(false);
		}
	}
	,gm_ctx_: null
	,activeGameState: null
	,__class__: GameApp
});
var iriysoft_graphic_res_IIsfViewObjectDescriptor = function() { };
$hxClasses["iriysoft.graphic.res.IIsfViewObjectDescriptor"] = iriysoft_graphic_res_IIsfViewObjectDescriptor;
iriysoft_graphic_res_IIsfViewObjectDescriptor.__name__ = "iriysoft.graphic.res.IIsfViewObjectDescriptor";
iriysoft_graphic_res_IIsfViewObjectDescriptor.__isInterface__ = true;
iriysoft_graphic_res_IIsfViewObjectDescriptor.__interfaces__ = [iriysoft_core_IIsfDisposable];
iriysoft_graphic_res_IIsfViewObjectDescriptor.prototype = {
	createViewObject: null
	,__class__: iriysoft_graphic_res_IIsfViewObjectDescriptor
};
var iriysoft_graphic_atlas_IsfAtlasData = function() {
	iriysoft_core_IsfDisposableObject.call(this);
	this.renderScale = 1;
	this.tileset = null;
	this.smooth = true;
	this.resNames = new haxe_ds_StringMap();
	this.images = [];
	this.framesDataImage = [];
	this.framesDataMatrix = [];
	this.resourceDataInfo = [];
	this.resourceDataFrames = [];
	this.framesNumbersIndex = [];
};
$hxClasses["iriysoft.graphic.atlas.IsfAtlasData"] = iriysoft_graphic_atlas_IsfAtlasData;
iriysoft_graphic_atlas_IsfAtlasData.__name__ = "iriysoft.graphic.atlas.IsfAtlasData";
iriysoft_graphic_atlas_IsfAtlasData.__interfaces__ = [iriysoft_graphic_res_IIsfViewObjectDescriptor];
iriysoft_graphic_atlas_IsfAtlasData.__super__ = iriysoft_core_IsfDisposableObject;
iriysoft_graphic_atlas_IsfAtlasData.prototype = $extend(iriysoft_core_IsfDisposableObject.prototype,{
	renderScale: null
	,textureID: null
	,tileset: null
	,smooth: null
	,resNames: null
	,images: null
	,framesDataImage: null
	,framesDataMatrix: null
	,resourceDataInfo: null
	,resourceDataFrames: null
	,framesNumbersIndex: null
	,customDispose: function() {
		if(this.images != null) {
			var _g = 0;
			var _g1 = this.images;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				o.dispose();
			}
			this.images = null;
		}
		this.resNames = null;
		if(this.tileset != null && this.tileset.get_bitmapData() != null) {
			this.tileset.get_bitmapData().dispose();
			this.tileset.set_bitmapData(null);
		}
		this.tileset = null;
		this.framesDataImage = null;
		this.framesDataMatrix = null;
		this.resourceDataInfo = null;
		this.resourceDataFrames = null;
		this.framesNumbersIndex = null;
		iriysoft_core_IsfDisposableObject.prototype.customDispose.call(this);
	}
	,hasRes: function(_id) {
		var _this = this.resNames;
		if(__map_reserved[_id] != null) {
			return _this.existsReserved(_id);
		} else {
			return _this.h.hasOwnProperty(_id);
		}
	}
	,createViewObject: function(_id,_mode) {
		if(_mode == null) {
			_mode = "";
		}
		return null;
	}
	,__class__: iriysoft_graphic_atlas_IsfAtlasData
});
var GameAtlas = function() {
	this.tiles = null;
	iriysoft_graphic_atlas_IsfAtlasData.call(this);
};
$hxClasses["GameAtlas"] = GameAtlas;
GameAtlas.__name__ = "GameAtlas";
GameAtlas.__super__ = iriysoft_graphic_atlas_IsfAtlasData;
GameAtlas.prototype = $extend(iriysoft_graphic_atlas_IsfAtlasData.prototype,{
	imageName: null
	,imageDataName: null
	,animationDataName: null
	,loadingStep: null
	,getLoadingStep: function() {
		return this.loadingStep / 4;
	}
	,tiles: null
	,createData: function(_textureID,_imageName,_imageDataName,_animationDataName,_smooth,_renderScale) {
		if(_renderScale == null) {
			_renderScale = 1.0;
		}
		if(_smooth == null) {
			_smooth = true;
		}
		this.renderScale = _renderScale;
		this.textureID = _textureID;
		this.smooth = _smooth;
		this.imageName = _imageName;
		this.imageDataName = _imageDataName;
		this.animationDataName = _animationDataName;
		this.loadingStep = 1;
	}
	,processLoading: function() {
		var _gthis = this;
		switch(this.loadingStep) {
		case 1:
			var td = GlobalBase.loadJson(this.imageDataName);
			this.tiles = [];
			var els = td.elements;
			var _g = 0;
			var _g1 = els.length;
			while(_g < _g1) {
				var i = _g++;
				this.tiles.push(null);
			}
			var _g2 = 0;
			while(_g2 < els.length) {
				var e = els[_g2];
				++_g2;
				var tl = new iriysoft_graphic_atlas_IsfTileLocation(this.textureID,e.x,e.y,e.w,e.h,e.a != 0);
				tl.tileIndex = Std.parseInt(e.name);
				this.tiles[tl.tileIndex] = tl;
			}
			var bd_rgb = null;
			var bd_alpha = null;
			var Merge = function() {
				if(bd_rgb == null || bd_alpha == null) {
					return;
				}
				bd_rgb.copyChannel(bd_alpha,bd_rgb.rect,new openfl_geom_Point(),1,8);
				bd_alpha.dispose();
				_gthis.tileset = new openfl_display_Tileset(bd_rgb);
				var _g3 = 0;
				var _g4 = _gthis.tiles.length;
				while(_g3 < _g4) {
					var i1 = _g3++;
					var t = _gthis.tiles[i1];
					if(t == null) {
						t = _gthis.tiles[i1] = _gthis.tiles[0];
					}
					_gthis.tileset.addRect(new openfl_geom_Rectangle(t.x,t.y,t.width,t.height));
				}
				bd_rgb = null;
				bd_alpha = null;
				_gthis.loadingStep = 3;
			};
			if(!openfl_utils_Assets.exists(this.imageName + ".png")) {
				haxe_Log.trace("trying load image: " + (this.imageName + "-rgb.jpg"),{ fileName : "../framework/nme/src_nme/GameAtlas.hx", lineNumber : 111, className : "GameAtlas", methodName : "processLoading"});
				openfl_utils_Assets.loadBitmapData(this.imageName + "-rgb.jpg").onComplete(function(bd) {
					bd_rgb = bd;
					Merge();
				}).onError(function(e1) {
					haxe_Log.trace(e1,{ fileName : "../framework/nme/src_nme/GameAtlas.hx", lineNumber : 118, className : "GameAtlas", methodName : "processLoading"});
				});
				haxe_Log.trace("trying load image: " + (this.imageName + "-alpha.png"),{ fileName : "../framework/nme/src_nme/GameAtlas.hx", lineNumber : 119, className : "GameAtlas", methodName : "processLoading"});
				openfl_utils_Assets.loadBitmapData(this.imageName + "-alpha.png").onComplete(function(bd1) {
					bd_alpha = bd1;
					Merge();
				}).onError(function(e2) {
					haxe_Log.trace(e2,{ fileName : "../framework/nme/src_nme/GameAtlas.hx", lineNumber : 126, className : "GameAtlas", methodName : "processLoading"});
				});
			} else {
				haxe_Log.trace("trying load image: " + (this.imageName + ".png"),{ fileName : "../framework/nme/src_nme/GameAtlas.hx", lineNumber : 128, className : "GameAtlas", methodName : "processLoading"});
				var bdf = openfl_utils_Assets.loadBitmapData(this.imageName + ".png");
				this.loadingStep = 2;
				bdf.onComplete(function(bd2) {
					_gthis.tileset = new openfl_display_Tileset(bd2);
					var _g31 = 0;
					var _g41 = _gthis.tiles.length;
					while(_g31 < _g41) {
						var i2 = _g31++;
						var t1 = _gthis.tiles[i2];
						if(t1 == null) {
							t1 = _gthis.tiles[i2] = _gthis.tiles[0];
						}
						_gthis.tileset.addRect(new openfl_geom_Rectangle(t1.x,t1.y,t1.width,t1.height));
					}
					_gthis.loadingStep = 3;
				});
			}
			return false;
		case 2:
			return false;
		case 3:
			var data = GlobalBase.loadBinData(this.animationDataName);
			var names = data.names;
			var _g5 = 0;
			var _g11 = names.length;
			while(_g5 < _g11) {
				var i3 = _g5++;
				var _this = this.resNames;
				var key = names[i3];
				if(__map_reserved[key] != null) {
					_this.setReserved(key,i3);
				} else {
					_this.h[key] = i3;
				}
			}
			var imgs = data.images;
			var i4 = 0;
			while(i4 < imgs.length) {
				var tileIndex = imgs[i4++];
				var tl1 = this.tiles[tileIndex];
				var img = new iriysoft_graphic_atlas_IsfImageTT(tl1.textureID,tl1.tileIndex,imgs[i4++],imgs[i4++],tl1.width,tl1.height,tl1.rotated);
				this.images.push(img);
			}
			var frms = data.frames;
			var i5 = 0;
			while(i5 < frms.length) {
				var imageIndex = frms[i5++] | 0;
				this.addFrameData(imageIndex,frms[i5++],frms[i5++],frms[i5++],frms[i5++],frms[i5++],frms[i5++],frms[i5++]);
			}
			var res = data.res;
			var p = 0;
			while(p < res.length) {
				this.resourceDataInfo.push(this.resourceDataFrames.length);
				var nameIndex = res[p++];
				var resType = res[p++];
				this.resourceDataFrames.push(resType);
				if(resType == 0) {
					var imageIndex1 = res[p++];
					this.resourceDataFrames.push(imageIndex1);
				} else if(resType == 1) {
					var len = res[p++];
					this.resourceDataFrames.push(len);
					var _g21 = 0;
					var _g32 = len;
					while(_g21 < _g32) {
						var i6 = _g21++;
						var imageIndex2 = res[p++];
						this.resourceDataFrames.push(imageIndex2);
					}
				} else if(resType == 2) {
					this.resourceDataFrames.push(this.framesNumbersIndex.length);
					var len1 = res[p++];
					this.framesNumbersIndex.push(len1);
					var startFrame = this.resourceDataFrames.length;
					var _g22 = 0;
					var _g33 = len1;
					while(_g22 < _g33) {
						var i7 = _g22++;
						var len2 = res[p++];
						this.framesNumbersIndex.push(this.resourceDataFrames.length);
						this.resourceDataFrames.push(len2);
						var _g23 = 0;
						var _g34 = len2;
						while(_g23 < _g34) {
							var k = _g23++;
							var frameIndex = res[p++];
							this.resourceDataFrames.push(frameIndex);
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Nado realizovat drugie formati");
				}
			}
			this.loadingStep = 4;
			break;
		}
		this.tiles = null;
		return true;
	}
	,createViewObject: function(_id,_mode) {
		if(_mode == null) {
			_mode = "";
		}
		var _this = this.resNames;
		var ind = __map_reserved[_id] != null ? _this.getReserved(_id) : _this.h[_id];
		var pos = this.resourceDataInfo[ind];
		switch(this.resourceDataFrames[pos]) {
		case 0:
			return new iriysoft_graphic_IsfBitmapNME(this.images[this.resourceDataFrames[pos + 1]],this.renderScale);
		case 1:
			return new iriysoft_graphic_IsfRasterAnimationNME(this,pos + 1);
		case 2:
			if(_mode == "customized") {
				return new iriysoft_graphic_IsfPartsAnimationCustomizedNME(this,pos + 1);
			} else {
				return new iriysoft_graphic_IsfPartsAnimationNME(this,pos + 1);
			}
			break;
		}
		return null;
	}
	,addFrameData: function(_imageIndex,_a,_b,_c,_d,_tx,_ty,_alpha) {
		this.framesDataImage.push(_imageIndex);
		this.framesDataMatrix.push(_a);
		this.framesDataMatrix.push(_b);
		this.framesDataMatrix.push(_c);
		this.framesDataMatrix.push(_d);
		this.framesDataMatrix.push(-_tx);
		this.framesDataMatrix.push(-_ty);
		this.framesDataMatrix.push(_alpha);
	}
	,reloadTileSheet: function(bd) {
		this.tileset.set_bitmapData(bd);
	}
	,__class__: GameAtlas
});
var GameContext = function() {
	this.save_data = null;
	this.game_snd = null;
	this.music = null;
	this.gui_snd = null;
	this.root = null;
};
$hxClasses["GameContext"] = GameContext;
GameContext.__name__ = "GameContext";
GameContext.prototype = {
	root: null
	,vs_mgr: null
	,screens_root: null
	,gui_snd: null
	,music: null
	,game_snd: null
	,save_data: null
	,__class__: GameContext
};
var GameScreen = function(_vManager,_atlasNames,_backAlpha,_backColor,_modalMode) {
	if(_modalMode == null) {
		_modalMode = true;
	}
	if(_backColor == null) {
		_backColor = 0;
	}
	if(_backAlpha == null) {
		_backAlpha = -1.0;
	}
	iriysoft_core_IsfBaseObject.call(this);
	this.signalInitAfterLoadingComplete = new iriysoft_signal_IsfSignal1();
	this.visualManager = _vManager;
	this.renderLayer = this.visualManager.createRenderLayer(_atlasNames,_backAlpha,_backColor);
	this.modalMode = _modalMode;
	this.state = 0;
};
$hxClasses["GameScreen"] = GameScreen;
GameScreen.__name__ = "GameScreen";
GameScreen.__super__ = iriysoft_core_IsfBaseObject;
GameScreen.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	modalMode: null
	,visualManager: null
	,renderLayer: null
	,state: null
	,viewManager: null
	,get_viewManager: function() {
		return this.visualManager;
	}
	,signalInitAfterLoadingComplete: null
	,customDispose: function() {
		if(this.signalInitAfterLoadingComplete != null) {
			this.signalInitAfterLoadingComplete.dispose();
			this.signalInitAfterLoadingComplete = null;
		}
		if(this.renderLayer != null) {
			this.renderLayer.dispose();
			this.renderLayer = null;
		}
		this.visualManager = null;
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeStep);
		if(this.visualManager.isActive() && this.state == 1) {
			this.initAfterLoading();
		}
	}
	,startLoading: function() {
		this.state = 1;
		this.visualManager.reloadAtlases(this.renderLayer.atlasNames);
	}
	,initAfterLoading: function() {
		this.state = 2;
		this.signalInitAfterLoadingComplete.dispatch(this);
		this.processScreen(0);
	}
	,processScreen: function(_timeStep) {
		this.renderLayer.process(_timeStep);
	}
	,addAllLayersAtDisplay: function() {
		this.visualManager.addRenderLayer(this.renderLayer);
	}
	,startTransition: function(_curState,_newState) {
	}
	,finishTransition: function(_timeStep) {
	}
	,resize: function(_newWidth,_newHeight) {
	}
	,processCommand: function(_cmd,_val) {
		return false;
	}
	,__class__: GameScreen
	,__properties__: $extend(iriysoft_core_IsfBaseObject.prototype.__properties__,{get_viewManager:"get_viewManager"})
});
var iriysoft_graphic_IIsfViewManager = function() { };
$hxClasses["iriysoft.graphic.IIsfViewManager"] = iriysoft_graphic_IIsfViewManager;
iriysoft_graphic_IIsfViewManager.__name__ = "iriysoft.graphic.IIsfViewManager";
iriysoft_graphic_IIsfViewManager.__isInterface__ = true;
iriysoft_graphic_IIsfViewManager.__interfaces__ = [iriysoft_core_IIsfBaseObject];
iriysoft_graphic_IIsfViewManager.prototype = {
	fontQualityScale: null
	,setFontQualityScale: null
	,exists: null
	,createBitmap: null
	,createAnimation: null
	,createAnimationCustomized: null
	,createSprite: null
	,createTextField: null
	,createButton: null
	,createGlowFilter: null
	,BitmapFromRasterAnimation: null
	,GetAnimInfo: null
	,__class__: iriysoft_graphic_IIsfViewManager
};
var iriysoft_graphic_IsfViewMangerNME = function() {
	this.font_quality_scale_ = 1;
	this.render_info = new iriysoft_graphic_RenderInfo();
	iriysoft_core_IsfBaseObject.call(this);
	this.initAtlasManager();
};
$hxClasses["iriysoft.graphic.IsfViewMangerNME"] = iriysoft_graphic_IsfViewMangerNME;
iriysoft_graphic_IsfViewMangerNME.__name__ = "iriysoft.graphic.IsfViewMangerNME";
iriysoft_graphic_IsfViewMangerNME.__interfaces__ = [iriysoft_graphic_IIsfViewManager];
iriysoft_graphic_IsfViewMangerNME.__super__ = iriysoft_core_IsfBaseObject;
iriysoft_graphic_IsfViewMangerNME.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	customDispose: function() {
		this.disposeAtlasManager();
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
	}
	,exists: function(_id) {
		return this.getResourceDescriptor(_id) != null;
	}
	,createBitmap: function(_id) {
		var atl = this.getResourceDescriptor(_id);
		if(atl != null) {
			return js_Boot.__cast(atl.createViewObject(_id) , iriysoft_graphic_IIsfBitmap);
		}
		return this.createBitmap(this.getUnknowClipClass(_id));
	}
	,createAnimation: function(_id,_removeAfterFinish) {
		if(_removeAfterFinish == null) {
			_removeAfterFinish = false;
		}
		var atl = this.getResourceDescriptor(_id);
		if(atl != null) {
			var vo = atl.createViewObject(_id);
			var anim;
			if(js_Boot.__implements(vo,iriysoft_graphic_IIsfAnimation)) {
				anim = js_Boot.__cast(vo , iriysoft_graphic_IIsfAnimation);
			} else {
				anim = new iriysoft_graphic_IsfFakeAnimationNME();
				vo.set_name(_id);
				anim.addChild(vo);
			}
			anim.set_selfDestroy(_removeAfterFinish);
			return anim;
		}
		return this.createAnimation(this.getUnknowClipClass(_id));
	}
	,createAnimationCustomized: function(_id,_removeAfterFinish) {
		if(_removeAfterFinish == null) {
			_removeAfterFinish = false;
		}
		var atl = this.getResourceDescriptor(_id);
		if(atl != null) {
			return js_Boot.__cast(atl.createViewObject(_id,"customized") , iriysoft_graphic_IIsfAnimationCustomized);
		}
		return null;
	}
	,getUnknowClipClass: function(_id) {
		haxe_Log.trace("Unknown Clip Class: " + _id,{ fileName : "../framework/nme/src_nme/iriysoft/graphic/IsfViewMangerNME.hx", lineNumber : 98, className : "iriysoft.graphic.IsfViewMangerNME", methodName : "getUnknowClipClass"});
		return "UnknownClicpClass";
	}
	,createSprite: function() {
		return new iriysoft_graphic_IsfSpriteNME();
	}
	,createButton: function(_upView,_downView,_overView,_disableView,_hitView) {
		return new iriysoft_graphic_IsfButton(_upView,_downView,_overView,_disableView,_hitView);
	}
	,createTextField: function() {
		return new iriysoft_graphic_IsfTextFieldNME(this.font_quality_scale_);
	}
	,createGlowFilter: function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
		if(knockout == null) {
			knockout = false;
		}
		if(inner == null) {
			inner = false;
		}
		if(quality == null) {
			quality = 1;
		}
		if(strength == null) {
			strength = 2;
		}
		if(blurY == null) {
			blurY = 6;
		}
		if(blurX == null) {
			blurX = 6;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16711680;
		}
		return new openfl_filters_GlowFilter(color,alpha,1.4,1.4,1,1);
	}
	,BitmapFromRasterAnimation: function(anim_id,frame) {
		if(anim_id == null) {
			return null;
		}
		var atl = this.m_atlas.iterator();
		while(atl.hasNext()) {
			var atl1 = atl.next();
			if(atl1 == null) {
				continue;
			}
			if(atl1.hasRes(anim_id)) {
				var _this = atl1.resNames;
				var ind = __map_reserved[anim_id] != null ? _this.getReserved(anim_id) : _this.h[anim_id];
				var pos = atl1.resourceDataInfo[ind];
				var type = atl1.resourceDataFrames[pos];
				if(type != 1) {
					return null;
				}
				var total_frames = atl1.resourceDataFrames[pos + 1];
				var image = atl1.images[atl1.resourceDataFrames[pos + 2 + frame - 1]];
				return new iriysoft_graphic_IsfBitmapNME(image);
			}
		}
		return null;
	}
	,GetAnimInfo: function(anim_id) {
		if(anim_id == null) {
			return null;
		}
		var atl = this.m_atlas.iterator();
		while(atl.hasNext()) {
			var atl1 = atl.next();
			if(atl1 == null) {
				continue;
			}
			if(atl1.hasRes(anim_id)) {
				var _this = atl1.resNames;
				var ind = __map_reserved[anim_id] != null ? _this.getReserved(anim_id) : _this.h[anim_id];
				var pos = atl1.resourceDataInfo[ind];
				var type = atl1.resourceDataFrames[pos];
				var anim_info = null;
				if(type == 1) {
					anim_info = new iriysoft_graphic_AnimInfo(type,atl1.resourceDataFrames[pos + 1]);
				} else {
					anim_info = new iriysoft_graphic_AnimInfo(type,atl1.framesNumbersIndex[atl1.resourceDataFrames[pos + 1]]);
				}
				return anim_info;
			}
		}
		return null;
	}
	,preprender: function(_source,_renderData) {
		_renderData.Reset();
		var matrix = new openfl_geom_Matrix();
		_source.render(_renderData,matrix,1);
	}
	,render_info: null
	,render: function(_renderData) {
		this.render_info.draw_calls = _renderData.draw_calls;
		this.render_info.draw_tiles = _renderData.draw_tiles;
		var textures_data = _renderData.textures_data();
		var _g = 0;
		while(_g < textures_data.length) {
			var texture_data = textures_data[_g];
			++_g;
			var tileset = this.getTileset(texture_data.texture_key);
			var tilemap = texture_data.root.getChildAt(texture_data.tilemap_index);
			tilemap.set_tileset(tileset);
		}
		return this.render_info;
	}
	,m_atlas: null
	,initAtlasManager: function() {
		this.m_atlas = new haxe_ds_IntMap();
		this.additionalDescriptions = new haxe_ds_StringMap();
	}
	,disposeAtlasManager: function() {
		if(this.m_atlas != null) {
			var k = this.m_atlas.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				this.m_atlas.h[k1] = null;
			}
			this.m_atlas = null;
		}
		if(this.additionalDescriptions != null) {
			var _this = this.additionalDescriptions;
			var o = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(o.hasNext()) {
				var o1 = o.next();
				o1.dispose();
			}
			this.additionalDescriptions = null;
		}
	}
	,addAtlas: function(_atlas) {
		this.m_atlas.h[_atlas.textureID] = _atlas;
	}
	,removeAtlas: function(_textureID) {
		var ad = this.m_atlas.h[_textureID];
		this.m_atlas.h[_textureID] = null;
		return ad;
	}
	,getTileset: function(_textureKey) {
		return this.m_atlas.h[_textureKey].tileset;
	}
	,additionalDescriptions: null
	,getResourceDescriptor: function(_id) {
		if(_id == null) {
			return null;
		}
		var atl = this.m_atlas.iterator();
		while(atl.hasNext()) {
			var atl1 = atl.next();
			if(atl1 == null) {
				continue;
			}
			if(atl1.hasRes(_id)) {
				return atl1;
			}
		}
		var _this = this.additionalDescriptions;
		if(__map_reserved[_id] != null ? _this.existsReserved(_id) : _this.h.hasOwnProperty(_id)) {
			var _this1 = this.additionalDescriptions;
			if(__map_reserved[_id] != null) {
				return _this1.getReserved(_id);
			} else {
				return _this1.h[_id];
			}
		}
		return null;
	}
	,font_quality_scale_: null
	,fontQualityScale: function() {
		return this.font_quality_scale_;
	}
	,setFontQualityScale: function(v) {
		this.font_quality_scale_ = v;
	}
	,__class__: iriysoft_graphic_IsfViewMangerNME
});
var IVisualManager = function() { };
$hxClasses["IVisualManager"] = IVisualManager;
IVisualManager.__name__ = "IVisualManager";
IVisualManager.__isInterface__ = true;
IVisualManager.__interfaces__ = [iriysoft_graphic_IIsfViewManager];
IVisualManager.prototype = {
	get_systemLayer: null
	,isActive: null
	,reloadAtlases: null
	,systemLayer: null
	,createRenderLayer: null
	,addRenderLayer: null
	,removeRenderLayer: null
	,getRenderLayerPosiotion: null
	,insertRenderLayerAt: null
	,signalMove: null
	,signalTouch: null
	,signalTouchDown: null
	,signalTouchUp: null
	,getLoadProgress: null
	,last_mouse_x: null
	,last_mouse_y: null
	,__class__: IVisualManager
	,__properties__: {get_systemLayer:"get_systemLayer"}
};
var IsfFPSDef = function() {
	this.additionalInfo = "";
	this.glowFilter = null;
	this.textFormat = new iriysoft_graphic_IsfTextFormat();
	this.height = 20;
	this.width = 300;
	this.textFormat.font = "Tahoma";
	this.textFormat.size = 12;
	this.textFormat.color = 0;
};
$hxClasses["IsfFPSDef"] = IsfFPSDef;
IsfFPSDef.__name__ = "IsfFPSDef";
IsfFPSDef.prototype = {
	width: null
	,height: null
	,textFormat: null
	,glowFilter: null
	,additionalInfo: null
	,__class__: IsfFPSDef
};
var GameVisualManager = function(_root,_atlasNames,_noSmothAtlasNames,_compositionRes,_loadQuantizationEnable) {
	if(_loadQuantizationEnable == null) {
		_loadQuantizationEnable = false;
	}
	if(_compositionRes == null) {
		_compositionRes = "";
	}
	this.curReloadedAtlasNum = 0;
	this.totalAtlasForReload = 0;
	this.touchMappedToMouse = false;
	this.last_mouse_y_ = 0;
	this.last_mouse_x_ = 0;
	this.root = null;
	this.loadQuantizationEnable = _loadQuantizationEnable;
	this.root = _root;
	this.signalMove = new iriysoft_signal_IsfSignal2();
	this.signalTouch = new iriysoft_signal_IsfSignal2();
	this.signalTouchDown = new iriysoft_signal_IsfSignal2();
	this.signalTouchUp = new iriysoft_signal_IsfSignal2();
	if(openfl_ui_Multitouch.get_supportsTouchEvents()) {
		openfl_ui_Multitouch.inputMode = 1;
		this.root.stage.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		this.root.stage.addEventListener("touchMove",$bind(this,this.onTouchMove));
		this.root.stage.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	this.root.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
	this.root.stage.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	this.root.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
	this.root.stage.addEventListener("middleMouseDown",$bind(this,this.onMiddleMouseDown));
	this.root.stage.addEventListener("middleMouseUp",$bind(this,this.onMiddleMouseUp));
	this.root.stage.addEventListener("middleClick",$bind(this,this.onMiddleClick));
	this.root.stage.addEventListener("rightMouseDown",$bind(this,this.onRightMouseDown));
	this.root.stage.addEventListener("rightMouseUp",$bind(this,this.onRightMouseUp));
	this.root.stage.addEventListener("rightClick",$bind(this,this.onRightClick));
	iriysoft_graphic_IsfViewMangerNME.call(this);
	this.createAtlasManagerBlock(_noSmothAtlasNames,_compositionRes);
	this.createRenderLayersBlock(_atlasNames);
};
$hxClasses["GameVisualManager"] = GameVisualManager;
GameVisualManager.__name__ = "GameVisualManager";
GameVisualManager.__interfaces__ = [IVisualManager];
GameVisualManager.__super__ = iriysoft_graphic_IsfViewMangerNME;
GameVisualManager.prototype = $extend(iriysoft_graphic_IsfViewMangerNME.prototype,{
	root: null
	,signalMove: null
	,signalTouch: null
	,signalTouchDown: null
	,signalTouchUp: null
	,loadQuantizationEnable: null
	,last_mouse_x_: null
	,last_mouse_y_: null
	,last_mouse_x: function() {
		return this.last_mouse_x_;
	}
	,last_mouse_y: function() {
		return this.last_mouse_y_;
	}
	,X: function(_x) {
		return (_x - this.root.get_x()) / this.root.get_scaleX();
	}
	,Y: function(_y) {
		return (_y - this.root.get_y()) / this.root.get_scaleY();
	}
	,mouseMove: function(_x,_y) {
	}
	,mouseMove1: function(_x,_y) {
		this.last_mouse_x_ = _x;
		this.last_mouse_y_ = _y;
		this.signalMove.dispatch(_x,_y);
		var l;
		var i = this.layers.length - 1;
		var res = false;
		while(i >= 0) {
			l = this.layers[i];
			--i;
			if(l.get_visible()) {
				res = l.eventMove(_x,_y);
				if(res) {
					break;
				}
			}
		}
	}
	,mouseDown: function(_x,_y,_buttonId) {
		this.last_mouse_x_ = _x;
		this.last_mouse_y_ = _y;
		this.signalTouchDown.dispatch(_x,_y);
		var l;
		var i = this.layers.length - 1;
		var res = false;
		while(i >= 0) {
			l = this.layers[i];
			--i;
			if(l.get_visible()) {
				res = l.eventDown(_x,_y,_buttonId);
				if(res || l.get_backAlpha() >= 0) {
					break;
				}
			}
		}
	}
	,mouseUp: function(_x,_y,_buttonId) {
		this.last_mouse_x_ = _x;
		this.last_mouse_y_ = _y;
		this.signalTouchUp.dispatch(_x,_y);
		var l;
		var i = this.layers.length - 1;
		while(i >= 0) {
			l = this.layers[i];
			--i;
			if(l.get_visible()) {
				var res = l.eventUp(_x,_y,_buttonId);
				if(res || l.get_backAlpha() >= 0) {
					break;
				}
			}
		}
	}
	,click: function(_x,_y,_buttonId) {
		this.last_mouse_x_ = _x;
		this.last_mouse_y_ = _y;
		this.signalTouch.dispatch(_x,_y);
		var l;
		var i = this.layers.length - 1;
		var res = false;
		while(i >= 0) {
			l = this.layers[i];
			--i;
			if(l.get_visible()) {
				res = l.eventClick(_x,_y,_buttonId);
				if(res || l.get_backAlpha() >= 0) {
					break;
				}
			}
		}
	}
	,touchMappedToMouse: null
	,touchMappedId: null
	,onTouchMove: function(e) {
		if(e.isPrimaryTouchPoint && this.touchMappedToMouse && this.touchMappedId == e.touchPointID) {
			return;
		}
		this.mouseMove(this.X(e.stageX),this.Y(e.stageY));
	}
	,onTouchBegin: function(e) {
		if(e.isPrimaryTouchPoint && !this.touchMappedToMouse) {
			this.touchMappedToMouse = true;
			this.touchMappedId = e.touchPointID;
			return;
		}
		this.mouseDown(this.X(e.stageX),this.Y(e.stageY),10 + e.touchPointID);
	}
	,onTouchEnd: function(e) {
		if(e.isPrimaryTouchPoint && this.touchMappedToMouse && this.touchMappedId == e.touchPointID) {
			this.touchMappedToMouse = false;
			return;
		}
		this.mouseUp(this.X(e.stageX),this.Y(e.stageY),10 + e.touchPointID);
	}
	,onMouseMove: function(e) {
		this.mouseMove(this.X(e.stageX),this.Y(e.stageY));
	}
	,onMouseDown: function(e) {
		this.mouseDown(this.X(e.stageX),this.Y(e.stageY),1);
	}
	,onMouseUp: function(e) {
		this.mouseUp(this.X(e.stageX),this.Y(e.stageY),1);
	}
	,onClick: function(e) {
		this.click(this.X(e.stageX),this.Y(e.stageY),1);
	}
	,onMiddleMouseDown: function(e) {
		this.mouseDown(this.X(e.stageX),this.Y(e.stageY),2);
	}
	,onMiddleMouseUp: function(e) {
		this.mouseUp(this.X(e.stageX),this.Y(e.stageY),2);
	}
	,onMiddleClick: function(e) {
		this.click(this.X(e.stageX),this.Y(e.stageY),2);
	}
	,onRightMouseDown: function(e) {
		this.mouseDown(this.X(e.stageX),this.Y(e.stageY),3);
	}
	,onRightMouseUp: function(e) {
		this.mouseUp(this.X(e.stageX),this.Y(e.stageY),3);
	}
	,onRightClick: function(e) {
		this.click(this.X(e.stageX),this.Y(e.stageY),3);
	}
	,dispose: function() {
		if(this.root != null && this.root.stage != null) {
			this.root.stage.removeEventListener("touchBegin",$bind(this,this.onTouchBegin));
			this.root.stage.removeEventListener("touchMove",$bind(this,this.onTouchMove));
			this.root.stage.removeEventListener("touchEnd",$bind(this,this.onTouchEnd));
			this.root.stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
			this.root.stage.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
			this.root.stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
			this.root.stage.removeEventListener("click",$bind(this,this.onClick));
			this.root.stage.removeEventListener("middleMouseDown",$bind(this,this.onMiddleMouseDown));
			this.root.stage.removeEventListener("middleMouseUp",$bind(this,this.onMiddleMouseUp));
			this.root.stage.removeEventListener("middleClick",$bind(this,this.onMiddleClick));
			this.root.stage.removeEventListener("rightMouseDown",$bind(this,this.onRightMouseDown));
			this.root.stage.removeEventListener("rightMouseUp",$bind(this,this.onRightMouseUp));
			this.root.stage.removeEventListener("rightClick",$bind(this,this.onRightClick));
		}
		if(this.signalMove != null) {
			this.signalMove.dispose();
			this.signalMove = null;
		}
		if(this.signalTouch != null) {
			this.signalTouch.dispose();
			this.signalTouch = null;
		}
		if(this.signalTouchDown != null) {
			this.signalTouchDown.dispose();
			this.signalTouchDown = null;
		}
		if(this.signalTouchUp != null) {
			this.signalTouchUp.dispose();
			this.signalTouchUp = null;
		}
		this.root = null;
		this.disposeRenderLayersBlock();
		this.disposeAtlasManagerBlock();
		iriysoft_graphic_IsfViewMangerNME.prototype.dispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_graphic_IsfViewMangerNME.prototype.customProcess.call(this,_timeStep);
		this.mouseMove1(this.X(this.root.stage.get_mouseX()),this.Y(this.root.stage.get_mouseY()));
		iriysoft_graphic_IsfTouchObject.ProcessRolls();
		this.processAtlasManagerBlock(_timeStep);
		this.processRenderLayersBlock(_timeStep);
	}
	,atlasNameList: null
	,state: null
	,disposeAtlasCounter: null
	,textureIter: null
	,m_noSmothAtlasNames: null
	,totalAtlasForReload: null
	,curReloadedAtlasNum: null
	,getLoadProgress: function() {
		return this.curReloadedAtlasNum / this.totalAtlasForReload;
	}
	,createAtlasManagerBlock: function(_noSmothAtlasNames,_compositionRes) {
		if(GameVisualManager.textureList == null) {
			GameVisualManager.textureList = new haxe_ds_StringMap();
		}
		this.m_noSmothAtlasNames = _noSmothAtlasNames;
		this.loadAditionalDescriptions(_compositionRes);
		this.atlasNameList = new haxe_ds_StringMap();
		this.state = 0;
	}
	,disposeAtlasManagerBlock: function() {
		this.textureIter = null;
		this.atlasNameList = null;
		this.m_noSmothAtlasNames = null;
	}
	,processAtlasManagerBlock: function(_timeStep) {
		switch(this.state) {
		case 0:
			break;
		case 1:
			this.curLoadingAtlas = null;
			this.state = 2;
			break;
		case 2:
			if(this.curLoadingAtlas != null) {
				if(this.curLoadingAtlas.processLoading()) {
					this.curLoadingAtlas = null;
					++this.curReloadedAtlasNum;
				}
			} else if(this.textureIter.hasNext() == false) {
				this.state = 0;
				GlobalBase.callGC();
				this.showActiveAtlas();
			} else {
				var name = this.textureIter.next();
				var texture = this.getIntIdByName(name);
				var _this = this.atlasNameList;
				if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == true && this.m_atlas.h[texture] == null) {
					this.curLoadingAtlas = GlobalBase.createAtlas(texture,name,this.geIntSmooth(name));
					this.addAtlas(this.curLoadingAtlas);
				}
			}
			break;
		}
	}
	,curLoadingAtlas: null
	,startLoadAtlas: function(_atlasNameList) {
		var atl;
		var t;
		this.disposeAtlasCounter = 0;
		var n = _atlasNameList.keys();
		while(n.hasNext()) {
			var n1 = n.next();
			if((__map_reserved[n1] != null ? _atlasNameList.getReserved(n1) : _atlasNameList.h[n1]) == false) {
				t = this.getIntIdByName(n1);
				if(this.m_atlas.h[t] != null) {
					atl = this.removeAtlas(t);
					if(atl != null) {
						this.disposeAtlasCounter += 5;
						atl.dispose();
						atl = null;
					}
				}
			}
		}
		this.totalAtlasForReload = 0;
		this.curReloadedAtlasNum = 0;
		var n2 = _atlasNameList.keys();
		while(n2.hasNext()) {
			var n3 = n2.next();
			t = this.getIntIdByName(n3);
			if((__map_reserved[n3] != null ? _atlasNameList.getReserved(n3) : _atlasNameList.h[n3]) == true && this.m_atlas.h[t] == null) {
				this.totalAtlasForReload++;
			}
		}
		if(this.totalAtlasForReload > 0) {
			if(this.disposeAtlasCounter > 0) {
				GlobalBase.callGC();
			}
			this.state = 1;
			this.textureIter = GameVisualManager.textureList.keys();
			return true;
		}
		return false;
	}
	,getIntIdByName: function(_name) {
		if(GameVisualManager.textureList == null) {
			GameVisualManager.textureList = new haxe_ds_StringMap();
		}
		var _this = GameVisualManager.textureList;
		if(__map_reserved[_name] != null ? _this.existsReserved(_name) : _this.h.hasOwnProperty(_name)) {
			var _this1 = GameVisualManager.textureList;
			if(__map_reserved[_name] != null) {
				return _this1.getReserved(_name);
			} else {
				return _this1.h[_name];
			}
		}
		GameVisualManager.textureCounter++;
		var value = GameVisualManager.textureCounter;
		var _this2 = GameVisualManager.textureList;
		if(__map_reserved[_name] != null) {
			_this2.setReserved(_name,value);
		} else {
			_this2.h[_name] = value;
		}
		return GameVisualManager.textureCounter;
	}
	,geIntSmooth: function(_name) {
		var _g = 0;
		var _g1 = this.m_noSmothAtlasNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(name == _name) {
				return false;
			}
		}
		return true;
	}
	,isActive: function() {
		return this.state == 0;
	}
	,reloadAtlases: function(_additionalNames) {
		var an = GameVisualManager.textureList.keys();
		while(an.hasNext()) {
			var an1 = an.next();
			var _this = this.atlasNameList;
			if(__map_reserved[an1] != null) {
				_this.setReserved(an1,false);
			} else {
				_this.h[an1] = false;
			}
		}
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.atlasNames != null) {
				this.updateAtlasNameList(l.atlasNames);
			}
		}
		this.updateAtlasNameList(this.m_systemLayer.atlasNames);
		if(_additionalNames != null) {
			this.updateAtlasNameList(_additionalNames);
		}
		this.startLoadAtlas(this.atlasNameList);
	}
	,updateAtlasNameList: function(_atlasNames) {
		var _g = 0;
		while(_g < _atlasNames.length) {
			var n = _atlasNames[_g];
			++_g;
			this.getIntIdByName(n);
			if(GameVisualManager.DISABLE_ALL_RES) {
				if(n == "unkimage") {
					var _this = this.atlasNameList;
					if(__map_reserved[n] != null) {
						_this.setReserved(n,true);
					} else {
						_this.h[n] = true;
					}
				}
			} else if(GameVisualManager.ATLAS_BLACK_LIST_ON) {
				var lock = false;
				var _g1 = 0;
				var _g11 = GameVisualManager.ATLAS_BLACK_LIST;
				while(_g1 < _g11.length) {
					var e = _g11[_g1];
					++_g1;
					if(e == n) {
						lock = true;
					}
				}
				if(lock == false) {
					var _this1 = this.atlasNameList;
					if(__map_reserved[n] != null) {
						_this1.setReserved(n,true);
					} else {
						_this1.h[n] = true;
					}
				}
			} else {
				var _this2 = this.atlasNameList;
				if(__map_reserved[n] != null) {
					_this2.setReserved(n,true);
				} else {
					_this2.h[n] = true;
				}
			}
		}
	}
	,loadAditionalDescriptions: function(_resJson) {
		if(_resJson == "") {
			return;
		}
		var addRes = GlobalBase.loadJson(_resJson);
		var list = addRes.CompositionRes;
		var id;
		var _g = 0;
		while(_g < list.length) {
			var item = list[_g];
			++_g;
			id = item.id;
			var this1 = this.additionalDescriptions;
			var value = new iriysoft_graphic_res_IsfAnimationCompositionDescriptor(this,item.compositionID);
			var _this = this1;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,value);
			} else {
				_this.h[id] = value;
			}
		}
	}
	,systemLayer: null
	,m_systemLayer: null
	,get_systemLayer: function() {
		return this.m_systemLayer;
	}
	,layers: null
	,createRenderLayersBlock: function(_atlasNames) {
		this.m_systemLayer = new RenderLayerNME(_atlasNames,-1,0,this.root.stage.stageWidth,this.root.stage.stageHeight);
		this.root.addChild(this.m_systemLayer.image);
		this.layers = [];
		this.reloadAtlases();
	}
	,disposeRenderLayersBlock: function() {
		while(this.layers.length > 0) this.layers[0].dispose();
		if(this.m_systemLayer != null) {
			this.m_systemLayer.dispose();
			this.m_systemLayer = null;
		}
	}
	,processRenderLayersBlock: function(_timeStep) {
		this.m_systemLayer.process(_timeStep);
		this.m_systemLayer.processRender(this);
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.processRender(this);
		}
	}
	,createRenderLayer: function(_atlasNames,_backAlpha,_backColor) {
		if(_backColor == null) {
			_backColor = 0;
		}
		if(_backAlpha == null) {
			_backAlpha = -1.0;
		}
		var rl = new RenderLayerNME(_atlasNames,_backAlpha,_backColor,this.root.stage.stageWidth,this.root.stage.stageHeight);
		return rl;
	}
	,addRenderLayer: function(_renderLayer) {
		this.insertRenderLayerAt(_renderLayer,this.layers.length);
	}
	,removeRenderLayer: function(_renderLayer) {
		var rl = js_Boot.__cast(_renderLayer , RenderLayerNME);
		this.root.removeChild(rl.image);
		rl.signalDisposed.removeSlot($bind(this,this.onDisposeRenderLayer));
		HxOverrides.remove(this.layers,rl);
	}
	,onDisposeRenderLayer: function(_obj) {
		this.removeRenderLayer(js_Boot.__cast(_obj , IRenderLayer));
	}
	,getRenderLayerPosiotion: function(_renderLayer) {
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.layers[i] == _renderLayer) {
				return i;
			}
		}
		return -1;
	}
	,insertRenderLayerAt: function(_renderLayer,_position) {
		var rl = js_Boot.__cast(_renderLayer , RenderLayerNME);
		this.root.addChildAt(rl.image,this.root.getChildIndex(this.m_systemLayer.image));
		rl.signalDisposed.addSlot($bind(this,this.onDisposeRenderLayer));
		this.layers.splice(_position,0,rl);
	}
	,showActiveAtlas: function() {
		var t;
		var name = GameVisualManager.textureList.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = GameVisualManager.textureList;
			t = __map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1];
			if(this.m_atlas.h[t] != null) {
				haxe_Log.trace("--- " + name1,{ fileName : "../framework/nme/src_nme/GameVisualManager.hx", lineNumber : 802, className : "GameVisualManager", methodName : "showActiveAtlas"});
			}
		}
	}
	,getAtlasData: function(_atlasName) {
		var this1 = this.m_atlas;
		var key = this.getIntIdByName(_atlasName);
		return js_Boot.__cast(this1.h[key] , GameAtlas);
	}
	,__class__: GameVisualManager
	,__properties__: $extend(iriysoft_graphic_IsfViewMangerNME.prototype.__properties__,{get_systemLayer:"get_systemLayer"})
});
var GlobalBase = function() {
};
$hxClasses["GlobalBase"] = GlobalBase;
GlobalBase.__name__ = "GlobalBase";
GlobalBase.__properties__ = {set_instance:"set_instance",get_instance:"get_instance"};
GlobalBase.get_instance = function() {
	if(GlobalBase.m_instance == null) {
		return GlobalBase.m_instance = new GlobalBase();
	} else {
		return GlobalBase.m_instance;
	}
};
GlobalBase.set_instance = function(_instance) {
	return GlobalBase.m_instance = _instance;
};
GlobalBase.createGameApp = function(_root) {
	return GlobalBase.get_instance()._createGameApp(_root);
};
GlobalBase.getImageResPathPrefix = function() {
	return GlobalBase.get_instance()._getImageResPathPrefix();
};
GlobalBase.GetRenderRect = function() {
	return GlobalBase.get_instance().GetRenderRect_();
};
GlobalBase.destroyAllBitmap = function(_cont) {
	var chld;
	while(_cont.get_numChildren() > 0) {
		chld = _cont.getChildAt(0);
		if(((chld) instanceof openfl_display_DisplayObjectContainer)) {
			GlobalBase.destroyAllBitmap(js_Boot.__cast(chld , openfl_display_DisplayObjectContainer));
		} else if(((chld) instanceof openfl_display_Bitmap)) {
			GlobalBase.destroyBitmap(js_Boot.__cast(chld , openfl_display_Bitmap));
		}
		if(chld.parent != null) {
			chld.parent.removeChild(chld);
		}
	}
};
GlobalBase.destroyBitmap = function(_bitmap) {
	if(_bitmap.get_bitmapData() != null) {
		GlobalBase.dumpBits(_bitmap.get_bitmapData());
		_bitmap.get_bitmapData().dispose();
		_bitmap.set_bitmapData(null);
	}
	if(_bitmap.parent != null) {
		_bitmap.parent.removeChild(_bitmap);
	}
};
GlobalBase.getMemUsage = function() {
	var mem = -1;
	return mem;
};
GlobalBase.dumpBits = function(_bd) {
};
GlobalBase.callGC = function() {
};
GlobalBase.loadJson = function(_path) {
	return JSON.parse(openfl_utils_Assets.getText(_path));
};
GlobalBase.loadBinData = function(_path) {
	var streamInput = null;
	var truePath = openfl_utils_Assets.getPath(_path);
	var bytes = openfl_utils_Assets.getBytes(_path);
	var b = new haxe_io_Bytes(new ArrayBuffer(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes)));
	var _g = 0;
	var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
	while(_g < _g1) {
		var i = _g++;
		var v = bytes.readByte();
		b.b[i] = v & 255;
	}
	streamInput = new iriysoft_stream_IsfStreamMemoryInput(b);
	var dyn = { };
	var len = streamInput.readInt();
	var names = [];
	var _g2 = 0;
	var _g3 = len;
	while(_g2 < _g3) {
		var i1 = _g2++;
		names.push(streamInput.readString());
	}
	Reflect.setProperty(dyn,"names",names);
	len = streamInput.readInt();
	var res = [];
	var _g4 = 0;
	var _g5 = len;
	while(_g4 < _g5) {
		var i2 = _g4++;
		res.push(streamInput.readInt());
	}
	Reflect.setProperty(dyn,"res",res);
	len = streamInput.readInt();
	var frames = [];
	var _g6 = 0;
	var _g7 = len;
	while(_g6 < _g7) {
		var i3 = _g6++;
		frames.push(streamInput.readDouble());
	}
	Reflect.setProperty(dyn,"frames",frames);
	len = streamInput.readInt();
	var images = [];
	var _g8 = 0;
	var _g9 = len;
	while(_g8 < _g9) {
		var i4 = _g8++;
		images.push(streamInput.readInt());
	}
	Reflect.setProperty(dyn,"images",images);
	return dyn;
};
GlobalBase.createAtlas = function(_textureID,_id,_smooth) {
	if(_smooth == null) {
		_smooth = true;
	}
	return GlobalBase.get_instance()._createAtlas(_textureID,_id,_smooth);
};
GlobalBase.print = function(_arg) {
	haxe_Log.trace(_arg,{ fileName : "../framework/nme/src_nme/GlobalBase.hx", lineNumber : 208, className : "GlobalBase", methodName : "print"});
};
GlobalBase.initScreenParam = function(_deviceWidth,_deviceHeight) {
	GlobalBase.get_instance()._initScreenParam(_deviceWidth,_deviceHeight);
};
GlobalBase.prototype = {
	_createGameApp: function(_root) {
		throw new js__$Boot_HaxeError("ERROR! You must override '_createGameApp' function in your Global class.");
	}
	,_getImageResPathPrefix: function() {
		return "img_flash/";
	}
	,GetRenderRect_: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("GetRenderRect_ must be implemented in user Global class"));
	}
	,_createAtlas: function(_textureID,_id,_smooth) {
		if(_smooth == null) {
			_smooth = true;
		}
		var at = new GameAtlas();
		var pathPrefix = GlobalBase.getImageResPathPrefix();
		at.createData(_textureID,pathPrefix + _id,pathPrefix + _id + ".json",pathPrefix + _id + "_data.bin",_smooth,1);
		return at;
	}
	,_initScreenParam: function(_deviceWidth,_deviceHeight) {
		var scale = 1;
		var screenScale = 1;
		var width = 1024;
		var height = 768;
		var deviceWidth = _deviceWidth;
		var deviceHeight = _deviceHeight;
		if(_deviceWidth == 2048 && _deviceHeight == 1536) {
			scale = 2;
			screenScale = 2;
			width = 1024;
			height = 768;
		}
	}
	,__class__: GlobalBase
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = "openfl.ui.Multitouch";
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var Global = function() {
	this.dimensions_ = new openfl_geom_Rectangle(0,0,Global.kMaxScrWidth,Global.kMaxScrHeight);
	GlobalBase.call(this);
	GlobalBase.m_instance = this;
};
$hxClasses["Global"] = Global;
Global.__name__ = "Global";
Global.__super__ = GlobalBase;
Global.prototype = $extend(GlobalBase.prototype,{
	_createGameApp: function(root) {
		return new GameApp(root);
	}
	,_getImageResPathPrefix: function() {
		return "img/";
	}
	,GetRenderRect_: function() {
		return this.dimensions_;
	}
	,dimensions_: null
	,__class__: Global
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var iriysoft_graphic_IIsfTouchable = function() { };
$hxClasses["iriysoft.graphic.IIsfTouchable"] = iriysoft_graphic_IIsfTouchable;
iriysoft_graphic_IIsfTouchable.__name__ = "iriysoft.graphic.IIsfTouchable";
iriysoft_graphic_IIsfTouchable.__isInterface__ = true;
iriysoft_graphic_IIsfTouchable.prototype = {
	signalRollOut: null
	,signalRollIn: null
	,touchable: null
	,touchGroup: null
	,signalTouch: null
	,signalTouchUp: null
	,signalTouchDown: null
	,checkHit: null
	,touch_object: null
	,__class__: iriysoft_graphic_IIsfTouchable
};
var iriysoft_core_IIsfPosition = function() { };
$hxClasses["iriysoft.core.IIsfPosition"] = iriysoft_core_IIsfPosition;
iriysoft_core_IIsfPosition.__name__ = "iriysoft.core.IIsfPosition";
iriysoft_core_IIsfPosition.__isInterface__ = true;
iriysoft_core_IIsfPosition.prototype = {
	get_x: null
	,set_x: null
	,get_y: null
	,set_y: null
	,__class__: iriysoft_core_IIsfPosition
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var iriysoft_graphic_IIsfViewObject = function() { };
$hxClasses["iriysoft.graphic.IIsfViewObject"] = iriysoft_graphic_IIsfViewObject;
iriysoft_graphic_IIsfViewObject.__name__ = "iriysoft.graphic.IIsfViewObject";
iriysoft_graphic_IIsfViewObject.__isInterface__ = true;
iriysoft_graphic_IIsfViewObject.__interfaces__ = [iriysoft_graphic_IIsfTouchable,iriysoft_core_IIsfPosition,iriysoft_core_IIsfBaseObject];
iriysoft_graphic_IIsfViewObject.prototype = {
	get_name: null
	,set_name: null
	,get_hitRect: null
	,set_hitRect: null
	,get_rotation: null
	,set_rotation: null
	,get_parent: null
	,set_parent: null
	,get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,get_scaleX: null
	,set_scaleX: null
	,get_scaleY: null
	,set_scaleY: null
	,get_skewX: null
	,set_skewX: null
	,get_skewY: null
	,set_skewY: null
	,get_visible: null
	,set_visible: null
	,get_alpha: null
	,set_alpha: null
	,get_transformMatrix: null
	,set_transformMatrix: null
	,get_filters: null
	,set_filters: null
	,mask: null
	,hitTest: null
	,getBounds: null
	,globalToLocal: null
	,localToGlobal: null
	,userData: null
	,before_render: null
	,render: null
	,after_render: null
	,__class__: iriysoft_graphic_IIsfViewObject
	,__properties__: {set_filters:"set_filters",get_filters:"get_filters",set_transformMatrix:"set_transformMatrix",get_transformMatrix:"get_transformMatrix",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_parent:"set_parent",get_parent:"get_parent",set_rotation:"set_rotation",get_rotation:"get_rotation",set_hitRect:"set_hitRect",get_hitRect:"get_hitRect",set_name:"set_name",get_name:"get_name"}
};
var iriysoft_graphic_IIsfViewObjectContainer = function() { };
$hxClasses["iriysoft.graphic.IIsfViewObjectContainer"] = iriysoft_graphic_IIsfViewObjectContainer;
iriysoft_graphic_IIsfViewObjectContainer.__name__ = "iriysoft.graphic.IIsfViewObjectContainer";
iriysoft_graphic_IIsfViewObjectContainer.__isInterface__ = true;
iriysoft_graphic_IIsfViewObjectContainer.__interfaces__ = [iriysoft_graphic_IIsfViewObject];
iriysoft_graphic_IIsfViewObjectContainer.prototype = {
	get_numChildren: null
	,numChildren: null
	,addChild: null
	,addChildAt: null
	,removeChild: null
	,removeChildAt: null
	,removeChildren: null
	,removeAllChildren: null
	,getChildAt: null
	,getChildIndex: null
	,getChildByName: null
	,setChildIndex: null
	,sortChildren: null
	,swapChildren: null
	,swapChildrenAt: null
	,SetTextRoot: null
	,ResetTextRoot: null
	,IsTextRoot: null
	,SetTilemapTextRoot: null
	,ResetTilemapTextRoot: null
	,IsTilemapTextRoot: null
	,CancelEvent: null
	,IsCancelEvent: null
	,__class__: iriysoft_graphic_IIsfViewObjectContainer
	,__properties__: {get_numChildren:"get_numChildren"}
};
var IRenderLayer = function() { };
$hxClasses["IRenderLayer"] = IRenderLayer;
IRenderLayer.__name__ = "IRenderLayer";
IRenderLayer.__isInterface__ = true;
IRenderLayer.__interfaces__ = [iriysoft_graphic_IIsfViewObjectContainer];
IRenderLayer.prototype = {
	get_backAlpha: null
	,set_backAlpha: null
	,signalMove: null
	,atlasNames: null
	,enableBack: null
	,__class__: IRenderLayer
	,__properties__: {set_backAlpha:"set_backAlpha",get_backAlpha:"get_backAlpha"}
};
var IsfFPS = function(def) {
	this.addInfo = "";
	iriysoft_core_IsfBaseObject.call(this);
	this._def = def == null ? new IsfFPSDef() : def;
	this.currentFPS = 0;
	this._times = [];
	this.addInfo = this._def.additionalInfo;
};
$hxClasses["IsfFPS"] = IsfFPS;
IsfFPS.__name__ = "IsfFPS";
IsfFPS.__super__ = iriysoft_core_IsfBaseObject;
IsfFPS.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	_text: null
	,_def: null
	,_times: null
	,addInfo: null
	,currentFPS: null
	,createTextField: function(visualManager) {
		this._text = visualManager.createTextField();
		this.formatTextField();
		return this._text;
	}
	,formatTextField: function() {
		if(this._text == null) {
			return;
		}
		this._text.set_textFormat(this._def.textFormat);
		this._text.set_width(this._def.width);
		this._text.set_height(this._def.height);
		if(this._def.glowFilter != null) {
			this._text.set_filters([this._def.glowFilter]);
		}
	}
	,customDispose: function() {
		if(this._text != null && this._text.get_parent() != null) {
			this._text.get_parent().removeChild(this._text);
		}
		this._text = null;
		this._def = null;
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeStep);
		var now = new Date().getTime() / 1000;
		this._times.push(now);
		while(this._times[0] < now - 1) this._times.shift();
		this._text.set_text("FPS: " + this._times.length + (this.addInfo == "" ? "" : " | " + this.addInfo));
	}
	,__class__: IsfFPS
});
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf);
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy22:ui%2Fscreens_data.jsony4:sizei15390y4:typey4:TEXTy2:idR1y7:preloadtgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0001.pngR2i790R3y5:IMAGER5R7R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0002.pngR2i807R3R8R5R9R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0003.pngR2i803R3R8R5R10R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0004.pngR2i810R3R8R5R11R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0005.pngR2i865R3R8R5R12R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0006.pngR2i858R3R8R5R13R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0007.pngR2i855R3R8R5R14R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0008.pngR2i816R3R8R5R15R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0009.pngR2i813R3R8R5R16R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0010.pngR2i821R3R8R5R17R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0011.pngR2i818R3R8R5R18R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0012.pngR2i818R3R8R5R19R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0013.pngR2i835R3R8R5R20R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0014.pngR2i839R3R8R5R21R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0015.pngR2i855R3R8R5R22R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0016.pngR2i835R3R8R5R23R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0017.pngR2i799R3R8R5R24R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0018.pngR2i830R3R8R5R25R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0019.pngR2i809R3R8R5R26R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0020.pngR2i794R3R8R5R27R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0021.pngR2i785R3R8R5R28R6tgoR0y36:bitmaps%2FEnemies_Enemy1_Hit0022.pngR2i778R3R8R5R29R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0001.pngR2i780R3R8R5R30R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0002.pngR2i780R3R8R5R31R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0003.pngR2i780R3R8R5R32R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0004.pngR2i780R3R8R5R33R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0005.pngR2i780R3R8R5R34R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0006.pngR2i780R3R8R5R35R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0007.pngR2i780R3R8R5R36R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0008.pngR2i780R3R8R5R37R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0009.pngR2i780R3R8R5R38R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0010.pngR2i780R3R8R5R39R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0011.pngR2i780R3R8R5R40R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0012.pngR2i780R3R8R5R41R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0013.pngR2i780R3R8R5R42R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0014.pngR2i780R3R8R5R43R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0015.pngR2i780R3R8R5R44R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0016.pngR2i780R3R8R5R45R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0017.pngR2i780R3R8R5R46R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0018.pngR2i780R3R8R5R47R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0019.pngR2i780R3R8R5R48R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0020.pngR2i780R3R8R5R49R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0021.pngR2i780R3R8R5R50R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0022.pngR2i780R3R8R5R51R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0023.pngR2i780R3R8R5R52R6tgoR0y36:bitmaps%2FEnemies_Enemy2_Hit0024.pngR2i780R3R8R5R53R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0001.pngR2i824R3R8R5R54R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0002.pngR2i804R3R8R5R55R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0003.pngR2i819R3R8R5R56R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0004.pngR2i811R3R8R5R57R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0005.pngR2i803R3R8R5R58R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0006.pngR2i835R3R8R5R59R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0007.pngR2i872R3R8R5R60R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0008.pngR2i843R3R8R5R61R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0009.pngR2i811R3R8R5R62R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0010.pngR2i805R3R8R5R63R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0011.pngR2i797R3R8R5R64R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0012.pngR2i794R3R8R5R65R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0013.pngR2i781R3R8R5R66R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0014.pngR2i804R3R8R5R67R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0015.pngR2i826R3R8R5R68R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0016.pngR2i845R3R8R5R69R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0017.pngR2i853R3R8R5R70R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0018.pngR2i856R3R8R5R71R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0019.pngR2i839R3R8R5R72R6tgoR0y36:bitmaps%2FEnemies_Enemy3_Hit0020.pngR2i844R3R8R5R73R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0001.pngR2i823R3R8R5R74R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0002.pngR2i823R3R8R5R75R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0003.pngR2i843R3R8R5R76R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0004.pngR2i825R3R8R5R77R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0005.pngR2i858R3R8R5R78R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0006.pngR2i892R3R8R5R79R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0007.pngR2i871R3R8R5R80R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0008.pngR2i822R3R8R5R81R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0009.pngR2i784R3R8R5R82R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0010.pngR2i741R3R8R5R83R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0011.pngR2i744R3R8R5R84R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0012.pngR2i757R3R8R5R85R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0013.pngR2i785R3R8R5R86R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0014.pngR2i819R3R8R5R87R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0015.pngR2i801R3R8R5R88R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0016.pngR2i829R3R8R5R89R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0017.pngR2i869R3R8R5R90R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0018.pngR2i843R3R8R5R91R6tgoR0y36:bitmaps%2FEnemies_Enemy4_Hit0019.pngR2i837R3R8R5R92R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0001.pngR2i775R3R8R5R93R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0002.pngR2i804R3R8R5R94R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0003.pngR2i797R3R8R5R95R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0004.pngR2i781R3R8R5R96R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0005.pngR2i802R3R8R5R97R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0006.pngR2i837R3R8R5R98R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0007.pngR2i870R3R8R5R99R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0008.pngR2i897R3R8R5R100R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0009.pngR2i926R3R8R5R101R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0010.pngR2i922R3R8R5R102R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0011.pngR2i944R3R8R5R103R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0012.pngR2i914R3R8R5R104R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0013.pngR2i908R3R8R5R105R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0014.pngR2i890R3R8R5R106R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0015.pngR2i885R3R8R5R107R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0016.pngR2i869R3R8R5R108R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0017.pngR2i879R3R8R5R109R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0018.pngR2i879R3R8R5R110R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0019.pngR2i879R3R8R5R111R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0020.pngR2i851R3R8R5R112R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0021.pngR2i879R3R8R5R113R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0022.pngR2i837R3R8R5R114R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0023.pngR2i844R3R8R5R115R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0024.pngR2i835R3R8R5R116R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0025.pngR2i864R3R8R5R117R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0026.pngR2i840R3R8R5R118R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0027.pngR2i802R3R8R5R119R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0028.pngR2i798R3R8R5R120R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0029.pngR2i820R3R8R5R121R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0030.pngR2i810R3R8R5R122R6tgoR0y36:bitmaps%2FEnemies_Enemy5_Hit0031.pngR2i790R3R8R5R123R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0001.pngR2i798R3R8R5R124R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0002.pngR2i772R3R8R5R125R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0003.pngR2i792R3R8R5R126R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0004.pngR2i814R3R8R5R127R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0005.pngR2i804R3R8R5R128R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0006.pngR2i790R3R8R5R129R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0007.pngR2i783R3R8R5R130R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0008.pngR2i792R3R8R5R131R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0009.pngR2i796R3R8R5R132R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0010.pngR2i778R3R8R5R133R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0011.pngR2i759R3R8R5R134R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0012.pngR2i786R3R8R5R135R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0013.pngR2i785R3R8R5R136R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0014.pngR2i790R3R8R5R137R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0015.pngR2i766R3R8R5R138R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0016.pngR2i773R3R8R5R139R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0017.pngR2i807R3R8R5R140R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0018.pngR2i853R3R8R5R141R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0019.pngR2i876R3R8R5R142R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0020.pngR2i857R3R8R5R143R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0021.pngR2i837R3R8R5R144R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0022.pngR2i810R3R8R5R145R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0023.pngR2i783R3R8R5R146R6tgoR0y36:bitmaps%2FEnemies_Enemy6_Hit0024.pngR2i760R3R8R5R147R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0001.pngR2i886R3R8R5R148R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0002.pngR2i897R3R8R5R149R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0003.pngR2i912R3R8R5R150R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0004.pngR2i919R3R8R5R151R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0005.pngR2i920R3R8R5R152R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0006.pngR2i930R3R8R5R153R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0007.pngR2i923R3R8R5R154R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0008.pngR2i929R3R8R5R155R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0009.pngR2i913R3R8R5R156R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0010.pngR2i956R3R8R5R157R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0011.pngR2i961R3R8R5R158R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0012.pngR2i960R3R8R5R159R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0013.pngR2i971R3R8R5R160R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0014.pngR2i956R3R8R5R161R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0015.pngR2i945R3R8R5R162R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0016.pngR2i931R3R8R5R163R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0017.pngR2i899R3R8R5R164R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0018.pngR2i898R3R8R5R165R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0019.pngR2i892R3R8R5R166R6tgoR0y36:bitmaps%2FEnemies_Enemy7_Hit0020.pngR2i886R3R8R5R167R6tgoR2i25268R3y4:FONTy9:classNamey28:__ASSET__fonts_ampersand_ttfR5y21:fonts%2Fampersand.ttfR6tgoR2i106516R3R168R169y33:__ASSET__fonts_bebasneue_book_otfR5y28:fonts%2FBebasNeue%20Book.otfR6tgoR2i96852R3R168R169y26:__ASSET__fonts_brlnsdb_ttfR5y19:fonts%2FBRLNSDB.ttfR6tgoR0y22:img%2Fbackgrounds.jsonR2i2271R3R4R5R176R6tgoR0y26:img%2Fbackgrounds_data.binR2i3580R3y6:BINARYR5R177R6tgoR0y14:img%2Fbg0.jsonR2i1563R3R4R5R179R6tgoR0y18:img%2Fbg0_data.binR2i1612R3R178R5R180R6tgoR0y14:img%2Fbg1.jsonR2i1794R3R4R5R181R6tgoR0y18:img%2Fbg1_data.binR2i1892R3R178R5R182R6tgoR0y14:img%2Fbg2.jsonR2i1794R3R4R5R183R6tgoR0y18:img%2Fbg2_data.binR2i1892R3R178R5R184R6tgoR0y17:img%2Fenemes.jsonR2i34292R3R4R5R185R6tgoR0y18:img%2Fenemes2.jsonR2i30646R3R4R5R186R6tgoR0y22:img%2Fenemes2_data.binR2i22270R3R178R5R187R6tgoR0y21:img%2Fenemes_data.binR2i5320R3R178R5R188R6tgoR0y20:img%2Fpermanent.jsonR2i8010R3R4R5R189R6tgoR0y24:img%2Fpermanent_data.binR2i5866R3R178R5R190R6tgoR0y18:img%2Fscreens.jsonR2i19781R3R4R5R191R6tgoR0y22:img%2Fscreens_data.binR2i11716R3R178R5R192R6tgoR0y17:img%2Fsystem.jsonR2i161R3R4R5R193R6tgoR0y21:img%2Fsystem_data.binR2i78R3R178R5R194R6tgoR0y25:img%2FWeaponAK74Anim.jsonR2i1562R3R4R5R195R6tgoR0y29:img%2FWeaponAK74Anim_data.binR2i1810R3R178R5R196R6tgoR0y27:img%2FWeaponIngramAnim.jsonR2i1566R3R4R5R197R6tgoR0y31:img%2FWeaponIngramAnim_data.binR2i1822R3R178R5R198R6tgoR0y23:img%2FWeaponM4Anim.jsonR2i1566R3R4R5R199R6tgoR0y27:img%2FWeaponM4Anim_data.binR2i1798R3R178R5R200R6tgoR0y24:img%2FWeaponM79Anim.jsonR2i1562R3R4R5R201R6tgoR0y28:img%2FWeaponM79Anim_data.binR2i1804R3R178R5R202R6tgoR0y23:img%2FWeaponM9Anim.jsonR2i1561R3R4R5R203R6tgoR0y27:img%2FWeaponM9Anim_data.binR2i1798R3R178R5R204R6tgoR0y24:img%2FWeaponMP5Anim.jsonR2i1559R3R4R5R205R6tgoR0y28:img%2FWeaponMP5Anim_data.binR2i1804R3R178R5R206R6tgoR0y24:img%2FWeaponPKMAnim.jsonR2i1568R3R4R5R207R6tgoR0y28:img%2FWeaponPKMAnim_data.binR2i1804R3R178R5R208R6tgoR0y30:img%2FWeaponRemingtonAnim.jsonR2i4058R3R4R5R209R6tgoR0y34:img%2FWeaponRemingtonAnim_data.binR2i3724R3R178R5R210R6tgoR0y26:img%2FWeaponSCARHAnim.jsonR2i1562R3R4R5R211R6tgoR0y30:img%2FWeaponSCARHAnim_data.binR2i1816R3R178R5R212R6tgoR0y32:img%2FWeaponSpringfieldAnim.jsonR2i4060R3R4R5R213R6tgoR0y36:img%2FWeaponSpringfieldAnim_data.binR2i3744R3R178R5R214R6tgoR0y21:img%2Fbackgrounds.pngR2i4407694R3R8R5R215R6tgoR0y13:img%2Fbg0.pngR2i3578574R3R8R5R216R6tgoR0y13:img%2Fbg1.pngR2i1672949R3R8R5R217R6tgoR0y13:img%2Fbg2.pngR2i2724049R3R8R5R218R6tgoR0y16:img%2Fenemes.pngR2i3211021R3R8R5R219R6tgoR0y17:img%2Fenemes2.pngR2i3556923R3R8R5R220R6tgoR0y19:img%2Fpermanent.pngR2i2750157R3R8R5R221R6tgoR0y17:img%2Fscreens.pngR2i2084586R3R8R5R222R6tgoR0y16:img%2Fsystem.pngR2i467R3R8R5R223R6tgoR0y24:img%2FWeaponAK74Anim.pngR2i441873R3R8R5R224R6tgoR0y26:img%2FWeaponIngramAnim.pngR2i425225R3R8R5R225R6tgoR0y22:img%2FWeaponM4Anim.pngR2i565093R3R8R5R226R6tgoR0y23:img%2FWeaponM79Anim.pngR2i446417R3R8R5R227R6tgoR0y22:img%2FWeaponM9Anim.pngR2i503983R3R8R5R228R6tgoR0y23:img%2FWeaponMP5Anim.pngR2i459697R3R8R5R229R6tgoR0y23:img%2FWeaponPKMAnim.pngR2i530367R3R8R5R230R6tgoR0y29:img%2FWeaponRemingtonAnim.pngR2i3164297R3R8R5R231R6tgoR0y25:img%2FWeaponSCARHAnim.pngR2i504893R3R8R5R232R6tgoR0y31:img%2FWeaponSpringfieldAnim.pngR2i3347858R3R8R5R233R6tgoR2i20072R3y5:MUSICR5y14:sounds%2F8.mp3y9:pathGroupaR235hR6tgoR2i9195R3R234R5y20:sounds%2FAk74Snd.mp3R236aR237hR6tgoR2i4179R3R234R5y21:sounds%2FBell1Snd.mp3R236aR238hR6tgoR2i16300R3R234R5y21:sounds%2FBell2Snd.mp3R236aR239hR6tgoR2i3343R3R234R5y27:sounds%2FBulletBody1Snd.mp3R236aR240hR6tgoR2i4179R3R234R5y27:sounds%2FBulletBody2Snd.mp3R236aR241hR6tgoR2i1671R3R234R5y27:sounds%2FBulletBody3Snd.mp3R236aR242hR6tgoR2i6478R3R234R5y27:sounds%2FBulletSand1Snd.mp3R236aR243hR6tgoR2i7105R3R234R5y27:sounds%2FBulletSand2Snd.mp3R236aR244hR6tgoR2i5433R3R234R5y27:sounds%2FBulletSand3Snd.mp3R236aR245hR6tgoR2i20270R3R234R5y26:sounds%2FExplosion2Snd.mp3R236aR246hR6tgoR2i23614R3R234R5y25:sounds%2FExplosionSnd.mp3R236aR247hR6tgoR2i10030R3R234R5y25:sounds%2FFriendly1Snd.mp3R236aR248hR6tgoR2i3760R3R234R5y25:sounds%2FFriendly2Snd.mp3R236aR249hR6tgoR2i5432R3R234R5y25:sounds%2FFriendly3Snd.mp3R236aR250hR6tgoR2i6060R3R234R5y18:sounds%2FM4Snd.mp3R236aR251hR6tgoR2i8358R3R234R5y28:sounds%2FM79ExplosionSnd.mp3R236aR252hR6tgoR2i10239R3R234R5y19:sounds%2FM79Snd.mp3R236aR253hR6tgoR2i8150R3R234R5y18:sounds%2FM9Snd.mp3R236aR254hR6tgoR2i3969R3R234R5y19:sounds%2FMP5Snd.mp3R236aR255hR6tgoR2i797967R3R234R5y21:sounds%2FMusicSnd.mp3R236aR256hR6tgoR2i8359R3R234R5y19:sounds%2FPKMSnd.mp3R236aR257hR6tgoR2i626R3R234R5y27:sounds%2FPullTriggerSnd.mp3R236aR258hR6tgoR2i835R3R234R5y30:sounds%2FReleaseTriggerSnd.mp3R236aR259hR6tgoR2i11284R3R234R5y23:sounds%2FReload1Snd.mp3R236aR260hR6tgoR2i11911R3R234R5y23:sounds%2FReload2Snd.mp3R236aR261hR6tgoR2i7105R3R234R5y23:sounds%2FReload3Snd.mp3R236aR262hR6tgoR2i12537R3R234R5y25:sounds%2FRemingtonSnd.mp3R236aR263hR6tgoR2i6060R3R234R5y21:sounds%2FScarHSnd.mp3R236aR264hR6tgoR2i12537R3R234R5y27:sounds%2FSpringfieldSnd.mp3R236aR265hR6tgoR2i2716R3R234R5y30:sounds%2FSwitchFiremodeSnd.mp3R236aR266hR6tgoR2i1088R3R234R5y16:sounds%2Ftap.mp3R236aR267hR6tgoR2i12119R3R234R5y28:sounds%2FZombieDeath1Snd.mp3R236aR268hR6tgoR2i11701R3R234R5y28:sounds%2FZombieDeath2Snd.mp3R236aR269hR6tgoR2i12746R3R234R5y28:sounds%2FZombieDeath3Snd.mp3R236aR270hR6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = window.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$fonts_$ampersand_$ttf = $hx_exports["__ASSET__fonts_ampersand_ttf"] = function() {
	this.ascender = 1854;
	this.descender = -434;
	this.height = 2355;
	this.numGlyphs = 653;
	this.underlinePosition = -292;
	this.underlineThickness = 150;
	this.unitsPerEM = 2048;
	this.name = "Ampersand";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__fonts_ampersand_ttf"] = _$_$ASSET_$_$fonts_$ampersand_$ttf;
_$_$ASSET_$_$fonts_$ampersand_$ttf.__name__ = "__ASSET__fonts_ampersand_ttf";
_$_$ASSET_$_$fonts_$ampersand_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$ampersand_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$ampersand_$ttf
});
var _$_$ASSET_$_$fonts_$bebasneue_$book_$otf = $hx_exports["__ASSET__fonts_bebasneue_book_otf"] = function() {
	this.ascender = 750;
	this.descender = -250;
	this.height = 1000;
	this.numGlyphs = 486;
	this.underlinePosition = -110;
	this.underlineThickness = 50;
	this.unitsPerEM = 1000;
	this.name = "Bebas Neue Book";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__fonts_bebasneue_book_otf"] = _$_$ASSET_$_$fonts_$bebasneue_$book_$otf;
_$_$ASSET_$_$fonts_$bebasneue_$book_$otf.__name__ = "__ASSET__fonts_bebasneue_book_otf";
_$_$ASSET_$_$fonts_$bebasneue_$book_$otf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$bebasneue_$book_$otf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$bebasneue_$book_$otf
});
var _$_$ASSET_$_$fonts_$brlnsdb_$ttf = $hx_exports["__ASSET__fonts_brlnsdb_ttf"] = function() {
	this.ascender = 1893;
	this.descender = -419;
	this.height = 2312;
	this.numGlyphs = 364;
	this.underlinePosition = -320;
	this.underlineThickness = 120;
	this.unitsPerEM = 2048;
	this.name = "Berlin Sans FB Demi Bold";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__fonts_brlnsdb_ttf"] = _$_$ASSET_$_$fonts_$brlnsdb_$ttf;
_$_$ASSET_$_$fonts_$brlnsdb_$ttf.__name__ = "__ASSET__fonts_brlnsdb_ttf";
_$_$ASSET_$_$fonts_$brlnsdb_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$brlnsdb_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$brlnsdb_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		var k = instance.name;
		var _this = openfl_text_Font.__fontByName;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,instance);
		} else {
			_this.h[k] = instance;
		}
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf = $hx_exports["__ASSET__OPENFL__fonts_ampersand_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$fonts_$ampersand_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_ampersand_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf.__name__ = "__ASSET__OPENFL__fonts_ampersand_ttf";
_$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$ampersand_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf = $hx_exports["__ASSET__OPENFL__fonts_bebasneue_book_otf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$fonts_$bebasneue_$book_$otf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_bebasneue_book_otf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf;
_$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf.__name__ = "__ASSET__OPENFL__fonts_bebasneue_book_otf";
_$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$bebasneue_$book_$otf
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf = $hx_exports["__ASSET__OPENFL__fonts_brlnsdb_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$fonts_$brlnsdb_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_brlnsdb_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf.__name__ = "__ASSET__OPENFL__fonts_brlnsdb_ttf";
_$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$brlnsdb_$ttf
});
Math.__name__ = "Math";
var FlagTime = function() {
	this.reset();
	this.x = -100;
	this.y = -100;
};
$hxClasses["FlagTime"] = FlagTime;
FlagTime.__name__ = "FlagTime";
FlagTime.prototype = {
	invalidate: null
	,time: null
	,x: null
	,y: null
	,reset: function() {
		this.invalidate = false;
		this.time = -1;
	}
	,check: function(_time) {
		if(this.invalidate) {
			this.time = _time;
			this.invalidate = false;
		}
	}
	,__class__: FlagTime
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g2 = 0;
		var _g3 = this.__paramFloat;
		while(_g2 < _g3.length) {
			var parameter1 = _g3[_g2];
			++_g2;
			parameter1.__useArray = false;
		}
		var _g4 = 0;
		var _g5 = this.__paramInt;
		while(_g4 < _g5.length) {
			var parameter2 = _g5[_g4];
			++_g4;
			parameter2.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 329, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 362, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g3 = this.__paramBool;
		while(_g2 < _g3.length) {
			var parameter = _g3[_g2];
			++_g2;
			parameter.__disableGL(this.__context);
		}
		var _g4 = 0;
		var _g5 = this.__paramFloat;
		while(_g4 < _g5.length) {
			var parameter1 = _g5[_g4];
			++_g4;
			parameter1.__disableGL(this.__context);
		}
		var _g6 = 0;
		var _g7 = this.__paramInt;
		while(_g6 < _g7.length) {
			var parameter2 = _g7[_g6];
			++_g6;
			parameter2.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\r\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\t\t\t\tprecision highp float;\r\n\t\t\t\t#else\r\n\t\t\t\tprecision mediump float;\r\n\t\t\t\t#endif" : "precision lowp float;") + "\r\n\t\t\t\t#endif\r\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			var _this = this.__context.__programs;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				var _this1 = this.__context.__programs;
				this.program = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				var value = this.program;
				var _this2 = this.__context.__programs;
				if(__map_reserved[id] != null) {
					_this2.setReserved(id,value);
				} else {
					_this2.h[id] = value;
				}
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g3 = this.__paramBool;
				while(_g2 < _g3.length) {
					var parameter = _g3[_g2];
					++_g2;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g4 = 0;
				var _g5 = this.__paramFloat;
				while(_g4 < _g5.length) {
					var parameter1 = _g5[_g4];
					++_g4;
					if(parameter1.__isUniform) {
						parameter1.index = gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g6 = 0;
				var _g7 = this.__paramInt;
				while(_g6 < _g7.length) {
					var parameter2 = _g7[_g6];
					++_g6;
					if(parameter2.__isUniform) {
						parameter2.index = gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g3 = this.__paramBool;
		while(_g2 < _g3.length) {
			var parameter = _g3[_g2];
			++_g2;
			parameter.__updateGL(this.__context);
		}
		var _g4 = 0;
		var _g5 = this.__paramFloat;
		while(_g4 < _g5.length) {
			var parameter1 = _g5[_g4];
			++_g4;
			parameter1.__updateGL(this.__context);
		}
		var _g6 = 0;
		var _g7 = this.__paramInt;
		while(_g6 < _g7.length) {
			var parameter2 = _g7[_g6];
			++_g6;
			parameter2.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g2 = 0;
		var _g3 = shaderBuffer.paramCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			hasOverride = false;
			if(i1 < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g21 = 0;
				var _g31 = shaderBuffer.overrideBoolCount;
				while(_g21 < _g31) {
					var j = _g21++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++boolIndex;
			} else if(i1 < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g22 = 0;
				var _g32 = shaderBuffer.overrideFloatCount;
				while(_g22 < _g32) {
					var j1 = _g22++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g23 = 0;
				var _g33 = shaderBuffer.overrideIntCount;
				while(_g23 < _g33) {
					var j2 = _g23++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var OurShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\r\n\t\t\r\n    varying float openfl_Alphav;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform sampler2D openfl_Texture;\r\n\t\r\n\r\n\t\tvoid main(void) {\r\n\t\t\t\r\n    gl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv) *\r\n      openfl_Alphav;\r\n\t\r\n\t\t}\r\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\r\n\t\t\r\n    attribute float openfl_Alpha;\r\n\t\tattribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\r\n\t\tvarying float openfl_Alphav;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform mat4 openfl_Matrix;\r\n\t\r\n\r\n\t\tvoid main(void) {\r\n\t\t\t\r\n    openfl_Alphav = openfl_Alpha;\r\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\r\n\r\n\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\t\r\n\t\t}\r\n\t";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["OurShader"] = OurShader;
OurShader.__name__ = "OurShader";
OurShader.__super__ = openfl_display_Shader;
OurShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: OurShader
});
var Pool = function(free,filter) {
	this.free_f_ = null;
	this.filter_f_ = null;
	this.empty_ = -1;
	this.free_ = -1;
	this.elems_ = [];
	this.filter_f_ = filter;
	this.free_f_ = free;
};
$hxClasses["Pool"] = Pool;
Pool.__name__ = "Pool";
Pool.prototype = {
	Alloc: function() {
		if(this.free_ == -1) {
			return null;
		}
		var cur_free = this.free_;
		var prev_free = -1;
		while(true) {
			var free_elem = this.elems_[cur_free];
			if(this.filter_f_ == null || this.filter_f_(free_elem.val)) {
				if(prev_free == -1) {
					this.free_ = free_elem.next;
				} else {
					this.elems_[prev_free].next = free_elem.next;
				}
				var prev_empty = this.empty_;
				this.empty_ = cur_free;
				free_elem.next = prev_empty;
				var val = free_elem.val;
				free_elem.val = null;
				return val;
			}
			prev_free = cur_free;
			cur_free = free_elem.next;
			if(cur_free == -1) {
				break;
			}
		}
		return null;
	}
	,Free: function(v) {
		if(this.free_f_ != null) {
			this.free_f_(v);
		}
		if(this.empty_ == -1) {
			this.elems_.push(new _$Pool_Elem(v));
			var prev_free = this.free_;
			this.free_ = this.elems_.length - 1;
			this.elems_[this.free_].next = prev_free;
		} else {
			var empty_elem = this.elems_[this.empty_];
			empty_elem.val = v;
			var prev_free1 = this.free_;
			this.free_ = this.empty_;
			this.empty_ = empty_elem.next;
			empty_elem.next = prev_free1;
		}
	}
	,Dispose: function(dispose) {
		var _g = 0;
		var _g1 = this.elems_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.val != null) {
				if(dispose != null) {
					dispose(elem.val);
				}
				elem.val = null;
			}
		}
		this.elems_ = null;
		this.free_ = -1;
		this.empty_ = -1;
	}
	,Trace: function() {
		haxe_Log.trace("free: " + this.free_ + "; empty: " + this.empty_,{ fileName : "src/Pool.hx", lineNumber : 65, className : "Pool", methodName : "Trace"});
		haxe_Log.trace(this.elems_,{ fileName : "src/Pool.hx", lineNumber : 66, className : "Pool", methodName : "Trace"});
	}
	,elems_: null
	,free_: null
	,empty_: null
	,filter_f_: null
	,free_f_: null
	,__class__: Pool
};
var _$Pool_Elem = function(v) {
	this.val = null;
	this.next = -1;
	this.val = v;
};
$hxClasses["_Pool.Elem"] = _$Pool_Elem;
_$Pool_Elem.__name__ = "_Pool.Elem";
_$Pool_Elem.prototype = {
	next: null
	,val: null
	,__class__: _$Pool_Elem
};
var Pool_$old_$entities_$effects_$Effect = function(free,filter) {
	this.free_f_ = null;
	this.filter_f_ = null;
	this.empty_ = -1;
	this.free_ = -1;
	this.elems_ = [];
	this.filter_f_ = filter;
	this.free_f_ = free;
};
$hxClasses["Pool_old_entities_effects_Effect"] = Pool_$old_$entities_$effects_$Effect;
Pool_$old_$entities_$effects_$Effect.__name__ = "Pool_old_entities_effects_Effect";
Pool_$old_$entities_$effects_$Effect.prototype = {
	Alloc: function() {
		if(this.free_ == -1) {
			return null;
		}
		var cur_free = this.free_;
		var prev_free = -1;
		while(true) {
			var free_elem = this.elems_[cur_free];
			if(this.filter_f_ == null || this.filter_f_(free_elem.val)) {
				if(prev_free == -1) {
					this.free_ = free_elem.next;
				} else {
					this.elems_[prev_free].next = free_elem.next;
				}
				var prev_empty = this.empty_;
				this.empty_ = cur_free;
				free_elem.next = prev_empty;
				var val = free_elem.val;
				free_elem.val = null;
				return val;
			}
			prev_free = cur_free;
			cur_free = free_elem.next;
			if(cur_free == -1) {
				break;
			}
		}
		return null;
	}
	,Free: function(v) {
		if(this.free_f_ != null) {
			this.free_f_(v);
		}
		if(this.empty_ == -1) {
			this.elems_.push(new _$Pool_Elem_$old_$entities_$effects_$Effect(v));
			var prev_free = this.free_;
			this.free_ = this.elems_.length - 1;
			this.elems_[this.free_].next = prev_free;
		} else {
			var empty_elem = this.elems_[this.empty_];
			empty_elem.val = v;
			var prev_free1 = this.free_;
			this.free_ = this.empty_;
			this.empty_ = empty_elem.next;
			empty_elem.next = prev_free1;
		}
	}
	,Dispose: function(dispose) {
		var _g = 0;
		var _g1 = this.elems_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.val != null) {
				if(dispose != null) {
					dispose(elem.val);
				}
				elem.val = null;
			}
		}
		this.elems_ = null;
		this.free_ = -1;
		this.empty_ = -1;
	}
	,Trace: function() {
		haxe_Log.trace("free: " + this.free_ + "; empty: " + this.empty_,{ fileName : "src/Pool.hx", lineNumber : 65, className : "Pool", methodName : "Trace"});
		haxe_Log.trace(this.elems_,{ fileName : "src/Pool.hx", lineNumber : 66, className : "Pool", methodName : "Trace"});
	}
	,elems_: null
	,free_: null
	,empty_: null
	,filter_f_: null
	,free_f_: null
	,__class__: Pool_$old_$entities_$effects_$Effect
};
var Pool_$old_$entities_$impact_$Bullet = function(free,filter) {
	this.free_f_ = null;
	this.filter_f_ = null;
	this.empty_ = -1;
	this.free_ = -1;
	this.elems_ = [];
	this.filter_f_ = filter;
	this.free_f_ = free;
};
$hxClasses["Pool_old_entities_impact_Bullet"] = Pool_$old_$entities_$impact_$Bullet;
Pool_$old_$entities_$impact_$Bullet.__name__ = "Pool_old_entities_impact_Bullet";
Pool_$old_$entities_$impact_$Bullet.prototype = {
	Alloc: function() {
		if(this.free_ == -1) {
			return null;
		}
		var cur_free = this.free_;
		var prev_free = -1;
		while(true) {
			var free_elem = this.elems_[cur_free];
			if(this.filter_f_ == null || this.filter_f_(free_elem.val)) {
				if(prev_free == -1) {
					this.free_ = free_elem.next;
				} else {
					this.elems_[prev_free].next = free_elem.next;
				}
				var prev_empty = this.empty_;
				this.empty_ = cur_free;
				free_elem.next = prev_empty;
				var val = free_elem.val;
				free_elem.val = null;
				return val;
			}
			prev_free = cur_free;
			cur_free = free_elem.next;
			if(cur_free == -1) {
				break;
			}
		}
		return null;
	}
	,Free: function(v) {
		if(this.free_f_ != null) {
			this.free_f_(v);
		}
		if(this.empty_ == -1) {
			this.elems_.push(new _$Pool_Elem_$old_$entities_$impact_$Bullet(v));
			var prev_free = this.free_;
			this.free_ = this.elems_.length - 1;
			this.elems_[this.free_].next = prev_free;
		} else {
			var empty_elem = this.elems_[this.empty_];
			empty_elem.val = v;
			var prev_free1 = this.free_;
			this.free_ = this.empty_;
			this.empty_ = empty_elem.next;
			empty_elem.next = prev_free1;
		}
	}
	,Dispose: function(dispose) {
		var _g = 0;
		var _g1 = this.elems_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.val != null) {
				if(dispose != null) {
					dispose(elem.val);
				}
				elem.val = null;
			}
		}
		this.elems_ = null;
		this.free_ = -1;
		this.empty_ = -1;
	}
	,Trace: function() {
		haxe_Log.trace("free: " + this.free_ + "; empty: " + this.empty_,{ fileName : "src/Pool.hx", lineNumber : 65, className : "Pool", methodName : "Trace"});
		haxe_Log.trace(this.elems_,{ fileName : "src/Pool.hx", lineNumber : 66, className : "Pool", methodName : "Trace"});
	}
	,elems_: null
	,free_: null
	,empty_: null
	,filter_f_: null
	,free_f_: null
	,__class__: Pool_$old_$entities_$impact_$Bullet
};
var Pool_$openfl_$display_$Tile = function(free,filter) {
	this.free_f_ = null;
	this.filter_f_ = null;
	this.empty_ = -1;
	this.free_ = -1;
	this.elems_ = [];
	this.filter_f_ = filter;
	this.free_f_ = free;
};
$hxClasses["Pool_openfl_display_Tile"] = Pool_$openfl_$display_$Tile;
Pool_$openfl_$display_$Tile.__name__ = "Pool_openfl_display_Tile";
Pool_$openfl_$display_$Tile.prototype = {
	Alloc: function() {
		if(this.free_ == -1) {
			return null;
		}
		var cur_free = this.free_;
		var prev_free = -1;
		while(true) {
			var free_elem = this.elems_[cur_free];
			if(this.filter_f_ == null || this.filter_f_(free_elem.val)) {
				if(prev_free == -1) {
					this.free_ = free_elem.next;
				} else {
					this.elems_[prev_free].next = free_elem.next;
				}
				var prev_empty = this.empty_;
				this.empty_ = cur_free;
				free_elem.next = prev_empty;
				var val = free_elem.val;
				free_elem.val = null;
				return val;
			}
			prev_free = cur_free;
			cur_free = free_elem.next;
			if(cur_free == -1) {
				break;
			}
		}
		return null;
	}
	,Free: function(v) {
		if(this.free_f_ != null) {
			this.free_f_(v);
		}
		if(this.empty_ == -1) {
			this.elems_.push(new _$Pool_Elem_$openfl_$display_$Tile(v));
			var prev_free = this.free_;
			this.free_ = this.elems_.length - 1;
			this.elems_[this.free_].next = prev_free;
		} else {
			var empty_elem = this.elems_[this.empty_];
			empty_elem.val = v;
			var prev_free1 = this.free_;
			this.free_ = this.empty_;
			this.empty_ = empty_elem.next;
			empty_elem.next = prev_free1;
		}
	}
	,Dispose: function(dispose) {
		var _g = 0;
		var _g1 = this.elems_;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.val != null) {
				if(dispose != null) {
					dispose(elem.val);
				}
				elem.val = null;
			}
		}
		this.elems_ = null;
		this.free_ = -1;
		this.empty_ = -1;
	}
	,Trace: function() {
		haxe_Log.trace("free: " + this.free_ + "; empty: " + this.empty_,{ fileName : "src/Pool.hx", lineNumber : 65, className : "Pool", methodName : "Trace"});
		haxe_Log.trace(this.elems_,{ fileName : "src/Pool.hx", lineNumber : 66, className : "Pool", methodName : "Trace"});
	}
	,elems_: null
	,free_: null
	,empty_: null
	,filter_f_: null
	,free_f_: null
	,__class__: Pool_$openfl_$display_$Tile
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	width = width == null ? 0 : width;
	height = height == null ? 0 : height;
	width = width < 0 ? 0 : width;
	height = height < 0 ? 0 : height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__symbol: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g2 = 0;
		var _g11 = this.height;
		while(_g2 < _g11) {
			var y = _g2++;
			var _g3 = 0;
			var _g12 = this.width;
			while(_g3 < _g12) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer1 = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer1.__allowSmoothing = smoothing;
			renderer1.__overrideBlendMode = blendMode;
			renderer1.__worldTransform = transform;
			renderer1.__worldAlpha = 1 / source.__worldAlpha;
			renderer1.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer1.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer1);
			if(clipRect != null) {
				renderer1.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array1 = null;
					var vector1 = null;
					var view1 = null;
					var buffer1 = null;
					var len1 = null;
					var this2 = new Uint16Array(18);
					this.__indexBufferData = this2;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array2 = null;
					var vector2 = null;
					var view2 = null;
					var buffer2 = null;
					var len2 = null;
					var this3 = new Uint16Array(18);
					this.__indexBufferData = this3;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array3 = null;
				var vector3 = null;
				var view3 = null;
				var buffer3 = null;
				var len3 = null;
				var this4 = new Uint16Array(6);
				this.__indexBufferData = this4;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array1 = null;
					var vector1 = null;
					var view1 = null;
					var buffer1 = null;
					var len1 = null;
					var this2 = new Float32Array(112);
					this.__vertexBufferData = this2;
					var top1 = scale9Grid.y;
					var bottom1 = this.height - centerY - top1;
					var uvTop1 = top1 / this.height;
					var uvCenterY1 = centerY / this.height;
					var uvBottom1 = bottom1 / this.height;
					var renderedTop1 = top1 / targetObject.get_scaleY();
					var renderedBottom1 = bottom1 / targetObject.get_scaleY();
					var renderedCenterY1 = targetObject.get_height() / targetObject.get_scaleY() - renderedTop1 - renderedBottom1;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop1;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop1;
					this.__vertexBufferData[15] = renderedTop1;
					this.__vertexBufferData[18] = uvHeight * uvTop1;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop1 + renderedCenterY1;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop1 + uvCenterY1);
					this.__vertexBufferData[71] = renderedTop1 + renderedCenterY1;
					this.__vertexBufferData[74] = uvHeight * (uvTop1 + uvCenterY1);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array2 = null;
					var vector2 = null;
					var view2 = null;
					var buffer2 = null;
					var len2 = null;
					var this3 = new Float32Array(112);
					this.__vertexBufferData = this3;
					var left1 = scale9Grid.x;
					var right1 = this.width - centerX - left1;
					var uvLeft1 = left1 / this.width;
					var uvCenterX1 = centerX / this.width;
					var uvRight1 = right1 / this.width;
					var renderedLeft1 = left1 / targetObject.get_scaleX();
					var renderedRight1 = right1 / targetObject.get_scaleX();
					var renderedCenterX1 = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft1 - renderedRight1;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft1;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft1;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft1;
					this.__vertexBufferData[31] = uvWidth * uvLeft1;
					this.__vertexBufferData[56] = renderedLeft1 + renderedCenterX1;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft1 + uvCenterX1);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft1 + renderedCenterX1;
					this.__vertexBufferData[73] = uvWidth * (uvLeft1 + uvCenterX1);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array3 = null;
				var vector3 = null;
				var view3 = null;
				var buffer3 = null;
				var len3 = null;
				var this4 = new Float32Array(56);
				this.__vertexBufferData = this4;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = _$UInt_UInt_$Impl_$.toFloat(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels)) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g11 = [];
		var _g21 = 0;
		while(_g21 < 256) {
			var j1 = _g21++;
			_g11.push(0);
		}
		_g.push(_g11);
		var _g12 = [];
		var _g22 = 0;
		while(_g22 < 256) {
			var j2 = _g22++;
			_g12.push(0);
		}
		_g.push(_g12);
		var _g13 = [];
		var _g23 = 0;
		while(_g23 < 256) {
			var j3 = _g23++;
			_g13.push(0);
		}
		_g.push(_g13);
		var result = _g;
		var _g14 = 0;
		var _g24 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g14 < _g24) {
			var i = _g14++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y1 = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x1,y1,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x1 < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x1,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x1);
				}
				if(y1 < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y1,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y1);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x1 < 0 ? -x1 : 0;
				hitRect.y = y1 < 0 ? -y1 : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(_$UInt_UInt_$Impl_$.gt(pixel1 >>> 24 & 255,firstAlphaThreshold) && _$UInt_UInt_$Impl_$.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = _$UInt_UInt_$Impl_$.toFloat(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1)) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
				var pixel2;
				var _g2 = 0;
				var _g11 = length1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					pixel2 = pixels1.readUnsignedInt();
					if(_$UInt_UInt_$Impl_$.gt(pixel2 >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = this.width;
			while(_g2 < _g11) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.length - byteArray.position) < length) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer(byteArray),1,openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		this.__symbol = symbol;
		lime_graphics_Image.loadFromFile(symbol.path).onComplete(function(image) {
			if(symbol.alpha != null) {
				lime_graphics_Image.loadFromFile(symbol.alpha).onComplete(function(alpha) {
					if(image != null && alpha != null) {
						var tmp = alpha.get_rect();
						image.copyChannel(alpha,tmp,new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
						image.buffer.premultiplied = true;
						image.set_premultiplied(false);
					}
					_gthis.__fromImage(image);
				});
			} else {
				_gthis.__fromImage(image);
			}
		});
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderer.context;
		context.globalAlpha = 1;
		renderer.setTransform(this.__renderTransform,context);
		context.drawImage(this.image.get_src(),0,0,this.image.width,this.image.height);
	}
	,__renderCanvasMask: function(renderer) {
	}
	,__renderDOM: function(renderer) {
	}
	,__renderGL: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		renderer.__setBlendMode(10);
		var shader = renderer.__defaultDisplayShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.applyAlpha(this.__worldAlpha);
		renderer.applyColorTransform(this.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
	,__renderGLMask: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var Graphic = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Graphic.preload != null) {
		this.__fromImage(Graphic.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Graphic.resourceName),Graphic.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Graphic.preload == null) {
				Graphic.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Graphic"] = Graphic;
Graphic.__name__ = "Graphic";
Graphic.__super__ = openfl_display_BitmapData;
Graphic.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Graphic
});
var Z20001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z20001.preload != null) {
		this.__fromImage(Z20001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z20001.resourceName),Z20001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z20001.preload == null) {
				Z20001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z20001"] = Z20001;
Z20001.__name__ = "Z20001";
Z20001.__super__ = openfl_display_BitmapData;
Z20001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z20001
});
var Z30001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z30001.preload != null) {
		this.__fromImage(Z30001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z30001.resourceName),Z30001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z30001.preload == null) {
				Z30001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z30001"] = Z30001;
Z30001.__name__ = "Z30001";
Z30001.__super__ = openfl_display_BitmapData;
Z30001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z30001
});
var Z40001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z40001.preload != null) {
		this.__fromImage(Z40001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z40001.resourceName),Z40001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z40001.preload == null) {
				Z40001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z40001"] = Z40001;
Z40001.__name__ = "Z40001";
Z40001.__super__ = openfl_display_BitmapData;
Z40001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z40001
});
var Z50001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z50001.preload != null) {
		this.__fromImage(Z50001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z50001.resourceName),Z50001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z50001.preload == null) {
				Z50001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z50001"] = Z50001;
Z50001.__name__ = "Z50001";
Z50001.__super__ = openfl_display_BitmapData;
Z50001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z50001
});
var Z60001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z60001.preload != null) {
		this.__fromImage(Z60001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z60001.resourceName),Z60001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z60001.preload == null) {
				Z60001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z60001"] = Z60001;
Z60001.__name__ = "Z60001";
Z60001.__super__ = openfl_display_BitmapData;
Z60001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z60001
});
var Z70001 = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Z70001.preload != null) {
		this.__fromImage(Z70001.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Z70001.resourceName),Z70001.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Z70001.preload == null) {
				Z70001.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["Z70001"] = Z70001;
Z70001.__name__ = "Z70001";
Z70001.__super__ = openfl_display_BitmapData;
Z70001.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Z70001
});
var Preloader = function() {
	this.xmlLoader = new openfl_net_URLLoader();
	this.Z7 = null;
	this.Z6 = null;
	this.Z5 = null;
	this.Z4 = null;
	this.Z3 = null;
	this.Z2 = null;
	this.bitmap_ = null;
	AdManager.init();
	openfl_display_Sprite.call(this);
	
    (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s);
      js.async = true;
      js.src = "https://www.googletagmanager.com/gtag/js?id=UA-174167323-1";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, "script", "gamedistribution-jssdk"));
    ;
	lime_utils_Assets.cache.enabled = false;
	openfl_utils_Assets.cache.set_enabled(false);
	this.Z2 = new openfl_display_Bitmap(new Z20001(0,0));
	this.Z3 = new openfl_display_Bitmap(new Z30001(0,0));
	this.Z4 = new openfl_display_Bitmap(new Z40001(0,0));
	this.Z5 = new openfl_display_Bitmap(new Z50001(0,0));
	this.Z6 = new openfl_display_Bitmap(new Z60001(0,0));
	this.Z7 = new openfl_display_Bitmap(new Z70001(0,0));
	var bitmapData = new Graphic(0,0);
	this.bitmap_ = new openfl_display_Bitmap(bitmapData,null,true);
	this.UpdateBitmap();
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 17;
	var y = this.getHeight() / 2 - height / 2 + 206;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.container = new openfl_display_Sprite();
	this.container.set_name("splash_screen");
	openfl_Lib.get_current().stage.addChild(this.container);
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.container.addChild(this.bitmap_);
	this.container.addChild(this.Z2);
	this.container.addChild(this.Z3);
	this.container.addChild(this.Z4);
	this.container.addChild(this.Z5);
	this.container.addChild(this.Z6);
	this.container.addChild(this.Z7);
	this.container.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.75);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.container.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
	AdManager.sendEvent(apiManager_AdEventType.LOADING_START);
	this.container.addEventListener("removedFromStage",$bind(this,this.onRemoveFromStage));
};
$hxClasses["Preloader"] = Preloader;
Preloader.__name__ = "Preloader";
Preloader.__super__ = openfl_display_Sprite;
Preloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,container: null
	,startAnimation: null
	,bitmap_: null
	,Z2: null
	,Z3: null
	,Z4: null
	,Z5: null
	,Z6: null
	,Z7: null
	,xml: null
	,xmlLoader: null
	,createLoader: function() {
		this.xmlLoader.addEventListener("complete",$bind(this,this.onCompleteLoading));
		this.xmlLoader.addEventListener("ioError",$bind(this,this.onError));
		var urlReq = new openfl_net_URLRequest("https://www.notdoppler.com/php/external/deadzed_html5/deadzed_html5_config.json");
		this.xmlLoader.load(urlReq);
	}
	,onError: function(err) {
		haxe_Log.trace("the error is: " + Std.string(err),{ fileName : "src/Preloader.hx", lineNumber : 56, className : "Preloader", methodName : "onError"});
	}
	,onCompleteLoading: function(e) {
		this.xml = JSON.parse(this.xmlLoader.data);
		this.xmlLoader.removeEventListener("complete",$bind(this,this.onCompleteLoading));
		this.xmlLoader.removeEventListener("ioError",$bind(this,this.onError));
		if(Object.prototype.hasOwnProperty.call(this.xml,"enable_ga")) {
			if(Reflect.getProperty(this.xml,"enable_ga") == "false") {
				old_singleton_LocalStorage.ALLOW_STATISTIC = false;
			} else {
				old_singleton_LocalStorage.ALLOW_STATISTIC = true;
			}
		} else {
			old_singleton_LocalStorage.ALLOW_STATISTIC = false;
		}
		haxe_Log.trace("LocalStorage.ALLOW_STATISTIC " + Std.string(old_singleton_LocalStorage.ALLOW_STATISTIC),{ fileName : "src/Preloader.hx", lineNumber : 73, className : "Preloader", methodName : "onCompleteLoading"});
	}
	,getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		return openfl_Lib.get_current().stage.stageHeight;
	}
	,getWidth: function() {
		return openfl_Lib.get_current().stage.stageWidth;
	}
	,UpdateBitmap: function() {
		this.bitmap_.set_scaleY(this.bitmap_.set_scaleX(this.getWidth() / this.bitmap_.get_bitmapData().width));
		this.bitmap_.set_y((this.getHeight() - this.bitmap_.get_bitmapData().height * this.bitmap_.get_scaleY()) / 2);
		this.Z2.set_x(435 + this.getWidth() / 2 - 320);
		this.Z3.set_x(557 + this.getWidth() / 2 - 320);
		this.Z4.set_x(326 + this.getWidth() / 2 - 320);
		this.Z5.set_x(190 + this.getWidth() / 2 - 320);
		this.Z6.set_x(264 + this.getWidth() / 2 - 320);
		this.Z7.set_x(126 + this.getWidth() / 2 - 320);
		this.Z2.set_y(116 + this.getHeight() / 2);
		this.Z3.set_y(113 + this.getHeight() / 2);
		this.Z4.set_y(115 + this.getHeight() / 2);
		this.Z5.set_y(97 + this.getHeight() / 2);
		this.Z6.set_y(115 + this.getHeight() / 2);
		this.Z7.set_y(108 + this.getHeight() / 2);
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
			AdManager.sendEvent(apiManager_AdEventType.LOADING_PROGRESS,{ percentageDone : percentLoaded});
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.createLoader();
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,onRemoveFromStage: function(event) {
		AdManager.sendEvent(apiManager_AdEventType.LOADING_FINISH);
		this.container.removeEventListener("removedFromStage",$bind(this,this.onRemoveFromStage));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		this.UpdateBitmap();
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: Preloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var iriysoft_graphic_IsfViewObject = function() {
	this.prev_root_spt_ = null;
	this.root_spt_ = null;
	this.filters_ = null;
	this.mask = null;
	this.bounds_rc_ = null;
	this.m_angle = 0;
	this.m_skewY = 0;
	this.m_skewX = 0;
	this.userData = { };
	iriysoft_core_IsfBaseObject.call(this);
	this.m_matrix = new openfl_geom_Matrix();
	this.__tmpMatrix = new openfl_geom_Matrix();
	this.m_angle = 0;
	this.m_scaleX = 1;
	this.m_scaleY = 1;
	this.m_visible = true;
	this.m_alpha = 1;
	this.m_hitRect = null;
	this.m_x = 0;
	this.m_y = 0;
	this.__p = new openfl_geom_Point();
	this.m_invalidate = true;
	this.m_parent = null;
	this.touch_object_ = new iriysoft_graphic_IsfTouchObject(this);
	this.initTouchBlock();
};
$hxClasses["iriysoft.graphic.IsfViewObject"] = iriysoft_graphic_IsfViewObject;
iriysoft_graphic_IsfViewObject.__name__ = "iriysoft.graphic.IsfViewObject";
iriysoft_graphic_IsfViewObject.__interfaces__ = [iriysoft_graphic_IIsfViewObject];
iriysoft_graphic_IsfViewObject.__super__ = iriysoft_core_IsfBaseObject;
iriysoft_graphic_IsfViewObject.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	userData: null
	,touch_object_: null
	,customDispose: function() {
		this.disposeTouchBlock();
		if(this.get_parent() != null) {
			this.get_parent().removeChild(this);
			this.m_parent = null;
		}
		this.m_matrix = null;
		this.__tmpMatrix = null;
		this.__p = null;
		this.mask = null;
		if(this.root_spt_ != null) {
			this.root_spt_.removeChildren();
		}
		this.root_spt_ = null;
		this.prev_root_spt_ = null;
	}
	,m_x: null
	,get_x: function() {
		return this.m_x;
	}
	,set_x: function(_x) {
		this.m_invalidate = true;
		return this.m_x = _x;
	}
	,m_y: null
	,get_y: function() {
		return this.m_y;
	}
	,set_y: function(_y) {
		this.m_invalidate = true;
		return this.m_y = _y;
	}
	,m_scaleX: null
	,get_scaleX: function() {
		return this.m_scaleX;
	}
	,set_scaleX: function(_scaleX) {
		this.m_invalidate = true;
		return this.m_scaleX = _scaleX;
	}
	,m_scaleY: null
	,get_scaleY: function() {
		return this.m_scaleY;
	}
	,set_scaleY: function(_scaleY) {
		this.m_invalidate = true;
		return this.m_scaleY = _scaleY;
	}
	,m_skewX: null
	,get_skewX: function() {
		return this.m_skewX;
	}
	,set_skewX: function(_skewX) {
		this.m_invalidate = true;
		return this.m_skewX = _skewX;
	}
	,m_skewY: null
	,get_skewY: function() {
		return this.m_skewY;
	}
	,set_skewY: function(_skewY) {
		this.m_invalidate = true;
		return this.m_skewY = _skewY;
	}
	,m_angle: null
	,get_rotation: function() {
		return this.m_angle;
	}
	,set_rotation: function(_rotation) {
		this.m_invalidate = true;
		this.m_angle = _rotation;
		return this.m_angle;
	}
	,m_name: null
	,get_name: function() {
		return this.m_name;
	}
	,set_name: function(_name) {
		return this.m_name = _name;
	}
	,m_parent: null
	,get_parent: function() {
		return this.m_parent;
	}
	,set_parent: function(_parent) {
		return this.m_parent = _parent;
	}
	,get_width: function() {
		return this.getBounds(this.get_parent()).width;
	}
	,set_width: function(_width) {
		this.set_scaleX(this.get_scaleX() * _width / this.get_width());
		return _width;
	}
	,get_height: function() {
		return this.getBounds(this.get_parent()).height;
	}
	,set_height: function(_height) {
		this.set_scaleY(this.get_scaleY() * _height / this.get_height());
		return _height;
	}
	,m_visible: null
	,get_visible: function() {
		return this.m_visible;
	}
	,set_visible: function(_visible) {
		return this.m_visible = _visible;
	}
	,m_alpha: null
	,get_alpha: function() {
		return this.m_alpha;
	}
	,set_alpha: function(_alpha) {
		return this.m_alpha = _alpha;
	}
	,m_matrix: null
	,__tmpMatrix: null
	,get_transformMatrix: function() {
		this.updateMatrix();
		return this.m_matrix;
	}
	,set_transformMatrix: function(_matrix) {
		throw new js__$Boot_HaxeError("No implementation");
	}
	,m_invalidate: null
	,updateMatrix: function() {
		if(!this.m_invalidate) {
			return;
		}
		this.m_matrix.identity();
		this.m_matrix.scale(this.m_scaleX,this.m_scaleY);
		if(this.m_skewX != 0 || this.m_skewY != 0) {
			var sinX = Math.sin(this.m_skewX);
			var cosX = Math.cos(this.m_skewX);
			var sinY = Math.sin(this.m_skewY);
			var cosY = Math.cos(this.m_skewY);
			this.m_matrix.setTo(this.m_matrix.a * cosY - this.m_matrix.b * sinX,this.m_matrix.a * sinY + this.m_matrix.b * cosX,this.m_matrix.c * cosY - this.m_matrix.d * sinX,this.m_matrix.c * sinY + this.m_matrix.d * cosX,this.m_matrix.tx * cosY - this.m_matrix.ty * sinX,this.m_matrix.tx * sinY + this.m_matrix.ty * cosX);
		} else {
			this.m_matrix.rotate(this.m_angle);
		}
		this.m_matrix.translate(-this.m_x,-this.m_y);
		this.m_invalidate = false;
	}
	,m_hitRect: null
	,get_hitRect: function() {
		return this.m_hitRect;
	}
	,set_hitRect: function(_hitRect) {
		this.m_hitRect = _hitRect;
		return this.m_hitRect;
	}
	,__p: null
	,bounds_rc_: null
	,hitTest: function(_x,_y) {
		this.updateMatrix();
		this.__p.x = _x;
		this.__p.y = _y;
		this.__p = this.globalToLocal(this.__p);
		this.bounds_rc_ = this.get_hitRect() == null ? this.getBounds(null) : this.get_hitRect();
		return this.bounds_rc_.containsPoint(this.__p);
	}
	,getBounds: function(_targetSpace) {
		return new openfl_geom_Rectangle(this.get_x(),this.get_y(),0,0);
	}
	,globalToLocal: function(_point) {
		return this.transformPoint(_point,true);
	}
	,localToGlobal: function(_point) {
		return this.transformPoint(_point,false);
	}
	,transformPoint: function(_point,_isGlobal) {
		var global = this;
		var m = this.__tmpMatrix;
		m.copyFrom(this.get_transformMatrix());
		if(this.get_parent() != null) {
			var root = this.get_parent();
			while(root.get_parent() != null) {
				m.concat(root.get_transformMatrix());
				root = root.get_parent();
			}
			global = root;
			m.concat(root.get_transformMatrix());
		}
		if(_isGlobal) {
			m.invert();
		}
		_point.x = -_point.x;
		_point.y = -_point.y;
		var p = m.transformPoint(_point);
		_point.x = -_point.x;
		_point.y = -_point.y;
		p.x = -p.x;
		p.y = -p.y;
		return p;
	}
	,IncreaseRectangle: function(_rectangle,x,y) {
		if(_rectangle.get_left() > x) {
			_rectangle.set_left(x);
		} else if(_rectangle.get_right() < x) {
			_rectangle.set_right(x);
		}
		if(_rectangle.get_top() > y) {
			_rectangle.set_top(y);
		} else if(_rectangle.get_bottom() < y) {
			_rectangle.set_bottom(y);
		}
	}
	,signalRollOut: null
	,signalRollIn: null
	,touchable: null
	,touchGroup: null
	,touchMove: null
	,signalTouch: null
	,signalTouchUp: null
	,signalTouchDown: null
	,checkHit: function(_globalX,_globalY) {
		return this.hitTest(_globalX,_globalY);
	}
	,initTouchBlock: function() {
		this.touchable = true;
		this.touchGroup = false;
		this.touchMove = false;
		this.signalTouch = new iriysoft_signal_IsfSignal4();
		this.signalTouchUp = new iriysoft_signal_IsfSignal4();
		this.signalTouchDown = new iriysoft_signal_IsfSignal4();
		this.signalRollOut = new iriysoft_signal_IsfSignal1();
		this.signalRollIn = new iriysoft_signal_IsfSignal1();
	}
	,disposeTouchBlock: function() {
		this.touch_object_.dispose();
		this.touch_object_ = null;
		if(this.signalTouch != null) {
			this.signalTouch.dispose();
			this.signalTouch = null;
		}
		if(this.signalTouchUp != null) {
			this.signalTouchUp.dispose();
			this.signalTouchUp = null;
		}
		if(this.signalTouchDown != null) {
			this.signalTouchDown.dispose();
			this.signalTouchDown = null;
		}
		if(this.signalRollOut != null) {
			this.signalRollOut.dispose();
			this.signalRollOut = null;
		}
		if(this.signalRollIn != null) {
			this.signalRollIn.dispose();
			this.signalRollIn = null;
		}
	}
	,mask: null
	,filters_: null
	,get_filters: function() {
		return this.filters_;
	}
	,set_filters: function(v) {
		return this.filters_ = v;
	}
	,root_spt_: null
	,prev_root_spt_: null
	,before_render: function(_renderData,_matrix,_alpha) {
		if(!this.m_visible || _alpha == 0) {
			return;
		}
		if(this.mask != null || this.get_filters() != null) {
			if(this.root_spt_ == null) {
				this.root_spt_ = new openfl_display_Sprite();
			}
			if(this.root_spt_.get_mask() != this.mask) {
				this.root_spt_.set_mask(this.mask);
			}
		} else if(this.root_spt_ != null) {
			this.root_spt_.set_mask(null);
			this.root_spt_.set_filters(null);
			this.root_spt_ = null;
		}
		if(this.root_spt_ != null) {
			this.root_spt_.removeChildren();
			this.prev_root_spt_ = _renderData.AddRoot(this.root_spt_);
		}
	}
	,after_render: function(_renderData,_matrix,_alpha) {
		if(!this.m_visible || _alpha == 0) {
			return;
		}
		if(this.root_spt_ != null) {
			_renderData.RestoreRoot(this.prev_root_spt_);
			this.prev_root_spt_ = null;
		}
	}
	,render: function(_renderData,_matrix,_alpha) {
	}
	,touch_object: function() {
		return this.touch_object_;
	}
	,__class__: iriysoft_graphic_IsfViewObject
	,__properties__: $extend(iriysoft_core_IsfBaseObject.prototype.__properties__,{set_filters:"set_filters",get_filters:"get_filters",set_hitRect:"set_hitRect",get_hitRect:"get_hitRect",set_transformMatrix:"set_transformMatrix",get_transformMatrix:"get_transformMatrix",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_parent:"set_parent",get_parent:"get_parent",set_name:"set_name",get_name:"get_name",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var iriysoft_graphic_IsfViewObjectContainer = function() {
	this.__p1 = new openfl_geom_Point();
	this.cancel_event_ = false;
	iriysoft_graphic_IsfViewObject.call(this);
	this.m_childrens = [];
};
$hxClasses["iriysoft.graphic.IsfViewObjectContainer"] = iriysoft_graphic_IsfViewObjectContainer;
iriysoft_graphic_IsfViewObjectContainer.__name__ = "iriysoft.graphic.IsfViewObjectContainer";
iriysoft_graphic_IsfViewObjectContainer.__interfaces__ = [iriysoft_graphic_IIsfViewObjectContainer];
iriysoft_graphic_IsfViewObjectContainer.__super__ = iriysoft_graphic_IsfViewObject;
iriysoft_graphic_IsfViewObjectContainer.prototype = $extend(iriysoft_graphic_IsfViewObject.prototype,{
	m_childrens: null
	,customDispose: function() {
		if(this.m_childrens != null) {
			this.removeAllChildren(true);
		}
		iriysoft_graphic_IsfViewObject.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		var _g = 0;
		var _g1 = this.m_childrens;
		while(_g < _g1.length) {
			var ch = _g1[_g];
			++_g;
			ch.process(_timeStep);
		}
	}
	,numChildren: null
	,get_numChildren: function() {
		return this.m_childrens.length;
	}
	,addChild: function(_viewObject) {
		if(_viewObject.get_parent() != null) {
			_viewObject.get_parent().removeChild(_viewObject);
		}
		this.m_childrens.push(_viewObject);
		_viewObject.set_parent(this);
	}
	,addChildAt: function(_viewObject,_index) {
		if(_viewObject.get_parent() != null) {
			_viewObject.get_parent().removeChild(_viewObject);
		}
		this.m_childrens.splice(_index,0,_viewObject);
		_viewObject.set_parent(this);
	}
	,removeChild: function(_viewObject) {
		HxOverrides.remove(this.m_childrens,_viewObject);
		this.__removeChild(_viewObject);
	}
	,removeChildAt: function(_index) {
		this.__removeChild(this.m_childrens[_index]);
		return this.m_childrens.splice(_index,1)[0];
	}
	,removeChildren: function(_beginIndex,_endIndex) {
		if(_endIndex == null) {
			_endIndex = -1;
		}
		if(_beginIndex == null) {
			_beginIndex = 0;
		}
		if(_endIndex < 0) {
			_endIndex = this.m_childrens.length - 1;
		}
		if(_beginIndex >= _endIndex) {
			return;
		}
		var arr = this.m_childrens.splice(_beginIndex,_endIndex - _beginIndex);
		var _g = 0;
		while(_g < arr.length) {
			var o = arr[_g];
			++_g;
			this.__removeChild(o);
		}
	}
	,removeAllChildren: function(_disposeItems) {
		if(_disposeItems == null) {
			_disposeItems = false;
		}
		var vo;
		while(this.get_numChildren() > 0) {
			vo = this.removeChildAt(0);
			if(_disposeItems) {
				vo.dispose();
			}
		}
	}
	,getChildAt: function(_index) {
		return this.m_childrens[_index];
	}
	,getChildIndex: function(_viewObject) {
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			if(this.getChildAt(i) == _viewObject) {
				return i;
			}
		}
		return -1;
	}
	,getChildByName: function(_name) {
		var _g = 0;
		var _g1 = this.m_childrens;
		while(_g < _g1.length) {
			var vo = _g1[_g];
			++_g;
			if(vo.get_name() == _name) {
				return vo;
			}
		}
		return null;
	}
	,setChildIndex: function(_viewObject,_index) {
		throw new js__$Boot_HaxeError("No implementation");
	}
	,sortChildren: function(func) {
		this.m_childrens.sort(func);
	}
	,swapChildren: function(child1,child2) {
		this.swapChildrenAt(this.getChildIndex(child1),this.getChildIndex(child2));
	}
	,swapChildrenAt: function(index1,index2) {
		if(index1 >= 0 && index2 >= 0) {
			var tmp = this.m_childrens[index1];
			this.m_childrens[index1] = this.m_childrens[index2];
			this.m_childrens[index2] = tmp;
		}
	}
	,SetTextRoot: function() {
	}
	,ResetTextRoot: function() {
	}
	,IsTextRoot: function() {
		return false;
	}
	,SetTilemapTextRoot: function(width,height) {
	}
	,ResetTilemapTextRoot: function() {
	}
	,IsTilemapTextRoot: function() {
		return false;
	}
	,cancel_event_: null
	,CancelEvent: function() {
		this.cancel_event_ = true;
	}
	,IsCancelEvent: function() {
		return this.cancel_event_;
	}
	,getBounds: function(_targetSpace) {
		var r = null;
		var chr;
		if(_targetSpace == null) {
			_targetSpace = this;
		}
		var _g = 0;
		var _g1 = this.m_childrens;
		while(_g < _g1.length) {
			var ch = _g1[_g];
			++_g;
			if(ch.get_visible() == false) {
				continue;
			}
			chr = ch.getBounds(_targetSpace);
			if(r == null) {
				r = chr.clone();
			} else {
				this.IncreaseRectangle(r,chr.get_right(),chr.get_bottom());
				this.IncreaseRectangle(r,chr.get_left(),chr.get_top());
			}
		}
		if(r == null) {
			var pos = this.calcBoundPoint(0,0,_targetSpace);
			r = new openfl_geom_Rectangle(pos.x,pos.y);
		}
		return r;
	}
	,__p1: null
	,calcBoundPoint: function(_x,_y,_targetSpace) {
		this.__p1.x = _x;
		this.__p1.y = _y;
		if(_targetSpace != null && _targetSpace != this) {
			this.__p1 = this.localToGlobal(this.__p1);
			this.__p1 = _targetSpace.globalToLocal(this.__p1);
		}
		return this.__p1;
	}
	,__removeChild: function(_viewObject) {
		_viewObject.set_parent(null);
	}
	,__class__: iriysoft_graphic_IsfViewObjectContainer
	,__properties__: $extend(iriysoft_graphic_IsfViewObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var iriysoft_graphic_IIsfViewObjectNME = function() { };
$hxClasses["iriysoft.graphic.IIsfViewObjectNME"] = iriysoft_graphic_IIsfViewObjectNME;
iriysoft_graphic_IIsfViewObjectNME.__name__ = "iriysoft.graphic.IIsfViewObjectNME";
iriysoft_graphic_IIsfViewObjectNME.__isInterface__ = true;
iriysoft_graphic_IIsfViewObjectNME.prototype = {
	checkTouchDown: null
	,checkTouchUp: null
	,updateMove: null
	,__class__: iriysoft_graphic_IIsfViewObjectNME
};
var iriysoft_graphic_IsfViewObjectContainerNME = function() {
	this.tilemap_ = null;
	this.tileset_ = null;
	this.tilemap_text_bd_ = null;
	this.backpack_ = null;
	this.tiles_pool_ = null;
	this.tilemap_text_root_ = false;
	this.bitmap_push_index_ = 0;
	this.bitmaps_ = null;
	this.text_root_ = false;
	iriysoft_graphic_IsfViewObjectContainer.call(this);
	this.touch_object_ = new iriysoft_graphic_IsfTouchObject(this);
};
$hxClasses["iriysoft.graphic.IsfViewObjectContainerNME"] = iriysoft_graphic_IsfViewObjectContainerNME;
iriysoft_graphic_IsfViewObjectContainerNME.__name__ = "iriysoft.graphic.IsfViewObjectContainerNME";
iriysoft_graphic_IsfViewObjectContainerNME.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME];
iriysoft_graphic_IsfViewObjectContainerNME.RENDER = function(_target,_renderData,_matrix,_alpha) {
	if(!_target.get_visible() || _target.get_alpha() == 0 || _alpha == 0) {
		return;
	}
	var newAlpha = _target.get_alpha() * _alpha;
	_target.__tmpMatrix.copyFrom(_target.get_transformMatrix());
	_target.__tmpMatrix.concat(_matrix);
	var _g = 0;
	var _g1 = _target.m_childrens;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		c.before_render(_renderData,_target.__tmpMatrix,newAlpha);
		c.render(_renderData,_target.__tmpMatrix,newAlpha);
		c.after_render(_renderData,_target.__tmpMatrix,newAlpha);
	}
};
iriysoft_graphic_IsfViewObjectContainerNME.IsParentsCanceled = function(v) {
	if(v == null) {
		return false;
	}
	if(js_Boot.__implements(v,iriysoft_graphic_IIsfViewObjectContainer)) {
		var cont = js_Boot.__cast(v , iriysoft_graphic_IIsfViewObjectContainer);
		if(cont.IsCancelEvent()) {
			return true;
		}
	}
	return iriysoft_graphic_IsfViewObjectContainerNME.IsParentsCanceled(v.get_parent());
};
iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_DOWN = function(_target,gx,gy,btn_id) {
	_target.cancel_event_ = false;
	if(!_target.touchable) {
		return false;
	}
	if(!_target.get_visible()) {
		return false;
	}
	if(_target.touchGroup) {
		return _target.touch_object_.touchDown(gx,gy,btn_id,0);
	}
	var i = _target.get_numChildren() - 1;
	while(i >= 0) {
		var child = _target.getChildAt(i);
		var curRes = (js_Boot.__cast(child , iriysoft_graphic_IIsfViewObjectNME)).checkTouchDown(gx,gy,btn_id);
		if(iriysoft_graphic_IsfViewObjectContainerNME.IsParentsCanceled(child)) {
			return false;
		}
		if(curRes) {
			if(!_target.disposed) {
				_target.touch_object_.touchDown(gx,gy,btn_id,1);
			}
			return true;
		}
		--i;
	}
	return false;
};
iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_UP = function(_target,gx,gy,btn_id) {
	_target.cancel_event_ = false;
	if(!_target.touchable) {
		return false;
	}
	if(!_target.get_visible()) {
		return false;
	}
	if(_target.touchGroup) {
		return _target.touch_object_.touchUp(gx,gy,btn_id,0);
	}
	var i = _target.get_numChildren() - 1;
	while(i >= 0) {
		var child = _target.getChildAt(i);
		var curRes = (js_Boot.__cast(child , iriysoft_graphic_IIsfViewObjectNME)).checkTouchUp(gx,gy,btn_id);
		if(iriysoft_graphic_IsfViewObjectContainerNME.IsParentsCanceled(child)) {
			return false;
		}
		if(curRes) {
			if(!_target.disposed) {
				_target.touch_object_.touchUp(gx,gy,btn_id,1);
			}
			return true;
		}
		--i;
	}
	return false;
};
iriysoft_graphic_IsfViewObjectContainerNME.UPDATE_MOVE = function(_target,gx,gy) {
	_target.cancel_event_ = false;
	if(!_target.touchable) {
		return false;
	}
	if(!_target.get_visible()) {
		return false;
	}
	if(_target.touchGroup) {
		return _target.touch_object_.updateMove(gx,gy,0);
	}
	var i = _target.get_numChildren() - 1;
	while(i >= 0) {
		var child = _target.getChildAt(i);
		var curRes = (js_Boot.__cast(child , iriysoft_graphic_IIsfViewObjectNME)).updateMove(gx,gy);
		if(iriysoft_graphic_IsfViewObjectContainerNME.IsParentsCanceled(child)) {
			return false;
		}
		if(curRes) {
			if(!_target.disposed) {
				_target.touch_object_.updateMove(gx,gy,1);
			}
			return true;
		}
		--i;
	}
	return false;
};
iriysoft_graphic_IsfViewObjectContainerNME.__super__ = iriysoft_graphic_IsfViewObjectContainer;
iriysoft_graphic_IsfViewObjectContainerNME.prototype = $extend(iriysoft_graphic_IsfViewObjectContainer.prototype,{
	customDispose: function() {
		this.DisposeTilemapTextData();
		this.DisposeTextData();
		iriysoft_graphic_IsfViewObjectContainer.prototype.customDispose.call(this);
	}
	,text_root_: null
	,bitmaps_: null
	,bitmap_push_index_: null
	,SetTextRoot: function() {
		if(this.text_root_) {
			return;
		}
		this.text_root_ = true;
		this.bitmaps_ = [];
	}
	,ResetTextRoot: function() {
		if(!this.text_root_) {
			return;
		}
		this.DisposeTextData();
		this.text_root_ = false;
	}
	,IsTextRoot: function() {
		return this.text_root_;
	}
	,DisposeTextData: function() {
		if(!this.text_root_) {
			return;
		}
		var _g = 0;
		var _g1 = this.bitmaps_;
		while(_g < _g1.length) {
			var bitmap = _g1[_g];
			++_g;
			if(bitmap == null) {
				break;
			}
			if(bitmap.parent != null) {
				bitmap.parent.removeChild(bitmap);
			}
		}
		this.bitmaps_ = null;
	}
	,RenderText: function(bitmap) {
		if(this.bitmap_push_index_ >= this.bitmaps_.length) {
			this.bitmaps_.push(bitmap);
		} else {
			this.bitmaps_[this.bitmap_push_index_] = bitmap;
		}
		++this.bitmap_push_index_;
	}
	,tilemap_text_root_: null
	,tiles_pool_: null
	,backpack_: null
	,tilemap_text_bd_: null
	,tileset_: null
	,tilemap_: null
	,SetTilemapTextRoot: function(width,height) {
		if(this.tilemap_text_root_) {
			return;
		}
		this.tilemap_text_root_ = true;
		this.tiles_pool_ = new Pool_$openfl_$display_$Tile();
		this.backpack_ = new Backpack(width,height);
		this.tilemap_text_bd_ = new openfl_display_BitmapData(1,1,true,0);
		this.tileset_ = new openfl_display_Tileset(null);
		this.tileset_.set_bitmapData(this.tilemap_text_bd_);
		var render_rect = GlobalBase.GetRenderRect();
		this.tilemap_ = new openfl_display_Tilemap(render_rect.width | 0,render_rect.height | 0);
		this.tilemap_.set_tileset(this.tileset_);
		if(iriysoft_graphic_IsfRenderDataNME.tilemap_shader != null) {
			this.tilemap_.set_shader(iriysoft_graphic_IsfRenderDataNME.tilemap_shader);
		}
	}
	,ResetTilemapTextRoot: function() {
		if(!this.tilemap_text_root_) {
			return;
		}
		this.DisposeTilemapTextData();
		this.tilemap_text_root_ = false;
	}
	,IsTilemapTextRoot: function() {
		return this.tilemap_text_root_;
	}
	,DisposeTilemapTextData: function() {
		if(!this.tilemap_text_root_) {
			return;
		}
		this.tiles_pool_.Dispose();
		this.tiles_pool_ = null;
		this.backpack_.Dispose();
		this.backpack_ = null;
		this.tilemap_text_bd_.dispose();
		this.tilemap_text_bd_ = null;
		this.tilemap_.removeTiles();
		if(this.tilemap_.parent != null) {
			this.tilemap_.parent.removeChild(this.tilemap_);
		}
		this.tilemap_.set_tileset(null);
		this.tilemap_ = null;
		this.tileset_.set_bitmapData(null);
		this.tileset_ = null;
	}
	,AllocTilemapText: function(id,width,height) {
		if(id != -1) {
			this.backpack_.Free(id);
		}
		var backpack_id = this.backpack_.Alloc(width,height);
		var backpack_rc = this.backpack_.GetBounds();
		if(this.tilemap_text_bd_.width < backpack_rc.width || this.tilemap_text_bd_.height < backpack_rc.height) {
			var backpack_new = this.backpack_.PackNew(this.backpack_.width(),this.backpack_.height());
			var backpack_new_rc = backpack_new.GetBounds();
			var bd_new = new openfl_display_BitmapData(backpack_new_rc.width | 0,backpack_new_rc.height | 0,true,0);
			var elems_new = backpack_new.GetElems();
			var _g = 0;
			while(_g < elems_new.length) {
				var elem = elems_new[_g];
				++_g;
				if(elem.id == backpack_id) {
					continue;
				}
				var src_rc = this.backpack_.GetRect(elem.id);
				bd_new.copyPixels(this.tilemap_text_bd_,src_rc,new openfl_geom_Point(elem.rc.x,elem.rc.y));
			}
			this.tilemap_text_bd_.dispose();
			this.tilemap_text_bd_ = bd_new;
			this.backpack_.Dispose();
			this.backpack_ = backpack_new;
			this.tileset_.set_bitmapData(this.tilemap_text_bd_);
		}
		return backpack_id;
	}
	,DrawTilemapText: function(id,bd) {
		var src_rc = this.backpack_.GetRect(id);
		this.tilemap_text_bd_.copyPixels(bd,new openfl_geom_Rectangle(0,0,bd.width,bd.height),new openfl_geom_Point(src_rc.x,src_rc.y));
	}
	,FreeTilemapText: function(id) {
		if(this.backpack_ != null) {
			this.backpack_.Free(id);
		}
	}
	,RenderTilemapText: function(id) {
		if(this.tilemap_ == null) {
			return null;
		}
		var tile = this.tiles_pool_.Alloc();
		if(tile == null) {
			tile = new openfl_display_Tile();
		}
		tile.set_id(id);
		tile.set_rect(this.backpack_.GetRect(id));
		this.tilemap_.addTile(tile);
		return tile;
	}
	,render: function(_renderData,_matrix,_alpha) {
		if(this.text_root_) {
			var _g = 0;
			var _g1 = this.bitmaps_.length;
			while(_g < _g1) {
				var i = _g++;
				this.bitmaps_[i] = null;
			}
			this.bitmap_push_index_ = 0;
		}
		if(this.tilemap_text_root_) {
			var _g2 = 0;
			var _g11 = this.tilemap_.get_numTiles();
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.tiles_pool_.Free(this.tilemap_.getTileAt(i1));
			}
			this.tilemap_.removeTiles();
		}
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
		if(this.text_root_) {
			var _g3 = 0;
			var _g12 = this.bitmaps_;
			while(_g3 < _g12.length) {
				var bitmap = _g12[_g3];
				++_g3;
				if(bitmap == null) {
					break;
				}
				_renderData.AddDisplaObject(bitmap);
			}
		}
		if(this.tilemap_text_root_) {
			var _g4 = 0;
			var _g13 = this.tilemap_.get_numTiles();
			while(_g4 < _g13) {
				var i2 = _g4++;
				var tile = this.tilemap_.getTileAt(i2);
				tile.set_rect(this.backpack_.GetRect(tile.get_id()));
				tile.set_id(-1);
			}
			_renderData.AddDisplaObject(this.tilemap_);
		}
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_DOWN(this,_globalX,_globalY,_buttonId);
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_UP(this,_globalX,_globalY,_buttonId);
	}
	,updateMove: function(_globalX,_globalY) {
		return iriysoft_graphic_IsfViewObjectContainerNME.UPDATE_MOVE(this,_globalX,_globalY);
	}
	,__class__: iriysoft_graphic_IsfViewObjectContainerNME
});
var iriysoft_graphic_IIsfSprite = function() { };
$hxClasses["iriysoft.graphic.IIsfSprite"] = iriysoft_graphic_IIsfSprite;
iriysoft_graphic_IIsfSprite.__name__ = "iriysoft.graphic.IIsfSprite";
iriysoft_graphic_IIsfSprite.__isInterface__ = true;
iriysoft_graphic_IIsfSprite.__interfaces__ = [iriysoft_graphic_IIsfViewObjectContainer];
var iriysoft_graphic_IsfSpriteNME = function() {
	iriysoft_graphic_IsfViewObjectContainerNME.call(this);
};
$hxClasses["iriysoft.graphic.IsfSpriteNME"] = iriysoft_graphic_IsfSpriteNME;
iriysoft_graphic_IsfSpriteNME.__name__ = "iriysoft.graphic.IsfSpriteNME";
iriysoft_graphic_IsfSpriteNME.__interfaces__ = [iriysoft_graphic_IIsfSprite];
iriysoft_graphic_IsfSpriteNME.__super__ = iriysoft_graphic_IsfViewObjectContainerNME;
iriysoft_graphic_IsfSpriteNME.prototype = $extend(iriysoft_graphic_IsfViewObjectContainerNME.prototype,{
	__class__: iriysoft_graphic_IsfSpriteNME
});
var RenderLayerNME = function(_atlasNames,_backAlpha,_backColor,width,height) {
	if(height == null) {
		height = 768;
	}
	if(width == null) {
		width = 1024;
	}
	if(_backColor == null) {
		_backColor = 0;
	}
	if(_backAlpha == null) {
		_backAlpha = -1.0;
	}
	this.m_backAlpha = -1;
	iriysoft_graphic_IsfSpriteNME.call(this);
	this.signalMove = new iriysoft_signal_IsfSignal2();
	this.atlasNames = _atlasNames;
	this.image = new openfl_display_Sprite();
	this.renderData = new iriysoft_graphic_IsfRenderDataNME(new openfl_display_Sprite());
	this.enableBack(_backAlpha >= 0,width,height,_backColor,_backAlpha);
	this.image.addChild(this.get_renderPlace());
};
$hxClasses["RenderLayerNME"] = RenderLayerNME;
RenderLayerNME.__name__ = "RenderLayerNME";
RenderLayerNME.__interfaces__ = [IRenderLayer];
RenderLayerNME.__super__ = iriysoft_graphic_IsfSpriteNME;
RenderLayerNME.prototype = $extend(iriysoft_graphic_IsfSpriteNME.prototype,{
	image: null
	,renderData: null
	,renderPlace: null
	,get_renderPlace: function() {
		return this.renderData.renderPlace;
	}
	,back: null
	,m_backAlpha: null
	,get_backAlpha: function() {
		return this.m_backAlpha;
	}
	,set_backAlpha: function(_alpha) {
		this.m_backAlpha = this.hasBack() ? this.back.set_alpha(_alpha) : -1;
		return this.m_backAlpha;
	}
	,atlasNames: null
	,signalMove: null
	,hasBack: function() {
		return this.back != null;
	}
	,set_visible: function(_visible) {
		var _g = 0;
		var _g1 = this.image.get_numChildren();
		while(_g < _g1) {
			var chn = _g++;
			this.image.getChildAt(chn).set_visible(_visible);
		}
		return iriysoft_graphic_IsfSpriteNME.prototype.set_visible.call(this,_visible);
	}
	,customDispose: function() {
		this.back = null;
		if(this.image != null) {
			GlobalBase.destroyAllBitmap(this.image);
			if(this.image.parent != null) {
				this.image.parent.removeChild(this.image);
			}
			this.image = null;
		}
		if(this.renderData != null) {
			this.renderData.dispose();
			this.renderData = null;
		}
		if(this.signalMove != null) {
			this.signalMove.dispose();
			this.signalMove = null;
		}
		iriysoft_graphic_IsfSpriteNME.prototype.customDispose.call(this);
	}
	,set_alpha: function(_alpha) {
		this.image.set_alpha(_alpha);
		return iriysoft_graphic_IsfSpriteNME.prototype.set_alpha.call(this,_alpha);
	}
	,processRender: function(viewManager) {
		viewManager.preprender(this,this.renderData);
		var render_info = viewManager.render(this.renderData);
		var log = "";
		log = (render_info.draw_calls == null ? "null" : "" + render_info.draw_calls) + ":" + (render_info.draw_tiles == null ? "null" : "" + render_info.draw_tiles);
		return log;
	}
	,eventUp: function(_x,_y,_buttonId) {
		return this.checkTouchUp(_x,_y,_buttonId);
	}
	,eventDown: function(_x,_y,_buttonId) {
		this.signalTouchDown.dispatch(this,_x,_y,_buttonId);
		if(!this.checkTouchDown(_x,_y,_buttonId)) {
			return this.hasBack();
		} else {
			return true;
		}
	}
	,eventMove: function(_x,_y) {
		this.signalMove.dispatch(_x,_y);
		if(!this.updateMove(_x,_y)) {
			return this.hasBack();
		} else {
			return true;
		}
	}
	,eventClick: function(_x,_y,_buttonId) {
		this.signalTouch.dispatch(this,_x,_y,_buttonId);
		return this.get_backAlpha() > 0;
	}
	,enableBack: function(_enable,_width,_height,_color,_alpha) {
		if(_alpha == null) {
			_alpha = 0;
		}
		if(_color == null) {
			_color = 0;
		}
		if(this.back != null) {
			if(this.back.parent != null) {
				this.back.parent.removeChild(this.back);
			}
			this.back = null;
		}
		if(_enable) {
			this.back = new openfl_display_Sprite();
			this.back.get_graphics().beginFill(_color);
			this.back.get_graphics().drawRect(0,0,_width,this.get_height());
			this.back.get_graphics().endFill();
			this.image.addChildAt(this.back,0);
		}
		this.set_backAlpha(_alpha);
	}
	,__class__: RenderLayerNME
	,__properties__: $extend(iriysoft_graphic_IsfSpriteNME.prototype.__properties__,{set_backAlpha:"set_backAlpha",get_backAlpha:"get_backAlpha",get_renderPlace:"get_renderPlace"})
});
var SaveData = function(id) {
	this.save_data = null;
	this.was_empty_ = false;
	this.id_ = null;
	this.id_ = id;
	this.InitSaveData();
};
$hxClasses["SaveData"] = SaveData;
SaveData.__name__ = "SaveData";
SaveData.prototype = {
	InitSaveData: function() {
		this.save_data = { lastsoundValue : 100, lastmusicValue : 100, soundValue : 1, musicValue : 1};
	}
	,Load: function() {
		try {
			var shared = openfl_net_SharedObject.getLocal(this.id_);
			if(shared.data.save_data == null) {
				this.was_empty_ = true;
			} else {
				this.ApplySave(JSON.parse(shared.data.save_data),this.save_data);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace("SaveData::Load exception: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),{ fileName : "src/SaveData.hx", lineNumber : 35, className : "SaveData", methodName : "Load"});
		}
	}
	,Save: function() {
		try {
			var shared = openfl_net_SharedObject.getLocal(this.id_);
			shared.data.save_data = JSON.stringify(this.save_data);
			shared.flush();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace("SaveData::Save exception: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),{ fileName : "src/SaveData.hx", lineNumber : 45, className : "SaveData", methodName : "Save"});
		}
	}
	,ApplySave: function(from,to) {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var field_name = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(to,field_name)) {
				continue;
			}
			var field_val = Reflect.field(from,field_name);
			if(Reflect.isObject(field_val)) {
				this.ApplySave(field_val,Reflect.field(to,field_name));
			} else {
				to[field_name] = field_val;
			}
		}
	}
	,was_empty: function() {
		return this.was_empty_;
	}
	,data: function() {
		return this.save_data;
	}
	,id_: null
	,was_empty_: null
	,save_data: null
	,__class__: SaveData
};
var ScreenManager = function() {
	this.m_lastHeight = -1;
	this.m_lastWidth = -1;
	iriysoft_core_IsfBaseObject.call(this);
	this.m_screensPool = [];
};
$hxClasses["ScreenManager"] = ScreenManager;
ScreenManager.__name__ = "ScreenManager";
ScreenManager.__super__ = iriysoft_core_IsfBaseObject;
ScreenManager.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	m_screensPool: null
	,topState: null
	,get_topState: function() {
		if(this.m_screensPool.length > 0) {
			return this.m_screensPool[this.m_screensPool.length - 1];
		} else {
			return null;
		}
	}
	,getScreensPool: function() {
		return this.m_screensPool;
	}
	,customDispose: function() {
		if(this.m_screensPool != null) {
			var _g = 0;
			var _g1 = this.m_screensPool;
			while(_g < _g1.length) {
				var scr = _g1[_g];
				++_g;
				if(scr != null) {
					scr.dispose();
				}
			}
			this.m_screensPool = null;
		}
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeStep);
		var _g = 0;
		var _g1 = this.m_screensPool;
		while(_g < _g1.length) {
			var scr = _g1[_g];
			++_g;
			scr.process(_timeStep);
		}
		var screen;
		var screenIndex = this.m_screensPool.length;
		var modal = false;
		while(--screenIndex >= 0 && modal == false) {
			screen = this.m_screensPool[screenIndex];
			if(screen.state == 2) {
				screen.processScreen(_timeStep);
			}
			modal = screen.modalMode;
		}
	}
	,addScreen: function(_screen,_behindTopScreen) {
		if(_behindTopScreen == null) {
			_behindTopScreen = false;
		}
		if(_behindTopScreen) {
			this.m_screensPool.splice(this.m_screensPool.length - 1,0,_screen);
		} else {
			this.m_screensPool.push(_screen);
		}
		_screen.signalInitAfterLoadingComplete.addSlot($bind(this,this.onInitAfterLoadingComplete));
		_screen.signalDisposed.addSlot($bind(this,this.onScreenDisposed));
		_screen.addAllLayersAtDisplay();
	}
	,removeScreen: function(_screen) {
		if(HxOverrides.remove(this.m_screensPool,_screen)) {
			_screen.signalDisposed.removeSlot($bind(this,this.onScreenDisposed));
			_screen.signalInitAfterLoadingComplete.removeSlot($bind(this,this.onInitAfterLoadingComplete));
		}
	}
	,onScreenDisposed: function(_obj) {
		this.removeScreen(js_Boot.__cast(_obj , GameScreen));
	}
	,onInitAfterLoadingComplete: function(_screen) {
		if(this.m_lastWidth < 1 || this.m_lastHeight < 1) {
			return;
		}
		_screen.resize(this.m_lastWidth,this.m_lastHeight);
	}
	,resize: function(_newWidth,_newHeight) {
		this.m_lastWidth = _newWidth;
		this.m_lastHeight = _newHeight;
		var _g = 0;
		var _g1 = this.m_screensPool;
		while(_g < _g1.length) {
			var scr = _g1[_g];
			++_g;
			scr.resize(_newWidth,_newHeight);
		}
	}
	,processCommand: function(_cmd,_val) {
		var screen;
		var screenIndex = this.m_screensPool.length;
		var modal = false;
		while(--screenIndex >= 0 && modal == false) {
			screen = this.m_screensPool[screenIndex];
			screen.processCommand(_cmd,_val);
			modal = screen.modalMode;
		}
	}
	,m_lastWidth: null
	,m_lastHeight: null
	,__class__: ScreenManager
	,__properties__: $extend(iriysoft_core_IsfBaseObject.prototype.__properties__,{get_topState:"get_topState"})
});
var ScreenTransitionBlackAlpha = function(_vManager) {
	GameScreen.call(this,_vManager,[],0);
	this.refLayer = this.visualManager.get_systemLayer();
	this.createWaitAnimation();
	this.startLoading();
};
$hxClasses["ScreenTransitionBlackAlpha"] = ScreenTransitionBlackAlpha;
ScreenTransitionBlackAlpha.__name__ = "ScreenTransitionBlackAlpha";
ScreenTransitionBlackAlpha.__super__ = GameScreen;
ScreenTransitionBlackAlpha.prototype = $extend(GameScreen.prototype,{
	m_curAlpha: null
	,m_stepAlpha: null
	,m_endAlpha: null
	,ref_curState: null
	,ref_newState: null
	,refLayer: null
	,customDispose: function() {
		this.ref_curState = null;
		this.ref_newState = null;
		this.refLayer.set_alpha(1);
		this.refLayer.enableBack(false,0,0);
		this.refLayer = null;
		GameScreen.prototype.customDispose.call(this);
	}
	,createWaitAnimation: function() {
	}
	,processScreen: function(_timeStep) {
		GameScreen.prototype.processScreen.call(this,_timeStep);
		if(this.m_curAlpha == this.m_endAlpha) {
			if(this.m_endAlpha == 1) {
				this.finishTransition(_timeStep);
			} else {
				this.dispose();
			}
			return;
		}
		var nextAlpha = this.m_curAlpha + this.m_stepAlpha;
		if(this.m_curAlpha > this.m_endAlpha && nextAlpha <= this.m_endAlpha || this.m_curAlpha < this.m_endAlpha && nextAlpha >= this.m_endAlpha) {
			this.m_curAlpha = this.m_endAlpha;
			this.refLayer.set_alpha(this.m_endAlpha);
			if(this.m_endAlpha == 1) {
				if(this.ref_curState != null) {
					this.ref_curState.dispose();
					this.ref_curState = null;
				}
				this.ref_newState.startLoading();
			}
			return;
		}
		this.m_curAlpha = nextAlpha;
		this.refLayer.set_alpha(this.m_curAlpha);
	}
	,startTransition: function(_curState,_newState) {
		this.ref_curState = _curState;
		this.ref_newState = _newState;
		this.m_stepAlpha = 0.1;
		this.m_curAlpha = this.m_stepAlpha;
		this.m_endAlpha = 1.0;
		this.refLayer.set_alpha(0.0);
	}
	,finishTransition: function(_timeStep) {
		this.ref_curState = null;
		this.m_stepAlpha = -0.1;
		this.m_curAlpha = 1.0 + this.m_stepAlpha;
		this.m_endAlpha = 0.0;
		this.refLayer.set_alpha(1.0);
	}
	,resize: function(_newWidth,_newHeight) {
		GameScreen.prototype.resize.call(this,_newWidth,_newHeight);
		this.refLayer.enableBack(true,_newWidth,_newHeight,0,1);
	}
	,__class__: ScreenTransitionBlackAlpha
});
var SoundConst = function() { };
$hxClasses["SoundConst"] = SoundConst;
SoundConst.__name__ = "SoundConst";
SoundConst.Init = function() {
	if(SoundConst.sounds_ != null) {
		return;
	}
	SoundConst.sounds_ = new haxe_ds_IntMap();
	SoundConst.sounds_string_ = new haxe_ds_StringMap();
	SoundConst.FillSounds();
};
SoundConst.SetSound = function(sound_id,sound_path,volume,loop,start_time,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(start_time == null) {
		start_time = 0;
	}
	if(volume == null) {
		volume = 1;
	}
	var sound_info = { sound_id : sound_id, sound_path : sound_path, start_time : start_time, volume : volume, panning : panning, loop : loop};
	SoundConst.sounds_.h[sound_id] = sound_info;
	var key = sound_path.split("sounds/")[1].split(".mp3")[0];
	var _this = SoundConst.sounds_string_;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,sound_id);
	} else {
		_this.h[key] = sound_id;
	}
};
SoundConst.FillSounds = function() {
	SoundConst.SetSound(50,"sounds/MusicSnd" + ".mp3",0.6,true);
	SoundConst.SetSound(100,"sounds/SwitchFiremodeSnd" + ".mp3",1,false);
	SoundConst.SetSound(101,"sounds/Bell1Snd" + ".mp3",1,false);
	SoundConst.SetSound(102,"sounds/Bell2Snd" + ".mp3",1,false);
	SoundConst.SetSound(103,"sounds/BulletBody1Snd" + ".mp3",0.5,false);
	SoundConst.SetSound(104,"sounds/BulletBody2Snd" + ".mp3",0.5,false);
	SoundConst.SetSound(105,"sounds/BulletBody3Snd" + ".mp3",0.5,false);
	SoundConst.SetSound(106,"sounds/BulletSand1Snd" + ".mp3",0.15,false);
	SoundConst.SetSound(107,"sounds/BulletSand2Snd" + ".mp3",0.15,false);
	SoundConst.SetSound(108,"sounds/BulletSand3Snd" + ".mp3",0.15,false);
	SoundConst.SetSound(109,"sounds/Explosion2Snd" + ".mp3",1.5,false);
	SoundConst.SetSound(110,"sounds/ExplosionSnd" + ".mp3",0.75,false);
	SoundConst.SetSound(111,"sounds/Friendly1Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(112,"sounds/Friendly2Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(113,"sounds/Friendly3Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(114,"sounds/ZombieDeath1Snd" + ".mp3",0.25,false);
	SoundConst.SetSound(115,"sounds/ZombieDeath2Snd" + ".mp3",0.25,false);
	SoundConst.SetSound(116,"sounds/ZombieDeath3Snd" + ".mp3",0.25,false);
	SoundConst.SetSound(200,"sounds/M4Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(201,"sounds/M79ExplosionSnd" + ".mp3",1.25,false);
	SoundConst.SetSound(202,"sounds/M79Snd" + ".mp3",1,false);
	SoundConst.SetSound(203,"sounds/MP5Snd" + ".mp3",0.3,false);
	SoundConst.SetSound(204,"sounds/PKMSnd" + ".mp3",0.75,false);
	SoundConst.SetSound(205,"sounds/PullTriggerSnd" + ".mp3",0.15,false);
	SoundConst.SetSound(206,"sounds/ReleaseTriggerSnd" + ".mp3",0.15,false);
	SoundConst.SetSound(208,"sounds/Reload1Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(209,"sounds/Reload2Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(210,"sounds/Reload3Snd" + ".mp3",0.75,false);
	SoundConst.SetSound(211,"sounds/RemingtonSnd" + ".mp3",0.85,false);
	SoundConst.SetSound(212,"sounds/ScarHSnd" + ".mp3",0.75,false);
	SoundConst.SetSound(213,"sounds/SpringfieldSnd" + ".mp3",0.95,false);
	SoundConst.SetSound(214,"sounds/Ak74Snd" + ".mp3",0.5,false);
	SoundConst.SetSound(215,"sounds/M9Snd" + ".mp3",1,false);
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var UiCreator = function() { };
$hxClasses["UiCreator"] = UiCreator;
UiCreator.__name__ = "UiCreator";
UiCreator.Contains = function(root,view) {
	if(root == null) {
		return false;
	}
	if(view == null) {
		return false;
	}
	if(root == view) {
		return true;
	}
	if(!js_Boot.__implements(root,iriysoft_graphic_IIsfViewObjectContainer)) {
		return false;
	}
	var cont = js_Boot.__cast(root , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		if(UiCreator.Contains(cont.getChildAt(i),view)) {
			return true;
		}
	}
	return false;
};
UiCreator.Find = function(view_object,name) {
	if(view_object == null) {
		return null;
	}
	if(name == null) {
		return null;
	}
	if(view_object.get_name() == name) {
		return view_object;
	}
	var cont = null;
	if(!js_Boot.__implements(view_object,iriysoft_graphic_IIsfViewObjectContainer)) {
		return null;
	}
	cont = js_Boot.__cast(view_object , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		var result = UiCreator.Find(cont.getChildAt(i),name);
		if(result != null) {
			return result;
		}
	}
	return null;
};
UiCreator.FindC = function(view_object,name) {
	var view = UiCreator.Find(view_object,name);
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return null;
	}
	return js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
};
UiCreator.FindA = function(view_object,name) {
	var view = UiCreator.Find(view_object,name);
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return null;
	}
	return js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
};
UiCreator.FindT = function(view_object,name) {
	var view = UiCreator.Find(view_object,name);
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		return null;
	}
	return js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
};
UiCreator.RawFind = function(ui,name) {
	if(ui == null) {
		return null;
	}
	if(ui.name == name) {
		return ui;
	}
	var childs = ui.childs;
	if(childs == null) {
		return null;
	}
	var _g = 0;
	while(_g < childs.length) {
		var child = childs[_g];
		++_g;
		var finded = UiCreator.RawFind(child,name);
		if(finded != null) {
			return finded;
		}
	}
	return null;
};
UiCreator.Create = function(ui,view_manager) {
	var view = UiCreator.Fill(ui,view_manager);
	return view;
};
UiCreator.createTextField = function(data,view_manager) {
	var txt = view_manager.createTextField();
	txt.set_text(data.text);
	txt.set_width(data.text_width);
	txt.set_height(data.text_height);
	txt.set_multiline(data.text_multiline);
	txt.set_wordWrap(data.word_wrap);
	var text_format = new iriysoft_graphic_IsfTextFormat();
	text_format.font = data.text_font;
	text_format.size = data.text_size;
	text_format.color = data.text_color;
	text_format.align = data.text_align;
	text_format.bold = data.text_bold;
	text_format.italic = data.text_italic;
	var key = text_format.font;
	var _this = UiCreator.FontsData;
	var font_data = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(font_data != null) {
		txt.fontMarginYCoef = font_data.add_margin_y_coef;
		txt.addLeading = font_data.add_leading;
	}
	var key1 = UiCreator.MapFonts.keys();
	while(key1.hasNext()) {
		var key2 = key1.next();
		var this1 = txt.mapFonts;
		var _this1 = UiCreator.MapFonts;
		var value = __map_reserved[key2] != null ? _this1.getReserved(key2) : _this1.h[key2];
		var _this2 = this1;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,value);
		} else {
			_this2.h[key2] = value;
		}
	}
	switch(data.text_align) {
	case "center":
		text_format.align = "center";
		break;
	case "justify":
		text_format.align = "justify";
		break;
	case "left":
		text_format.align = "left";
		break;
	case "right":
		text_format.align = "right";
		break;
	}
	txt.set_textFormat(text_format);
	UiCreator.SetFilters(txt,data,view_manager);
	return txt;
};
UiCreator.SetFilters = function(object,data,view_manager) {
	if(data.filters == null) {
		return;
	}
	var filters = [];
	var _g = 0;
	var _g1 = data.filters.length;
	while(_g < _g1) {
		var i = _g++;
		var filter_data = data.filters[i];
		var filter = null;
		if(filter_data.type == "glow") {
			filter = new openfl_filters_GlowFilter(filter_data.color,filter_data.alpha,filter_data.blurX,filter_data.blurY,filter_data.strength,filter_data.quality,filter_data.inner,filter_data.knockout);
		}
		if(filter != null) {
			filters.push(filter);
		}
	}
	object.set_filters(filters);
};
UiCreator.createFace = function(name,data,view_manager) {
	if(data == null) {
		return null;
	}
	var face = UiCreator.Fill(data,view_manager);
	face.set_name(name);
	return face;
};
UiCreator.createButton = function(data,view_manager) {
	var up = UiCreator.createFace("face_up",data.button_up,view_manager);
	var over = UiCreator.createFace("face_over",data.button_over,view_manager);
	var down = UiCreator.createFace("face_down",data.button_down,view_manager);
	var disabled = UiCreator.createFace("face_disabled",data.button_disabled,view_manager);
	var hit = UiCreator.createFace("face_hit",data.button_hit,view_manager);
	if(hit.get_width() * hit.get_scaleX() < 2 && hit.get_height() * hit.get_scaleY() < 2) {
		hit = null;
	}
	return view_manager.createButton(up,down,over,disabled,hit);
};
UiCreator.CreateViewObject = function(ui,view_manager) {
	var view_object = null;
	var true_view_name = ui.name;
	switch(ui.type) {
	case "anim":
		var anim = view_manager.createAnimation(ui.class_name);
		view_object = anim;
		view_object.userData.ui_creator_class_name_ = ui.class_name;
		break;
	case "button":
		view_object = UiCreator.createButton(ui,view_manager);
		break;
	case "sprite":
		var view_name = ui.name;
		var placeholder_index = view_name.indexOf("_PLACEHOLDER_");
		var universal_index = view_name.indexOf("_UNIVERSAL");
		if(placeholder_index != -1) {
			var anim_name = HxOverrides.substr(view_name,0,placeholder_index);
			true_view_name = HxOverrides.substr(view_name,placeholder_index + 13,null);
			var anim1 = view_manager.createAnimation(anim_name);
			view_object = anim1;
		} else if(universal_index != -1) {
			view_object = new iriysoft_graphic_IsfUniversalAnimation();
		} else {
			var sprite = view_manager.createSprite();
			view_object = sprite;
		}
		break;
	case "text":
		view_object = UiCreator.createTextField(ui,view_manager);
		break;
	}
	if(view_object == null) {
		return null;
	}
	view_object.set_alpha(ui.alpha);
	view_object.set_name(true_view_name);
	var matrix = new openfl_geom_Matrix(ui.matrix_a,ui.matrix_b,ui.matrix_c,ui.matrix_d,ui.matrix_tx,ui.matrix_ty);
	view_object.set_x(matrix.tx);
	view_object.set_y(matrix.ty);
	var px = matrix.deltaTransformPoint(new openfl_geom_Point(0,1));
	var py = matrix.deltaTransformPoint(new openfl_geom_Point(1,0));
	var skew_x = 180 / Math.PI * Math.atan2(px.y,px.x) - 90;
	var skew_y = 180 / Math.PI * Math.atan2(py.y,py.x);
	if(Math.abs(skew_x) < 0.0000000001) {
		skew_x = 0;
	}
	if(Math.abs(skew_y) < 0.0000000001) {
		skew_y = 0;
	}
	var scale_x = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
	var scale_y = Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d);
	view_object.set_scaleX(scale_x);
	view_object.set_scaleY(scale_y);
	view_object.set_skewX(skew_x * Math.PI / 180);
	view_object.set_skewY(skew_y * Math.PI / 180);
	return view_object;
};
UiCreator.DeltaTransformPoint = function(matrix,point) {
	var dx = point.x * matrix.a + point.y * matrix.c;
	var dy = point.x * matrix.b + point.y * matrix.d;
	return new openfl_geom_Point(dx,dy);
};
UiCreator.decomposeMatrix = function(matrix) {
};
UiCreator.Fill = function(ui,view_manager) {
	var view_object = UiCreator.CreateViewObject(ui,view_manager);
	if(ui.childs == null || ui.childs.length == 0) {
		return view_object;
	}
	var cont = js_Boot.__cast(view_object , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = ui.childs.length;
	while(_g < _g1) {
		var i = _g++;
		var child_data = ui.childs[i];
		var child_view = UiCreator.Fill(child_data,view_manager);
		if(child_view != null) {
			cont.addChild(child_view);
		}
	}
	if(cont.get_name() != null) {
		var universal_index = cont.get_name().indexOf("_UNIVERSAL");
		if(universal_index != -1) {
			var true_view_name = HxOverrides.substr(cont.get_name(),0,universal_index);
			var anim_u = js_Boot.__cast(view_object , iriysoft_graphic_IsfUniversalAnimation);
			anim_u.set_animation(js_Boot.__cast(anim_u.getChildByName("anim_") , iriysoft_graphic_IsfPartsAnimationNME));
			var parts_c = js_Boot.__cast(anim_u.getChildByName("cont_") , iriysoft_graphic_IIsfViewObjectContainer);
			if(parts_c.get_parent() != null) {
				parts_c.get_parent().removeChild(parts_c);
			}
			anim_u.ApplyCont(parts_c);
			anim_u.set_name(true_view_name);
		}
	}
	return view_object;
};
var VirtualTouch = function() {
	this.m_currentPosition = new openfl_geom_Point(1000,444);
	this._yDelta = 0;
	this._xDelta = 0;
	this._y = 444;
	this._x = 1000;
};
$hxClasses["VirtualTouch"] = VirtualTouch;
VirtualTouch.__name__ = "VirtualTouch";
VirtualTouch.prototype = {
	_x: null
	,_y: null
	,_xDelta: null
	,_yDelta: null
	,m_currentPosition: null
	,x: null
	,y: null
	,updatePosition: function(_x,_y) {
		VirtualTouch.stageX = _x;
		VirtualTouch.stageY = _y;
	}
	,get_x: function() {
		if(VirtualTouch.TOUCH_DOWN) {
			this._x = VirtualTouch.stageX;
			this._y = VirtualTouch.stageY;
			VirtualTouch.TOUCH_DOWN = false;
		}
		if(this._x != VirtualTouch.stageX) {
			this._xDelta = VirtualTouch.stageX - this._x;
			this._x = VirtualTouch.stageX;
			this.m_currentPosition.x += this._xDelta * 0.7;
		}
		if(this.m_currentPosition.x < 0) {
			this.m_currentPosition.x = 0;
		} else if(this.m_currentPosition.x > 1280) {
			this.m_currentPosition.x = 1280;
		}
		return this.m_currentPosition.x;
	}
	,get_y: function() {
		if(this._y != VirtualTouch.stageY) {
			this._yDelta = VirtualTouch.stageY - this._y;
			this._y = VirtualTouch.stageY;
			this.m_currentPosition.y += this._yDelta * 0.7;
		}
		if(this.m_currentPosition.y < 0) {
			this.m_currentPosition.y = 0;
		} else if(this.m_currentPosition.y > 800) {
			this.m_currentPosition.y = 800;
		}
		return this.m_currentPosition.y;
	}
	,__class__: VirtualTouch
	,__properties__: {get_y:"get_y",get_x:"get_x"}
};
var _$Pool_Elem_$old_$entities_$effects_$Effect = function(v) {
	this.val = null;
	this.next = -1;
	this.val = v;
};
$hxClasses["_Pool.Elem_old_entities_effects_Effect"] = _$Pool_Elem_$old_$entities_$effects_$Effect;
_$Pool_Elem_$old_$entities_$effects_$Effect.__name__ = "_Pool.Elem_old_entities_effects_Effect";
_$Pool_Elem_$old_$entities_$effects_$Effect.prototype = {
	next: null
	,val: null
	,__class__: _$Pool_Elem_$old_$entities_$effects_$Effect
};
var _$Pool_Elem_$old_$entities_$impact_$Bullet = function(v) {
	this.val = null;
	this.next = -1;
	this.val = v;
};
$hxClasses["_Pool.Elem_old_entities_impact_Bullet"] = _$Pool_Elem_$old_$entities_$impact_$Bullet;
_$Pool_Elem_$old_$entities_$impact_$Bullet.__name__ = "_Pool.Elem_old_entities_impact_Bullet";
_$Pool_Elem_$old_$entities_$impact_$Bullet.prototype = {
	next: null
	,val: null
	,__class__: _$Pool_Elem_$old_$entities_$impact_$Bullet
};
var _$Pool_Elem_$openfl_$display_$Tile = function(v) {
	this.val = null;
	this.next = -1;
	this.val = v;
};
$hxClasses["_Pool.Elem_openfl_display_Tile"] = _$Pool_Elem_$openfl_$display_$Tile;
_$Pool_Elem_$openfl_$display_$Tile.__name__ = "_Pool.Elem_openfl_display_Tile";
_$Pool_Elem_$openfl_$display_$Tile.prototype = {
	next: null
	,val: null
	,__class__: _$Pool_Elem_$openfl_$display_$Tile
};
var apiManager_AdEventType = $hxEnums["apiManager.AdEventType"] = { __ename__ : "apiManager.AdEventType", __constructs__ : ["START","FINISH","ERROR","LEVEL_START","LEVEL_FAIL","LEVEL_SUCCESS","TOTAL_SCORE","SHOW_AD","HAPPY_TIME","LOADING_START","LOADING_FINISH","LOADING_PROGRESS","NONE"]
	,START: {_hx_index:0,__enum__:"apiManager.AdEventType",toString:$estr}
	,FINISH: {_hx_index:1,__enum__:"apiManager.AdEventType",toString:$estr}
	,ERROR: {_hx_index:2,__enum__:"apiManager.AdEventType",toString:$estr}
	,LEVEL_START: {_hx_index:3,__enum__:"apiManager.AdEventType",toString:$estr}
	,LEVEL_FAIL: {_hx_index:4,__enum__:"apiManager.AdEventType",toString:$estr}
	,LEVEL_SUCCESS: {_hx_index:5,__enum__:"apiManager.AdEventType",toString:$estr}
	,TOTAL_SCORE: {_hx_index:6,__enum__:"apiManager.AdEventType",toString:$estr}
	,SHOW_AD: {_hx_index:7,__enum__:"apiManager.AdEventType",toString:$estr}
	,HAPPY_TIME: {_hx_index:8,__enum__:"apiManager.AdEventType",toString:$estr}
	,LOADING_START: {_hx_index:9,__enum__:"apiManager.AdEventType",toString:$estr}
	,LOADING_FINISH: {_hx_index:10,__enum__:"apiManager.AdEventType",toString:$estr}
	,LOADING_PROGRESS: {_hx_index:11,__enum__:"apiManager.AdEventType",toString:$estr}
	,NONE: {_hx_index:12,__enum__:"apiManager.AdEventType",toString:$estr}
};
var apiManager_AdEvent = function(_id,_data) {
	this.data = null;
	this.id = apiManager_AdEventType.NONE;
	this.id = _id;
	this.data = _data;
};
$hxClasses["apiManager.AdEvent"] = apiManager_AdEvent;
apiManager_AdEvent.__name__ = "apiManager.AdEvent";
apiManager_AdEvent.prototype = {
	id: null
	,data: null
	,dispose: function() {
		this.id = null;
		this.data = null;
	}
	,__class__: apiManager_AdEvent
};
var apiManager_IAchievementApi = function() { };
$hxClasses["apiManager.IAchievementApi"] = apiManager_IAchievementApi;
apiManager_IAchievementApi.__name__ = "apiManager.IAchievementApi";
apiManager_IAchievementApi.__isInterface__ = true;
apiManager_IAchievementApi.prototype = {
	submitAchievement: null
	,showAchievements: null
	,__class__: apiManager_IAchievementApi
};
var apiManager_IAdApi = function() { };
$hxClasses["apiManager.IAdApi"] = apiManager_IAdApi;
apiManager_IAdApi.__name__ = "apiManager.IAdApi";
apiManager_IAdApi.__isInterface__ = true;
apiManager_IAdApi.prototype = {
	isPreloadedAd: null
	,isPreloadedRewarded: null
	,isShowing: null
	,getSignalAd: null
	,showAd: null
	,showRewarded: null
	,preloadAd: null
	,preloadRewarded: null
	,__class__: apiManager_IAdApi
};
var apiManager_IAdEventAPI = function() { };
$hxClasses["apiManager.IAdEventAPI"] = apiManager_IAdEventAPI;
apiManager_IAdEventAPI.__name__ = "apiManager.IAdEventAPI";
apiManager_IAdEventAPI.__isInterface__ = true;
apiManager_IAdEventAPI.prototype = {
	isShowing: null
	,getSignalAd: null
	,sendEvent: null
	,__class__: apiManager_IAdEventAPI
};
var apiManager_IAnimation = function() { };
$hxClasses["apiManager.IAnimation"] = apiManager_IAnimation;
apiManager_IAnimation.__name__ = "apiManager.IAnimation";
apiManager_IAnimation.__isInterface__ = true;
apiManager_IAnimation.prototype = {
	showAnimation: null
	,__class__: apiManager_IAnimation
};
var apiManager_IScoreApi = function() { };
$hxClasses["apiManager.IScoreApi"] = apiManager_IScoreApi;
apiManager_IScoreApi.__name__ = "apiManager.IScoreApi";
apiManager_IScoreApi.__isInterface__ = true;
apiManager_IScoreApi.prototype = {
	submitScore: null
	,showLeaderboard: null
	,__class__: apiManager_IScoreApi
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g11 = l;
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) {
				var p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw new js__$Boot_HaxeError("No uncompress support");
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js__$Boot_HaxeError("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js__$Boot_HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var hxsignal_Signal = function() {
};
$hxClasses["hxsignal.Signal"] = hxsignal_Signal;
hxsignal_Signal.__name__ = "hxsignal.Signal";
hxsignal_Signal.prototype = {
	connect: function(slot,times,groupId,at) {
	}
	,isConnected: function(slot) {
		return false;
	}
	,block: function(slot,flag) {
	}
	,isBlocked: function(slot) {
		return false;
	}
	,disconnect: function(slot) {
		return false;
	}
	,disconnectAll: function() {
	}
	,disconnectGroup: function(id) {
		return false;
	}
	,numSlots: null
	,__class__: hxsignal_Signal
};
var hxsignal_ConnectionTimes = $hxEnums["hxsignal.ConnectionTimes"] = { __ename__ : "hxsignal.ConnectionTimes", __constructs__ : ["Once","Times","Forever"]
	,Once: {_hx_index:0,__enum__:"hxsignal.ConnectionTimes",toString:$estr}
	,Times: ($_=function(t) { return {_hx_index:1,t:t,__enum__:"hxsignal.ConnectionTimes",toString:$estr}; },$_.__params__ = ["t"],$_)
	,Forever: {_hx_index:2,__enum__:"hxsignal.ConnectionTimes",toString:$estr}
};
var hxsignal_ConnectPosition = $hxEnums["hxsignal.ConnectPosition"] = { __ename__ : "hxsignal.ConnectPosition", __constructs__ : ["AtBack","AtFront"]
	,AtBack: {_hx_index:0,__enum__:"hxsignal.ConnectPosition",toString:$estr}
	,AtFront: {_hx_index:1,__enum__:"hxsignal.ConnectPosition",toString:$estr}
};
var hxsignal_ds_TreeMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["hxsignal.ds.TreeMap"] = hxsignal_ds_TreeMap;
hxsignal_ds_TreeMap.__name__ = "hxsignal.ds.TreeMap";
hxsignal_ds_TreeMap.__super__ = haxe_ds_BalancedTree;
hxsignal_ds_TreeMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	firstKey: function() {
		var first = this.getFirstNode();
		if(first != null) {
			return first.key;
		} else {
			return null;
		}
	}
	,lastKey: function() {
		var last = this.getLastNode();
		if(last != null) {
			return last.key;
		} else {
			return null;
		}
	}
	,firstValue: function() {
		var first = this.getFirstNode();
		if(first != null) {
			return first.value;
		} else {
			return null;
		}
	}
	,lastValue: function() {
		var last = this.getLastNode();
		if(last != null) {
			return last.value;
		} else {
			return null;
		}
	}
	,getFirstNode: function() {
		var n = this.root;
		if(n != null) {
			while(n.left != null) n = n.left;
		}
		return n;
	}
	,getLastNode: function() {
		var n = this.root;
		if(n != null) {
			while(n.right != null) n = n.right;
		}
		return n;
	}
	,__class__: hxsignal_ds_TreeMap
});
var hxsignal_impl_Connection = function(signal,slot,times) {
	this.signal = signal;
	if(slot == null) {
		throw new js__$Boot_HaxeError("Slot cannot be null");
	}
	this.slot = slot;
	this.times = times;
	this.blocked = false;
	this.connected = true;
	this.calledTimes = 0;
};
$hxClasses["hxsignal.impl.Connection"] = hxsignal_impl_Connection;
hxsignal_impl_Connection.__name__ = "hxsignal.impl.Connection";
hxsignal_impl_Connection.prototype = {
	slot: null
	,times: null
	,calledTimes: null
	,blocked: null
	,connected: null
	,groupId: null
	,signal: null
	,__class__: hxsignal_impl_Connection
};
var hxsignal_impl_SignalBase = function() {
	this.slots = new hxsignal_impl_SlotMap();
};
$hxClasses["hxsignal.impl.SignalBase"] = hxsignal_impl_SignalBase;
hxsignal_impl_SignalBase.__name__ = "hxsignal.impl.SignalBase";
hxsignal_impl_SignalBase.prototype = {
	emitting: null
	,numSlots: null
	,get_numSlots: function() {
		return this.slots.get_length();
	}
	,slots: null
	,connect: function(slot,times,groupId,at) {
		if(times == null) {
			times = hxsignal_ConnectionTimes.Forever;
		}
		if(!this.updateConnection(slot,times)) {
			var conn = new hxsignal_impl_Connection(this,slot,times);
			this.slots.insert(conn,groupId,at);
		}
	}
	,updateConnection: function(slot,times,groupId,at) {
		var con = this.slots.get(slot);
		if(con == null) {
			return false;
		}
		if(groupId != null && con.groupId != groupId || at != null) {
			this.slots.disconnect(slot);
			return false;
		}
		con.times = times;
		con.calledTimes = 0;
		con.connected = true;
		return true;
	}
	,isConnected: function(slot) {
		return this.slots.has(slot);
	}
	,block: function(slot,flag) {
		var con = this.slots.get(slot);
		if(con == null) {
			return;
		}
		con.blocked = flag;
	}
	,isBlocked: function(slot) {
		var con = this.slots.get(slot);
		if(con == null) {
			return false;
		}
		return con.blocked;
	}
	,disconnect: function(slot) {
		return this.slots.disconnect(slot);
	}
	,disconnectAll: function() {
		if(this.emitting) {
			this.slots.disconnectAll();
		} else {
			this.slots.clear();
		}
	}
	,disconnectGroup: function(id) {
		return this.slots.disconnectGroup(id);
	}
	,__class__: hxsignal_impl_SignalBase
	,__properties__: {get_numSlots:"get_numSlots"}
};
var hxsignal_impl_Signal0 = function() {
	hxsignal_impl_SignalBase.call(this);
};
$hxClasses["hxsignal.impl.Signal0"] = hxsignal_impl_Signal0;
hxsignal_impl_Signal0.__name__ = "hxsignal.impl.Signal0";
hxsignal_impl_Signal0.__super__ = hxsignal_impl_SignalBase;
hxsignal_impl_Signal0.prototype = $extend(hxsignal_impl_SignalBase.prototype,{
	emit: function() {
		this.emitting = true;
		var g = this.slots.groups.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			var _g_head = g1.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var con = val;
				if(con.connected && !con.blocked) {
					con.calledTimes++;
					con.slot();
					if(!con.connected) {
						this.slots.disconnect(con.slot);
					}
					if(con.times == hxsignal_ConnectionTimes.Once) {
						con.times = hxsignal_ConnectionTimes.Times(1);
					}
					var _g = con.times;
					if(_g._hx_index == 1) {
						var t = _g.t;
						if(t <= con.calledTimes) {
							this.slots.disconnect(con.slot);
						}
					}
				}
			}
		}
		this.emitting = false;
	}
	,__class__: hxsignal_impl_Signal0
});
var hxsignal_impl_Signal1 = function() {
	hxsignal_impl_SignalBase.call(this);
};
$hxClasses["hxsignal.impl.Signal1"] = hxsignal_impl_Signal1;
hxsignal_impl_Signal1.__name__ = "hxsignal.impl.Signal1";
hxsignal_impl_Signal1.__super__ = hxsignal_impl_SignalBase;
hxsignal_impl_Signal1.prototype = $extend(hxsignal_impl_SignalBase.prototype,{
	emit: function(p1) {
		this.emitting = true;
		var g = this.slots.groups.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			var _g_head = g1.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var con = val;
				if(con.connected && !con.blocked) {
					con.calledTimes++;
					con.slot(p1);
					if(!con.connected) {
						this.slots.disconnect(con.slot);
					}
					if(con.times == hxsignal_ConnectionTimes.Once) {
						con.times = hxsignal_ConnectionTimes.Times(1);
					}
					var _g = con.times;
					if(_g._hx_index == 1) {
						var t = _g.t;
						if(t <= con.calledTimes) {
							this.slots.disconnect(con.slot);
						}
					}
				}
			}
		}
		this.emitting = false;
	}
	,__class__: hxsignal_impl_Signal1
});
var hxsignal_impl_Signal2 = function() {
	hxsignal_impl_SignalBase.call(this);
};
$hxClasses["hxsignal.impl.Signal2"] = hxsignal_impl_Signal2;
hxsignal_impl_Signal2.__name__ = "hxsignal.impl.Signal2";
hxsignal_impl_Signal2.__super__ = hxsignal_impl_SignalBase;
hxsignal_impl_Signal2.prototype = $extend(hxsignal_impl_SignalBase.prototype,{
	emit: function(p1,p2) {
		this.emitting = true;
		var g = this.slots.groups.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			var _g_head = g1.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var con = val;
				if(con.connected && !con.blocked) {
					con.calledTimes++;
					con.slot(p1,p2);
					if(!con.connected) {
						this.slots.disconnect(con.slot);
					}
					if(con.times == hxsignal_ConnectionTimes.Once) {
						con.times = hxsignal_ConnectionTimes.Times(1);
					}
					var _g = con.times;
					if(_g._hx_index == 1) {
						var t = _g.t;
						if(t <= con.calledTimes) {
							this.slots.disconnect(con.slot);
						}
					}
				}
			}
		}
		this.emitting = false;
	}
	,__class__: hxsignal_impl_Signal2
});
var hxsignal_impl_SlotMap = function() {
	this.slots = new haxe_ds_ObjectMap();
	this.clear();
};
$hxClasses["hxsignal.impl.SlotMap"] = hxsignal_impl_SlotMap;
hxsignal_impl_SlotMap.__name__ = "hxsignal.impl.SlotMap";
hxsignal_impl_SlotMap.prototype = {
	groups: null
	,slots: null
	,clear: function() {
		this.groups = new hxsignal_ds_TreeMap();
		this.groups.set(0,new haxe_ds_List());
	}
	,insert: function(con,groupId,at) {
		if(at == null) {
			at = hxsignal_ConnectPosition.AtBack;
		}
		this.slots.set(con.slot,con);
		var group;
		if(groupId == null) {
			if(at == null) {
				groupId = this.groups.lastKey();
				group = this.groups.lastValue();
			} else if(at._hx_index == 1) {
				groupId = this.groups.firstKey();
				group = this.groups.firstValue();
			} else {
				groupId = this.groups.lastKey();
				group = this.groups.lastValue();
			}
		} else {
			group = this.groups.get(groupId);
			if(group == null) {
				group = new haxe_ds_List();
				this.groups.set(groupId,group);
			}
		}
		con.groupId = groupId;
		if(at == null) {
			group.add(con);
		} else if(at._hx_index == 1) {
			group.push(con);
		} else {
			group.add(con);
		}
	}
	,get: function(slot) {
		return this.slots.h[slot.__id__];
	}
	,has: function(slot) {
		return this.slots.h[slot.__id__] != null;
	}
	,disconnect: function(slot) {
		var con = this.slots.h[slot.__id__];
		if(con == null) {
			return false;
		}
		this.slots.remove(slot);
		con.connected = false;
		return true;
	}
	,disconnectGroup: function(groupId) {
		var group = this.groups.get(groupId);
		if(group == null) {
			return false;
		}
		this.groups.remove(groupId);
		var _g_head = group.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var con = val;
			this.slots.remove(con.slot);
			con.connected = false;
		}
		return true;
	}
	,disconnectAll: function() {
		var g = this.groups.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			this.disconnectGroup(g1);
		}
	}
	,get_length: function() {
		return Lambda.count(this.slots);
	}
	,__class__: hxsignal_impl_SlotMap
	,__properties__: {get_length:"get_length"}
};
var iriysoft_graphic_IITileInfo = function() { };
$hxClasses["iriysoft.graphic.IITileInfo"] = iriysoft_graphic_IITileInfo;
iriysoft_graphic_IITileInfo.__name__ = "iriysoft.graphic.IITileInfo";
iriysoft_graphic_IITileInfo.__isInterface__ = true;
iriysoft_graphic_IITileInfo.prototype = {
	getTileIndex: null
	,__class__: iriysoft_graphic_IITileInfo
};
var iriysoft_graphic_IIsfAnimation = function() { };
$hxClasses["iriysoft.graphic.IIsfAnimation"] = iriysoft_graphic_IIsfAnimation;
iriysoft_graphic_IIsfAnimation.__name__ = "iriysoft.graphic.IIsfAnimation";
iriysoft_graphic_IIsfAnimation.__isInterface__ = true;
iriysoft_graphic_IIsfAnimation.__interfaces__ = [iriysoft_graphic_IIsfViewObjectContainer];
iriysoft_graphic_IIsfAnimation.prototype = {
	get_currentFrame: null
	,get_totalFrames: null
	,get_startFrame: null
	,get_endFrame: null
	,get_speed: null
	,set_speed: null
	,get_selfDestroy: null
	,set_selfDestroy: null
	,get_playing: null
	,get_fps: null
	,set_fps: null
	,currentFrame: null
	,totalFrames: null
	,startFrame: null
	,endFrame: null
	,gotoFrame: null
	,signalFinished: null
	,signalFrame: null
	,play: null
	,stop: null
	,playing: null
	,start: null
	,__class__: iriysoft_graphic_IIsfAnimation
	,__properties__: {set_fps:"set_fps",get_fps:"get_fps",get_playing:"get_playing",set_selfDestroy:"set_selfDestroy",get_selfDestroy:"get_selfDestroy",set_speed:"set_speed",get_speed:"get_speed",get_endFrame:"get_endFrame",get_startFrame:"get_startFrame",get_totalFrames:"get_totalFrames",get_currentFrame:"get_currentFrame"}
};
var iriysoft_graphic_IIsfAnimationCustomized = function() { };
$hxClasses["iriysoft.graphic.IIsfAnimationCustomized"] = iriysoft_graphic_IIsfAnimationCustomized;
iriysoft_graphic_IIsfAnimationCustomized.__name__ = "iriysoft.graphic.IIsfAnimationCustomized";
iriysoft_graphic_IIsfAnimationCustomized.__isInterface__ = true;
iriysoft_graphic_IIsfAnimationCustomized.__interfaces__ = [iriysoft_graphic_IIsfAnimation];
iriysoft_graphic_IIsfAnimationCustomized.prototype = {
	getCustomizeData: null
	,setCustomizeData: null
	,__class__: iriysoft_graphic_IIsfAnimationCustomized
};
var iriysoft_graphic_IIsfBitmap = function() { };
$hxClasses["iriysoft.graphic.IIsfBitmap"] = iriysoft_graphic_IIsfBitmap;
iriysoft_graphic_IIsfBitmap.__name__ = "iriysoft.graphic.IIsfBitmap";
iriysoft_graphic_IIsfBitmap.__isInterface__ = true;
iriysoft_graphic_IIsfBitmap.__interfaces__ = [iriysoft_graphic_IIsfViewObject];
iriysoft_graphic_IIsfBitmap.prototype = {
	getTileInfo: null
	,setTileInfo: null
	,__class__: iriysoft_graphic_IIsfBitmap
};
var iriysoft_graphic_IIsfTextField = function() { };
$hxClasses["iriysoft.graphic.IIsfTextField"] = iriysoft_graphic_IIsfTextField;
iriysoft_graphic_IIsfTextField.__name__ = "iriysoft.graphic.IIsfTextField";
iriysoft_graphic_IIsfTextField.__isInterface__ = true;
iriysoft_graphic_IIsfTextField.__interfaces__ = [iriysoft_graphic_IIsfViewObject];
iriysoft_graphic_IIsfTextField.prototype = {
	get_textFormat: null
	,set_textFormat: null
	,get_text: null
	,set_text: null
	,get_htmlText: null
	,set_htmlText: null
	,get_pixelSnapping: null
	,set_pixelSnapping: null
	,get_wordWrap: null
	,set_wordWrap: null
	,get_multiline: null
	,set_multiline: null
	,get_smooth: null
	,set_smooth: null
	,get_useNativeTextField: null
	,set_useNativeTextField: null
	,get_input: null
	,set_input: null
	,fontMarginYCoef: null
	,addLeading: null
	,mapFonts: null
	,emptyBounds: null
	,getBitmapWidth: null
	,getBitmapHeight: null
	,GetRealHeight: null
	,__class__: iriysoft_graphic_IIsfTextField
	,__properties__: {set_input:"set_input",get_input:"get_input",set_useNativeTextField:"set_useNativeTextField",get_useNativeTextField:"get_useNativeTextField",set_smooth:"set_smooth",get_smooth:"get_smooth",set_multiline:"set_multiline",get_multiline:"get_multiline",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_pixelSnapping:"set_pixelSnapping",get_pixelSnapping:"get_pixelSnapping",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat"}
};
var iriysoft_graphic_AnimInfo = function(type_,total_frames_) {
	this.type = type_;
	this.total_frames = total_frames_;
};
$hxClasses["iriysoft.graphic.AnimInfo"] = iriysoft_graphic_AnimInfo;
iriysoft_graphic_AnimInfo.__name__ = "iriysoft.graphic.AnimInfo";
iriysoft_graphic_AnimInfo.prototype = {
	type: null
	,total_frames: null
	,__class__: iriysoft_graphic_AnimInfo
};
var iriysoft_graphic_IsfAnimation = function() {
	iriysoft_graphic_IsfViewObjectContainer.call(this);
	this.touchable = false;
	this.set_fps(iriysoft_graphic_IsfAnimation.kAnimFps != null ? iriysoft_graphic_IsfAnimation.kAnimFps : iriysoft_graphic_IsfAnimation.kFps);
	this.m_frameSavedTime = 0;
	this.signalFinished = new iriysoft_signal_IsfSignal1();
	this.signalFrame = new iriysoft_signal_IsfSignal1();
	this.m_currentFrame = this.get_startFrame();
	this.m_isPlaying = true;
	this.m_speed = 1;
	this.m_startFrame = 1;
	this.m_endFrame = 1;
	this.m_totalFrame = 1;
	this.m_repeats = -1;
	this.m_selfDestroy = false;
};
$hxClasses["iriysoft.graphic.IsfAnimation"] = iriysoft_graphic_IsfAnimation;
iriysoft_graphic_IsfAnimation.__name__ = "iriysoft.graphic.IsfAnimation";
iriysoft_graphic_IsfAnimation.__interfaces__ = [iriysoft_graphic_IIsfAnimation];
iriysoft_graphic_IsfAnimation.__super__ = iriysoft_graphic_IsfViewObjectContainer;
iriysoft_graphic_IsfAnimation.prototype = $extend(iriysoft_graphic_IsfViewObjectContainer.prototype,{
	m_frameTime: null
	,m_frameSavedTime: null
	,m_fps: null
	,get_fps: function() {
		return this.m_fps;
	}
	,set_fps: function(_fps) {
		this.m_fps = _fps;
		this.m_frameTime = 1 / this.m_fps;
		return this.m_fps;
	}
	,customDispose: function() {
		if(this.signalFinished != null) {
			this.signalFinished.dispose();
			this.signalFinished = null;
		}
		if(this.signalFrame != null) {
			this.signalFrame.dispose();
			this.signalFrame = null;
		}
		iriysoft_graphic_IsfViewObjectContainer.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_graphic_IsfViewObjectContainer.prototype.customProcess.call(this,_timeStep);
		if(this.get_playing() == false || this.get_speed() <= 0) {
			return;
		}
		if(this.m_totalFrame == 1) {
			return;
		}
		var time = _timeStep + this.m_frameSavedTime;
		var dTime = this.m_frameTime / this.get_speed();
		var deltaFrames = time / dTime | 0;
		this.m_frameSavedTime = time - dTime * deltaFrames;
		var _g = 0;
		var _g1 = deltaFrames;
		while(_g < _g1) {
			var i = _g++;
			this.m_currentFrame++;
			if(this.m_currentFrame > this.get_endFrame()) {
				this.m_repeats--;
				if(this.m_repeats == 0) {
					this.m_currentFrame = this.get_endFrame();
					this.stop();
					this.signalFinished.dispatch(this);
				} else {
					this.m_currentFrame = this.get_startFrame();
				}
				if(this.m_selfDestroy) {
					this.dispose();
					break;
				}
				if(this.m_repeats == 0) {
					break;
				}
			}
		}
	}
	,m_repeats: null
	,m_selfDestroy: null
	,get_selfDestroy: function() {
		return this.m_selfDestroy;
	}
	,set_selfDestroy: function(_selfDestroy) {
		return this.m_selfDestroy = _selfDestroy;
	}
	,currentFrame: null
	,m_currentFrame: null
	,get_currentFrame: function() {
		return Math.round(this.m_currentFrame);
	}
	,totalFrames: null
	,m_totalFrame: null
	,get_totalFrames: function() {
		return this.m_totalFrame;
	}
	,startFrame: null
	,m_startFrame: null
	,get_startFrame: function() {
		return this.m_startFrame;
	}
	,endFrame: null
	,m_endFrame: null
	,get_endFrame: function() {
		return this.m_endFrame;
	}
	,gotoFrame: function(_frame) {
		this.m_currentFrame = Math.min(Math.max(_frame,this.get_startFrame()),this.get_endFrame());
	}
	,playing: null
	,m_isPlaying: null
	,get_playing: function() {
		return this.m_isPlaying;
	}
	,play: function() {
		if(this.m_repeats == 0) {
			return;
		}
		this.m_isPlaying = true;
	}
	,stop: function() {
		this.m_isPlaying = false;
	}
	,m_speed: null
	,get_speed: function() {
		return this.m_speed;
	}
	,set_speed: function(_speed) {
		return this.m_speed = _speed;
	}
	,signalFinished: null
	,signalFrame: null
	,start: function(_frame,_repeats) {
		if(_repeats == null) {
			_repeats = -1;
		}
		if(_repeats == 0) {
			throw new js__$Boot_HaxeError("test");
		}
		this.m_repeats = _repeats;
		this.gotoFrame(_frame);
		this.play();
	}
	,__class__: iriysoft_graphic_IsfAnimation
	,__properties__: $extend(iriysoft_graphic_IsfViewObjectContainer.prototype.__properties__,{set_speed:"set_speed",get_speed:"get_speed",get_playing:"get_playing",get_endFrame:"get_endFrame",get_startFrame:"get_startFrame",get_totalFrames:"get_totalFrames",get_currentFrame:"get_currentFrame",set_selfDestroy:"set_selfDestroy",get_selfDestroy:"get_selfDestroy",set_fps:"set_fps",get_fps:"get_fps"})
});
var iriysoft_graphic_IsfAnimationComposition = function(_animSet) {
	iriysoft_graphic_IsfViewObjectContainer.call(this);
	this.signalFinished = new iriysoft_signal_IsfSignal1();
	this.signalFrame = new iriysoft_signal_IsfSignal1();
	this.m_animSet = _animSet;
	var maxFrame = 0;
	var _g = 0;
	var _g1 = this.m_animSet;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.addChild(a);
		if(maxFrame < a.get_totalFrames()) {
			maxFrame = a.get_totalFrames();
			this.p_mainAnim = a;
		}
	}
	this.p_mainAnim.signalFinished.addSlot($bind(this,this.onMainAnimFinish));
	this.p_mainAnim.signalDisposed.addSlot($bind(this,this.onMainAnimDispose));
};
$hxClasses["iriysoft.graphic.IsfAnimationComposition"] = iriysoft_graphic_IsfAnimationComposition;
iriysoft_graphic_IsfAnimationComposition.__name__ = "iriysoft.graphic.IsfAnimationComposition";
iriysoft_graphic_IsfAnimationComposition.__interfaces__ = [iriysoft_graphic_IIsfAnimation];
iriysoft_graphic_IsfAnimationComposition.__super__ = iriysoft_graphic_IsfViewObjectContainer;
iriysoft_graphic_IsfAnimationComposition.prototype = $extend(iriysoft_graphic_IsfViewObjectContainer.prototype,{
	m_animSet: null
	,p_mainAnim: null
	,customDispose: function() {
		this.p_mainAnim = null;
		if(this.m_animSet != null) {
			var _g = 0;
			var _g1 = this.m_animSet;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if(a != null) {
					a.dispose();
				}
			}
			this.m_animSet = null;
		}
		if(this.signalFinished != null) {
			this.signalFinished.dispose();
			this.signalFinished = null;
		}
		this.signalFrame.dispose();
		this.signalFrame = null;
		iriysoft_graphic_IsfViewObjectContainer.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		iriysoft_graphic_IsfViewObjectContainer.prototype.customProcess.call(this,_timeStep);
	}
	,get_selfDestroy: function() {
		return this.p_mainAnim.get_selfDestroy();
	}
	,set_selfDestroy: function(_selfDestroy) {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.set_selfDestroy(_selfDestroy);
		}
		return _selfDestroy;
	}
	,currentFrame: null
	,get_currentFrame: function() {
		return this.p_mainAnim.get_currentFrame();
	}
	,totalFrames: null
	,get_totalFrames: function() {
		return this.p_mainAnim.get_totalFrames();
	}
	,startFrame: null
	,get_startFrame: function() {
		return this.p_mainAnim.get_startFrame();
	}
	,endFrame: null
	,get_endFrame: function() {
		return this.p_mainAnim.get_endFrame();
	}
	,gotoFrame: function(_frame) {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.gotoFrame(_frame);
		}
	}
	,playing: null
	,get_playing: function() {
		return this.p_mainAnim.get_playing();
	}
	,play: function() {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.play();
		}
	}
	,stop: function() {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.stop();
		}
	}
	,get_speed: function() {
		return this.p_mainAnim.get_speed();
	}
	,set_speed: function(_speed) {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.set_speed(_speed);
		}
		return _speed;
	}
	,get_fps: function() {
		return this.p_mainAnim.get_fps();
	}
	,set_fps: function(_fps) {
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.set_fps(_fps);
		}
		return this.p_mainAnim.get_fps();
	}
	,signalFinished: null
	,signalFrame: null
	,start: function(_frame,_repeats) {
		if(_repeats == null) {
			_repeats = -1;
		}
		var _g = 0;
		var _g1 = this.m_animSet;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.start(_frame,_repeats);
		}
	}
	,onMainAnimFinish: function(_anim) {
		this.signalFinished.dispatch(this);
	}
	,onMainAnimDispose: function(_anim) {
		if(this.disposed == false) {
			this.dispose();
		}
	}
	,__class__: iriysoft_graphic_IsfAnimationComposition
	,__properties__: $extend(iriysoft_graphic_IsfViewObjectContainer.prototype.__properties__,{set_fps:"set_fps",get_fps:"get_fps",set_speed:"set_speed",get_speed:"get_speed",get_playing:"get_playing",get_endFrame:"get_endFrame",get_startFrame:"get_startFrame",get_totalFrames:"get_totalFrames",get_currentFrame:"get_currentFrame",set_selfDestroy:"set_selfDestroy",get_selfDestroy:"get_selfDestroy"})
});
var iriysoft_graphic_IsfAnimationCompositionNME = function(_animSet) {
	iriysoft_graphic_IsfAnimationComposition.call(this,_animSet);
};
$hxClasses["iriysoft.graphic.IsfAnimationCompositionNME"] = iriysoft_graphic_IsfAnimationCompositionNME;
iriysoft_graphic_IsfAnimationCompositionNME.__name__ = "iriysoft.graphic.IsfAnimationCompositionNME";
iriysoft_graphic_IsfAnimationCompositionNME.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME];
iriysoft_graphic_IsfAnimationCompositionNME.__super__ = iriysoft_graphic_IsfAnimationComposition;
iriysoft_graphic_IsfAnimationCompositionNME.prototype = $extend(iriysoft_graphic_IsfAnimationComposition.prototype,{
	render: function(_renderData,_matrix,_alpha) {
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_DOWN(this,_globalX,_globalY,_buttonId);
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_UP(this,_globalX,_globalY,_buttonId);
	}
	,updateMove: function(_globalX,_globalY) {
		return iriysoft_graphic_IsfViewObjectContainerNME.UPDATE_MOVE(this,_globalX,_globalY);
	}
	,__class__: iriysoft_graphic_IsfAnimationCompositionNME
});
var iriysoft_graphic_IsfAnimationNME = function(_renderScale) {
	iriysoft_graphic_IsfAnimation.call(this);
	this.renderScale = _renderScale;
	this.__bounds = new openfl_geom_Rectangle();
};
$hxClasses["iriysoft.graphic.IsfAnimationNME"] = iriysoft_graphic_IsfAnimationNME;
iriysoft_graphic_IsfAnimationNME.__name__ = "iriysoft.graphic.IsfAnimationNME";
iriysoft_graphic_IsfAnimationNME.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME];
iriysoft_graphic_IsfAnimationNME.__super__ = iriysoft_graphic_IsfAnimation;
iriysoft_graphic_IsfAnimationNME.prototype = $extend(iriysoft_graphic_IsfAnimation.prototype,{
	__bounds: null
	,renderScale: null
	,updateMatrix: function() {
		if(this.m_invalidate) {
			this.m_matrix.identity();
			this.m_matrix.scale(this.m_scaleX * this.renderScale,this.m_scaleY * this.renderScale);
			if(this.m_skewX != 0 || this.m_skewY != 0) {
				var sinX = Math.sin(this.m_skewX);
				var cosX = Math.cos(this.m_skewX);
				var sinY = Math.sin(this.m_skewY);
				var cosY = Math.cos(this.m_skewY);
				this.m_matrix.setTo(this.m_matrix.a * cosY - this.m_matrix.b * sinX,this.m_matrix.a * sinY + this.m_matrix.b * cosX,this.m_matrix.c * cosY - this.m_matrix.d * sinX,this.m_matrix.c * sinY + this.m_matrix.d * cosX,this.m_matrix.tx * cosY - this.m_matrix.ty * sinX,this.m_matrix.tx * sinY + this.m_matrix.ty * cosX);
			} else {
				this.m_matrix.rotate(this.m_angle);
			}
			this.m_matrix.translate(-this.m_x,-this.m_y);
			this.m_invalidate = false;
		}
	}
	,getBounds: function(_targetSpace) {
		this.__bounds = iriysoft_graphic_IsfAnimation.prototype.getBounds.call(this,_targetSpace);
		if(this.renderScale != 1.0 && !(_targetSpace != null && _targetSpace != this)) {
			var _g = this.__bounds;
			_g.set_left(_g.get_left() * this.renderScale);
			var _g1 = this.__bounds;
			_g1.set_right(_g1.get_right() * this.renderScale);
			var _g2 = this.__bounds;
			_g2.set_top(_g2.get_top() * this.renderScale);
			var _g3 = this.__bounds;
			_g3.set_bottom(_g3.get_bottom() * this.renderScale);
		}
		return this.__bounds;
	}
	,hitTest: function(_x,_y) {
		this.__p.x = _x;
		this.__p.y = _y;
		this.__p = this.globalToLocal(this.__p);
		this.__bounds = this.getBounds(null);
		if(this.renderScale != 1.0) {
			var _g = this.__bounds;
			_g.set_left(_g.get_left() / this.renderScale);
			var _g1 = this.__bounds;
			_g1.set_right(_g1.get_right() / this.renderScale);
			var _g2 = this.__bounds;
			_g2.set_top(_g2.get_top() / this.renderScale);
			var _g3 = this.__bounds;
			_g3.set_bottom(_g3.get_bottom() / this.renderScale);
		}
		return this.__bounds.containsPoint(this.__p);
	}
	,render: function(_renderData,_matrix,_alpha) {
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_DOWN(this,_globalX,_globalY,_buttonId);
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_UP(this,_globalX,_globalY,_buttonId);
	}
	,updateMove: function(_globalX,_globalY) {
		return iriysoft_graphic_IsfViewObjectContainerNME.UPDATE_MOVE(this,_globalX,_globalY);
	}
	,__class__: iriysoft_graphic_IsfAnimationNME
});
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var iriysoft_graphic_IsfBitmapNME = function(_image,_renderScale) {
	if(_renderScale == null) {
		_renderScale = 1;
	}
	iriysoft_graphic_IsfViewObject.call(this);
	this.m_pImage = _image;
	this.renderScale = _renderScale;
	this.__bounds = new openfl_geom_Rectangle();
	this.__p2 = new openfl_geom_Point();
	this.m_touch = new iriysoft_graphic_IsfTouchObject(this);
};
$hxClasses["iriysoft.graphic.IsfBitmapNME"] = iriysoft_graphic_IsfBitmapNME;
iriysoft_graphic_IsfBitmapNME.__name__ = "iriysoft.graphic.IsfBitmapNME";
iriysoft_graphic_IsfBitmapNME.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME,iriysoft_graphic_IIsfBitmap];
iriysoft_graphic_IsfBitmapNME.__super__ = iriysoft_graphic_IsfViewObject;
iriysoft_graphic_IsfBitmapNME.prototype = $extend(iriysoft_graphic_IsfViewObject.prototype,{
	m_pImage: null
	,setImagePointer: function(_pImage) {
		this.m_pImage = _pImage;
	}
	,renderScale: null
	,getTileInfo: function() {
		return this.m_pImage;
	}
	,setTileInfo: function(_data) {
		this.m_pImage = _data != null ? js_Boot.__cast(_data , iriysoft_graphic_atlas_IsfImageTT) : null;
	}
	,__bounds: null
	,__p2: null
	,customDispose: function() {
		if(this.m_touch != null) {
			this.m_touch.dispose();
			this.m_touch = null;
		}
		this.m_pImage = null;
		iriysoft_graphic_IsfViewObject.prototype.customDispose.call(this);
	}
	,calcBoundPoint: function(_x,_y,_targetSpace) {
		this.__p2.x = _x;
		this.__p2.y = _y;
		if(_targetSpace != null && _targetSpace != this) {
			this.__p2 = this.localToGlobal(this.__p2);
			this.__p2 = _targetSpace.globalToLocal(this.__p2);
		}
		return this.__p2;
	}
	,updateMatrix: function() {
		if(this.m_invalidate) {
			this.m_matrix.identity();
			this.m_matrix.scale(this.m_scaleX * this.renderScale,this.m_scaleY * this.renderScale);
			if(this.m_skewX != 0 || this.m_skewY != 0) {
				var sinX = Math.sin(this.m_skewX);
				var cosX = Math.cos(this.m_skewX);
				var sinY = Math.sin(this.m_skewY);
				var cosY = Math.cos(this.m_skewY);
				this.m_matrix.setTo(this.m_matrix.a * cosY - this.m_matrix.b * sinX,this.m_matrix.a * sinY + this.m_matrix.b * cosX,this.m_matrix.c * cosY - this.m_matrix.d * sinX,this.m_matrix.c * sinY + this.m_matrix.d * cosX,this.m_matrix.tx * cosY - this.m_matrix.ty * sinX,this.m_matrix.tx * sinY + this.m_matrix.ty * cosX);
			} else {
				this.m_matrix.rotate(this.m_angle);
			}
			this.m_matrix.translate(-this.m_x,-this.m_y);
			this.m_invalidate = false;
		}
	}
	,get_width: function() {
		return this.getBoundNME(null,true).width;
	}
	,get_height: function() {
		return this.getBoundNME(null,true).height;
	}
	,getBounds: function(_targetSpace) {
		return this.getBoundNME(_targetSpace,false);
	}
	,hitTest: function(_x,_y) {
		this.__p.x = _x;
		this.__p.y = _y;
		this.__p = this.globalToLocal(this.__p);
		this.__bounds = this.getBoundNME(null,false);
		return this.__bounds.containsPoint(this.__p);
	}
	,getBoundNME: function(_targetSpace,_renderScaleON) {
		if(this.m_pImage == null) {
			this.__bounds.set_left(0);
			this.__bounds.set_right(0);
			this.__bounds.set_top(0);
			this.__bounds.set_bottom(0);
			return this.__bounds;
		}
		var p = this.calcBoundPoint(this.m_pImage.TLx,this.m_pImage.TLy,_targetSpace);
		this.__bounds.set_left(p.x);
		this.__bounds.set_right(p.x);
		this.__bounds.set_top(p.y);
		this.__bounds.set_bottom(p.y);
		p = this.calcBoundPoint(this.m_pImage.BRx,this.m_pImage.TLy,_targetSpace);
		this.IncreaseRectangle(this.__bounds,p.x,p.y);
		p = this.calcBoundPoint(this.m_pImage.BRx,this.m_pImage.BRy,_targetSpace);
		this.IncreaseRectangle(this.__bounds,p.x,p.y);
		p = this.calcBoundPoint(this.m_pImage.TLx,this.m_pImage.BRy,_targetSpace);
		this.IncreaseRectangle(this.__bounds,p.x,p.y);
		if(_renderScaleON) {
			var _g = this.__bounds;
			_g.set_left(_g.get_left() * this.renderScale);
			var _g1 = this.__bounds;
			_g1.set_right(_g1.get_right() * this.renderScale);
			var _g2 = this.__bounds;
			_g2.set_top(_g2.get_top() * this.renderScale);
			var _g3 = this.__bounds;
			_g3.set_bottom(_g3.get_bottom() * this.renderScale);
		}
		return this.__bounds;
	}
	,touch: null
	,m_touch: null
	,get_touch: function() {
		return this.m_touch;
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		if(this.get_visible()) {
			return this.m_touch.touchDown(_globalX,_globalY,_buttonId,0);
		} else {
			return false;
		}
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		if(!this.get_visible()) {
			return false;
		}
		return this.m_touch.touchUp(_globalX,_globalY,_buttonId,0);
	}
	,updateMove: function(_globalX,_globalY) {
		if(this.get_visible()) {
			return this.m_touch.updateMove(_globalX,_globalY,0);
		} else {
			return false;
		}
	}
	,render: function(_renderData,_matrix,_alpha) {
		iriysoft_graphic_IsfViewObject.prototype.render.call(this,_renderData,_matrix,_alpha);
		if(this.m_pImage == null) {
			return;
		}
		if(this.m_pImage.anchor == null) {
			return;
		}
		if(!this.get_visible() || this.get_alpha() == 0 || _alpha == 0) {
			return;
		}
		var newAlpha = this.get_alpha() * _alpha;
		iriysoft_graphic_IsfBitmapNME.__tmpMatrix2.copyFrom(this.get_transformMatrix());
		iriysoft_graphic_IsfBitmapNME.__tmpMatrix2.concat(_matrix);
		this.__tmpMatrix.copyFrom(this.m_pImage.anchor);
		this.__tmpMatrix.concat(iriysoft_graphic_IsfBitmapNME.__tmpMatrix2);
		_renderData.AddTile(this.m_pImage.textureID,this.m_pImage.tileIndex,-this.__tmpMatrix.tx,-this.__tmpMatrix.ty,this.__tmpMatrix.a,this.__tmpMatrix.b,this.__tmpMatrix.c,this.__tmpMatrix.d,newAlpha);
	}
	,__class__: iriysoft_graphic_IsfBitmapNME
	,__properties__: $extend(iriysoft_graphic_IsfViewObject.prototype.__properties__,{get_touch:"get_touch"})
});
var iriysoft_graphic_IsfButton = function(up_view,down_view,over_view,disable_view,hit_view) {
	this.confirm_state_ = false;
	this.roll_in_ = false;
	this.activate_sg_ = new hxsignal_impl_Signal1();
	this.confirm_manual = false;
	this.confirm_path = null;
	this.disable_over = false;
	iriysoft_graphic_IsfViewObjectContainerNME.call(this);
	this.up_view_ = up_view;
	this.down_view_ = down_view;
	this.over_view_ = over_view;
	this.disable_view_ = disable_view;
	this.addView(this.up_view_);
	this.addView(this.down_view_);
	this.addView(this.over_view_);
	this.addView(this.disable_view_);
	if(hit_view != null) {
		this.addView(hit_view);
		this.set_hitRect(hit_view.getBounds(hit_view.get_parent()));
		hit_view.dispose();
		hit_view = null;
	}
	this.enable_ = true;
	this.touchGroup = true;
	this.ChangeState(iriysoft_graphic_State.kUp);
	this.signalTouchDown.addSlot($bind(this,this.OnTouchDown));
	this.signalTouchUp.addSlot($bind(this,this.OnTouchUp));
	this.signalTouch.addSlot($bind(this,this.OnTouch));
	this.signalRollIn.addSlot($bind(this,this.OnRollIn));
	this.signalRollOut.addSlot($bind(this,this.OnRollOut));
};
$hxClasses["iriysoft.graphic.IsfButton"] = iriysoft_graphic_IsfButton;
iriysoft_graphic_IsfButton.__name__ = "iriysoft.graphic.IsfButton";
iriysoft_graphic_IsfButton.__super__ = iriysoft_graphic_IsfViewObjectContainerNME;
iriysoft_graphic_IsfButton.prototype = $extend(iriysoft_graphic_IsfViewObjectContainerNME.prototype,{
	customDispose: function() {
		this.activate_sg_.disconnectAll();
		this.activate_sg_ = null;
		iriysoft_graphic_IsfViewObjectContainerNME.prototype.customDispose.call(this);
	}
	,enable_: null
	,get_enable: function() {
		return this.enable_;
	}
	,set_enable: function(v) {
		if(v != this.enable_) {
			if(!this.enable_) {
				this.enable_ = true;
			}
			this.ChangeState(v ? iriysoft_graphic_State.kUp : iriysoft_graphic_State.kDisable);
			this.enable_ = v;
		}
		return this.enable_;
	}
	,disable_over: null
	,set_disable_over: function(v) {
		if(v == this.disable_over) {
			return this.disable_over;
		}
		this.disable_over = v;
		this.ChangeState(this.state_);
		return this.disable_over;
	}
	,confirm_path: null
	,set_confirm_path: function(v) {
		if(v == this.confirm_path) {
			return this.confirm_path;
		}
		this.confirm_path = v;
		this.confirm_state_ = false;
		this.ChangeState(this.state_);
		return this.confirm_path;
	}
	,confirm_manual: null
	,SetConfirm: function(v) {
		this.confirm_state_ = v;
		this.ChangeState(this.state_);
	}
	,ChangeState: function(state) {
		if(!this.enable_) {
			return;
		}
		if(this.disable_over && state == iriysoft_graphic_State.kOver) {
			state = iriysoft_graphic_State.kUp;
		}
		if(!this.disable_over && state == iriysoft_graphic_State.kUp && this.roll_in_) {
			state = iriysoft_graphic_State.kOver;
		}
		this.state_ = state;
		var _g = 0;
		var _g1 = this.m_childrens.length;
		while(_g < _g1) {
			var i = _g++;
			this.m_childrens[i].set_visible(false);
		}
		switch(this.state_._hx_index) {
		case 0:
			this.up_view_.set_visible(true);
			break;
		case 1:
			this.over_view_.set_visible(true);
			break;
		case 2:
			this.down_view_.set_visible(true);
			break;
		case 3:
			this.disable_view_.set_visible(true);
			break;
		}
		if(this.confirm_path != null) {
			iriysoft_helper_Fwh.ButtonChildSetVisible(this,this.confirm_path,this.confirm_state_);
		}
	}
	,OnTouch: function(_,_1,_2,bid) {
		if(!this.enable_) {
			return;
		}
		if(bid != 1 && bid != 10) {
			return;
		}
		if(this.confirm_path != null && !this.confirm_manual && !this.confirm_state_) {
			this.confirm_state_ = true;
			this.ChangeState(this.state_);
			return;
		}
		this.activate_sg_.emit(this);
		if(this.confirm_path != null && !this.confirm_manual) {
			this.confirm_state_ = false;
			this.ChangeState(this.state_);
		}
	}
	,OnTouchDown: function(_,_1,_2,bid) {
		if(bid != 1 && bid != 10) {
			return;
		}
		this.ChangeState(iriysoft_graphic_State.kDown);
	}
	,OnTouchUp: function(_,_1,_2,bid) {
		if(bid != 1 && bid != 10) {
			return;
		}
		if(this.roll_in_) {
			this.ChangeState(iriysoft_graphic_State.kOver);
		} else {
			this.ChangeState(iriysoft_graphic_State.kUp);
		}
	}
	,OnRollIn: function(_) {
		this.roll_in_ = true;
		var down = this.touch_object_.IsDown(1) || this.touch_object_.IsDown(10);
		if(down) {
			this.ChangeState(iriysoft_graphic_State.kDown);
		} else {
			this.ChangeState(iriysoft_graphic_State.kOver);
		}
	}
	,OnRollOut: function(_) {
		this.roll_in_ = false;
		if(this.confirm_path != null && !this.confirm_manual) {
			this.confirm_state_ = false;
		}
		this.ChangeState(iriysoft_graphic_State.kUp);
	}
	,activate_sg: function() {
		return this.activate_sg_;
	}
	,addView: function(v) {
		if(v == null) {
			return;
		}
		this.addChild(v);
	}
	,up_view_: null
	,down_view_: null
	,over_view_: null
	,disable_view_: null
	,activate_sg_: null
	,state_: null
	,roll_in_: null
	,confirm_state_: null
	,__class__: iriysoft_graphic_IsfButton
	,__properties__: $extend(iriysoft_graphic_IsfViewObjectContainerNME.prototype.__properties__,{set_confirm_path:"set_confirm_path",set_disable_over:"set_disable_over",set_enable:"set_enable",get_enable:"get_enable"})
});
var iriysoft_graphic_State = $hxEnums["iriysoft.graphic.State"] = { __ename__ : "iriysoft.graphic.State", __constructs__ : ["kUp","kOver","kDown","kDisable"]
	,kUp: {_hx_index:0,__enum__:"iriysoft.graphic.State",toString:$estr}
	,kOver: {_hx_index:1,__enum__:"iriysoft.graphic.State",toString:$estr}
	,kDown: {_hx_index:2,__enum__:"iriysoft.graphic.State",toString:$estr}
	,kDisable: {_hx_index:3,__enum__:"iriysoft.graphic.State",toString:$estr}
};
var iriysoft_graphic_IsfFakeAnimationNME = function() {
	iriysoft_graphic_IsfViewObjectContainerNME.call(this);
	this.signalFinished = new iriysoft_signal_IsfSignal1();
	this.signalFrame = new iriysoft_signal_IsfSignal1();
	this.m_selfDestroy = false;
	this.m_repeats = 1;
};
$hxClasses["iriysoft.graphic.IsfFakeAnimationNME"] = iriysoft_graphic_IsfFakeAnimationNME;
iriysoft_graphic_IsfFakeAnimationNME.__name__ = "iriysoft.graphic.IsfFakeAnimationNME";
iriysoft_graphic_IsfFakeAnimationNME.__interfaces__ = [iriysoft_graphic_IIsfAnimation];
iriysoft_graphic_IsfFakeAnimationNME.__super__ = iriysoft_graphic_IsfViewObjectContainerNME;
iriysoft_graphic_IsfFakeAnimationNME.prototype = $extend(iriysoft_graphic_IsfViewObjectContainerNME.prototype,{
	playing: null
	,get_playing: function() {
		return false;
	}
	,currentFrame: null
	,get_currentFrame: function() {
		return 1;
	}
	,get_speed: function() {
		return 0;
	}
	,set_speed: function(_speed) {
		return 0;
	}
	,totalFrames: null
	,get_totalFrames: function() {
		return 1;
	}
	,startFrame: null
	,get_startFrame: function() {
		return 1;
	}
	,endFrame: null
	,get_endFrame: function() {
		return 1;
	}
	,play: function() {
	}
	,m_selfDestroy: null
	,get_selfDestroy: function() {
		return this.m_selfDestroy;
	}
	,set_selfDestroy: function(_selfDestroy) {
		return this.m_selfDestroy = _selfDestroy;
	}
	,signalFinished: null
	,signalFrame: null
	,gotoFrame: function(_frame) {
	}
	,m_repeats: null
	,stop: function() {
	}
	,start: function(_frame,_repeats) {
		if(_repeats == null) {
			_repeats = -1;
		}
		this.m_repeats = _repeats;
		this.play();
	}
	,get_fps: function() {
		return iriysoft_graphic_IsfAnimation.kFps;
	}
	,set_fps: function(_fps) {
		return iriysoft_graphic_IsfAnimation.kFps;
	}
	,customDispose: function() {
		this.signalFinished.dispose();
		this.signalFinished = null;
		this.signalFrame.dispose();
		this.signalFrame = null;
		iriysoft_graphic_IsfViewObjectContainerNME.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		if(this.m_repeats > 0 && this.m_lifetime > 0.5) {
			this.m_repeats--;
			this.resetLifetime();
			this.signalFinished.dispatch(this);
			if(this.m_selfDestroy) {
				this.dispose();
			}
		}
		iriysoft_graphic_IsfViewObjectContainerNME.prototype.customProcess.call(this,_timeStep);
	}
	,__class__: iriysoft_graphic_IsfFakeAnimationNME
	,__properties__: $extend(iriysoft_graphic_IsfViewObjectContainerNME.prototype.__properties__,{set_fps:"set_fps",get_fps:"get_fps",set_selfDestroy:"set_selfDestroy",get_selfDestroy:"get_selfDestroy",get_endFrame:"get_endFrame",get_startFrame:"get_startFrame",get_totalFrames:"get_totalFrames",set_speed:"set_speed",get_speed:"get_speed",get_currentFrame:"get_currentFrame",get_playing:"get_playing"})
});
var iriysoft_graphic_IsfMouseEvent = function() {
};
$hxClasses["iriysoft.graphic.IsfMouseEvent"] = iriysoft_graphic_IsfMouseEvent;
iriysoft_graphic_IsfMouseEvent.__name__ = "iriysoft.graphic.IsfMouseEvent";
iriysoft_graphic_IsfMouseEvent.prototype = {
	__class__: iriysoft_graphic_IsfMouseEvent
};
var iriysoft_graphic_IsfPartsAnimationNME = function(_atlas,_resPositon) {
	iriysoft_graphic_IsfAnimationNME.call(this,_atlas.renderScale);
	this.animTargets = [];
	this.ref_atlas = _atlas;
	this.startIndex = this.ref_atlas.resourceDataFrames[_resPositon];
	this.m_totalFrame = this.ref_atlas.framesNumbersIndex[this.startIndex];
	this.startIndex++;
	this.m_startFrame = 1;
	this.m_currentFrame = this.m_startFrame;
	this.m_endFrame = this.m_totalFrame;
	this.m_frameColIndex = this.get_currentFrame() - 1;
	this.updateColFrames(this.m_frameColIndex);
};
$hxClasses["iriysoft.graphic.IsfPartsAnimationNME"] = iriysoft_graphic_IsfPartsAnimationNME;
iriysoft_graphic_IsfPartsAnimationNME.__name__ = "iriysoft.graphic.IsfPartsAnimationNME";
iriysoft_graphic_IsfPartsAnimationNME.__super__ = iriysoft_graphic_IsfAnimationNME;
iriysoft_graphic_IsfPartsAnimationNME.prototype = $extend(iriysoft_graphic_IsfAnimationNME.prototype,{
	animTargets: null
	,m_frameColIndex: null
	,ref_atlas: null
	,startIndex: null
	,Update: function(frame) {
		this.updateColFrames(frame - 1);
	}
	,getFrameImage: function(_frameIndex,_counter) {
		var frameDataPos = this.ref_atlas.framesNumbersIndex[this.startIndex + _frameIndex];
		var framePos = this.ref_atlas.resourceDataFrames[frameDataPos + 1 + _counter];
		var frameDataIndex = this.ref_atlas.framesDataImage[framePos];
		return this.ref_atlas.images[frameDataIndex];
	}
	,getLayersCount: function(_frameIndex) {
		var frameDataPos = this.ref_atlas.framesNumbersIndex[this.startIndex + _frameIndex];
		var frameCount = this.ref_atlas.resourceDataFrames[frameDataPos];
		return frameCount;
	}
	,copyMatrixToTarget: function(_part,_frameIndex,_counter) {
		var frameDataPos = this.ref_atlas.framesNumbersIndex[this.startIndex + _frameIndex];
		var framePos = this.ref_atlas.resourceDataFrames[frameDataPos + 1 + _counter];
		var framesDataMatrixPos = framePos * 7;
		_part.m_matrix.setTo(this.ref_atlas.framesDataMatrix[framesDataMatrixPos],this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 1],this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 2],this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 3],this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 4],this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 5]);
		_part.set_alpha(this.ref_atlas.framesDataMatrix[framesDataMatrixPos + 6]);
	}
	,customDispose: function() {
		this.ref_atlas = null;
		if(this.animTargets != null) {
			var _g = 0;
			var _g1 = this.animTargets;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if(a != null) {
					a.dispose();
					a = null;
				}
			}
			this.animTargets = null;
		}
		iriysoft_graphic_IsfAnimationNME.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		if(this.disposed) {
			return;
		}
		iriysoft_graphic_IsfAnimationNME.prototype.customProcess.call(this,_timeStep);
	}
	,updateColFrames: function(_frameIndex) {
		var _part;
		var frmImage;
		var i = 0;
		var len = this.getLayersCount(_frameIndex);
		while(i < len) {
			frmImage = this.getFrameImage(_frameIndex,i);
			if(i >= this.animTargets.length) {
				_part = new iriysoft_graphic_IsfBitmapNME(frmImage,1);
				this.addChild(_part);
				this.animTargets.push(_part);
				_part.updateMatrix();
			} else {
				_part = this.animTargets[i];
			}
			_part.setImagePointer(frmImage);
			this.copyMatrixToTarget(_part,_frameIndex,i);
			_part.set_visible(true);
			++i;
		}
		while(i < this.animTargets.length) {
			this.animTargets[i].set_visible(false);
			++i;
		}
	}
	,render: function(_renderData,_matrix,_alpha) {
		if(this.m_frameColIndex != this.get_currentFrame() - 1) {
			this.m_frameColIndex = this.get_currentFrame() - 1;
			this.updateColFrames(this.m_frameColIndex);
		}
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
	}
	,__class__: iriysoft_graphic_IsfPartsAnimationNME
});
var iriysoft_graphic_IsfPartsAnimationCustomizedNME = function(_atlas,_resPositon) {
	iriysoft_graphic_IsfPartsAnimationNME.call(this,_atlas,_resPositon);
	this.m_customisedData = null;
};
$hxClasses["iriysoft.graphic.IsfPartsAnimationCustomizedNME"] = iriysoft_graphic_IsfPartsAnimationCustomizedNME;
iriysoft_graphic_IsfPartsAnimationCustomizedNME.__name__ = "iriysoft.graphic.IsfPartsAnimationCustomizedNME";
iriysoft_graphic_IsfPartsAnimationCustomizedNME.__interfaces__ = [iriysoft_graphic_IIsfAnimationCustomized];
iriysoft_graphic_IsfPartsAnimationCustomizedNME.__super__ = iriysoft_graphic_IsfPartsAnimationNME;
iriysoft_graphic_IsfPartsAnimationCustomizedNME.prototype = $extend(iriysoft_graphic_IsfPartsAnimationNME.prototype,{
	m_customisedData: null
	,customDispose: function() {
		this.m_customisedData = null;
		iriysoft_graphic_IsfPartsAnimationNME.prototype.customDispose.call(this);
	}
	,getCustomizeData: function() {
		return this.m_customisedData;
	}
	,setCustomizeData: function(_data) {
		this.m_customisedData = _data;
		this.updateColFrames(this.m_frameColIndex);
	}
	,getFrameImage: function(_frameIndex,_counter) {
		var tile = iriysoft_graphic_IsfPartsAnimationNME.prototype.getFrameImage.call(this,_frameIndex,_counter);
		var tmp;
		if(this.m_customisedData != null) {
			var this1 = this.m_customisedData;
			var key = tile.getTileIndex();
			tmp = this1.h.hasOwnProperty(key);
		} else {
			tmp = false;
		}
		if(tmp) {
			var this11 = this.m_customisedData;
			var key1 = tile.getTileIndex();
			var t = this11.h[key1];
			tile = t != null ? js_Boot.__cast(t , iriysoft_graphic_atlas_IsfImageTT) : null;
		}
		return tile;
	}
	,__class__: iriysoft_graphic_IsfPartsAnimationCustomizedNME
});
var iriysoft_graphic_IsfRasterAnimationNME = function(_atlas,_resPositon) {
	iriysoft_graphic_IsfAnimationNME.call(this,_atlas.renderScale);
	this.ref_atlas = _atlas;
	this.startImageIndex = _resPositon + 1;
	this.m_imageIndex = 0;
	this.animTarget = new iriysoft_graphic_IsfBitmapNME(this.getImage(this.m_imageIndex),1);
	this.addChild(this.animTarget);
	this.m_totalFrame = this.ref_atlas.resourceDataFrames[_resPositon];
	this.m_startFrame = 1;
	this.m_currentFrame = this.m_startFrame;
	this.m_endFrame = this.m_totalFrame;
};
$hxClasses["iriysoft.graphic.IsfRasterAnimationNME"] = iriysoft_graphic_IsfRasterAnimationNME;
iriysoft_graphic_IsfRasterAnimationNME.__name__ = "iriysoft.graphic.IsfRasterAnimationNME";
iriysoft_graphic_IsfRasterAnimationNME.__super__ = iriysoft_graphic_IsfAnimationNME;
iriysoft_graphic_IsfRasterAnimationNME.prototype = $extend(iriysoft_graphic_IsfAnimationNME.prototype,{
	animTarget: null
	,m_imageIndex: null
	,ref_atlas: null
	,startImageIndex: null
	,customDispose: function() {
		this.ref_atlas = null;
		if(this.animTarget != null) {
			this.animTarget.dispose();
			this.animTarget = null;
		}
		iriysoft_graphic_IsfAnimationNME.prototype.customDispose.call(this);
	}
	,customProcess: function(_timeStep) {
		if(this.disposed) {
			return;
		}
		if(this.m_imageIndex != this.get_currentFrame() - 1) {
			this.m_imageIndex = this.get_currentFrame() - 1;
			this.animTarget.setImagePointer(this.getImage(this.m_imageIndex));
		}
		iriysoft_graphic_IsfAnimationNME.prototype.customProcess.call(this,_timeStep);
	}
	,render: function(_renderData,_matrix,_alpha) {
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
	}
	,getImage: function(_index) {
		return this.ref_atlas.images[this.ref_atlas.resourceDataFrames[this.startImageIndex + _index]];
	}
	,__class__: iriysoft_graphic_IsfRasterAnimationNME
});
var iriysoft_graphic_IsfRenderData = function() {
};
$hxClasses["iriysoft.graphic.IsfRenderData"] = iriysoft_graphic_IsfRenderData;
iriysoft_graphic_IsfRenderData.__name__ = "iriysoft.graphic.IsfRenderData";
iriysoft_graphic_IsfRenderData.prototype = {
	AddDisplaObject: function(display_object) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("AddDisplaObject need to be overrrided"));
	}
	,AddRoot: function(root) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("AddRoot need to be overrrided"));
	}
	,RestoreRoot: function(root) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("RestoreRoot need to be overrrided"));
	}
	,AddTile: function(_textureKey,_tileID,_x,_y,_a,_b,_c,_d,_alpha) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("AddTile"));
	}
	,dispose: function() {
	}
	,__class__: iriysoft_graphic_IsfRenderData
};
var iriysoft_graphic_IsfRenderDataNME = function(_renderPlace) {
	this.textures_data_ = null;
	this.curr_tilemap_ = null;
	this.curr_texture_key_ = -1;
	this.last_free_tilemap_ = 0;
	this.tilemaps_ = [];
	this.last_free_tile_ = 0;
	this.tiles_ = [];
	this.draw_tiles = 0;
	this.draw_calls = 0;
	iriysoft_graphic_IsfRenderData.call(this);
	this.renderPlace = _renderPlace;
	this.root_ = null;
};
$hxClasses["iriysoft.graphic.IsfRenderDataNME"] = iriysoft_graphic_IsfRenderDataNME;
iriysoft_graphic_IsfRenderDataNME.__name__ = "iriysoft.graphic.IsfRenderDataNME";
iriysoft_graphic_IsfRenderDataNME.__super__ = iriysoft_graphic_IsfRenderData;
iriysoft_graphic_IsfRenderDataNME.prototype = $extend(iriysoft_graphic_IsfRenderData.prototype,{
	renderPlace: null
	,draw_calls: null
	,draw_tiles: null
	,root_: null
	,dispose: function() {
		this.renderPlace.removeChildren();
		this.renderPlace = null;
		this.root_ = null;
		this.tiles_ = null;
		var _g = 0;
		var _g1 = this.tilemaps_;
		while(_g < _g1.length) {
			var tilemap = _g1[_g];
			++_g;
			tilemap.removeTiles();
		}
		this.tilemaps_ = null;
		iriysoft_graphic_IsfRenderData.prototype.dispose.call(this);
	}
	,Reset: function() {
		this.renderPlace.removeChildren();
		this.FreeTiles();
		this.FreeTilemaps();
		this.curr_texture_key_ = -1;
		this.textures_data_ = [];
		this.root_ = null;
		this.draw_calls = 0;
		this.draw_tiles = 0;
	}
	,textures_data: function() {
		return this.textures_data_;
	}
	,AddDisplaObject: function(display_object) {
		this.GetRoot().addChild(display_object);
		this.curr_texture_key_ = -1;
		++this.draw_calls;
	}
	,AddRoot: function(root) {
		this.GetRoot().addChild(root);
		var pre_root = this.root_;
		this.root_ = root;
		this.curr_texture_key_ = -1;
		++this.draw_calls;
		return pre_root;
	}
	,RestoreRoot: function(root) {
		this.root_ = root;
		this.curr_texture_key_ = -1;
		++this.draw_calls;
	}
	,AddTile: function(texture_key,tile_id,x,y,a,b,c,d,alpha) {
		if(texture_key != this.curr_texture_key_) {
			this.curr_tilemap_ = this.GetTilemap();
			this.GetRoot().addChild(this.curr_tilemap_);
			this.curr_texture_key_ = texture_key;
			this.textures_data_.push(new iriysoft_graphic_TextureData(texture_key,this.GetRoot().get_numChildren() - 1,this.GetRoot()));
			++this.draw_calls;
		}
		var tile = this.GetTile();
		tile.set_id(tile_id);
		if(tile.get_id() < 0) {
			haxe_Log.trace("TIle ID",{ fileName : "../framework/nme/src_nme/iriysoft/graphic/IsfRenderDataNME.hx", lineNumber : 118, className : "iriysoft.graphic.IsfRenderDataNME", methodName : "AddTile", customParams : [tile.get_id()]});
		}
		var tile_mtx = tile.get_matrix();
		tile_mtx.tx = x;
		tile_mtx.ty = y;
		tile_mtx.a = a;
		tile_mtx.b = b;
		tile_mtx.c = c;
		tile_mtx.d = d;
		tile.set_alpha(alpha);
		this.curr_tilemap_.addTile(tile);
		++this.draw_tiles;
	}
	,GetRoot: function() {
		if(this.root_ != null) {
			return this.root_;
		}
		return this.renderPlace;
	}
	,GetTile: function() {
		if(this.last_free_tile_ >= this.tiles_.length) {
			this.tiles_.push(new openfl_display_Tile());
		}
		return this.tiles_[this.last_free_tile_++];
	}
	,FreeTiles: function() {
		this.last_free_tile_ = 0;
	}
	,GetTilemap: function() {
		if(this.last_free_tilemap_ >= this.tilemaps_.length) {
			var render_rect = GlobalBase.GetRenderRect();
			var tilemap = new openfl_display_Tilemap(render_rect.width | 0,render_rect.height | 0);
			if(iriysoft_graphic_IsfRenderDataNME.tilemap_shader != null) {
				tilemap.set_shader(iriysoft_graphic_IsfRenderDataNME.tilemap_shader);
			}
			tilemap.tileBlendModeEnabled = false;
			this.tilemaps_.push(tilemap);
		}
		var tilemap1 = this.tilemaps_[this.last_free_tilemap_++];
		tilemap1.removeTiles();
		return tilemap1;
	}
	,FreeTilemaps: function() {
		this.last_free_tilemap_ = 0;
	}
	,GetFreeTilemaps: function() {
		this.last_free_tilemap_ = 0;
	}
	,tiles_: null
	,last_free_tile_: null
	,tilemaps_: null
	,last_free_tilemap_: null
	,curr_texture_key_: null
	,curr_tilemap_: null
	,textures_data_: null
	,__class__: iriysoft_graphic_IsfRenderDataNME
});
var iriysoft_graphic_TextureData = function(texture_key_,tilemap_index_,root_) {
	this.root = null;
	this.tilemap_index = -1;
	this.texture_key = -1;
	this.texture_key = texture_key_;
	this.tilemap_index = tilemap_index_;
	this.root = root_;
};
$hxClasses["iriysoft.graphic.TextureData"] = iriysoft_graphic_TextureData;
iriysoft_graphic_TextureData.__name__ = "iriysoft.graphic.TextureData";
iriysoft_graphic_TextureData.prototype = {
	texture_key: null
	,tilemap_index: null
	,root: null
	,__class__: iriysoft_graphic_TextureData
};
var iriysoft_graphic_IsfTextFieldNME = function(fontQualityScale) {
	this.m_input = false;
	this.m_useNativeTextField = false;
	this.m_smooth = false;
	this.html_text_ = null;
	this.emptyBounds = false;
	this.real_height_ = -1;
	this.c_margin = 4;
	this.m_offsetY = 0;
	this.m_offsetX = 0;
	this.render_scale = 1;
	this.cached_ = false;
	this.m_changed = false;
	this.bitmapWidth_ = -1;
	this.bitmapHeight_ = -1;
	this.fontQualityScale_ = 1;
	this.mapFonts = new haxe_ds_StringMap();
	this.addLeading = 0;
	this.fontMarginYCoef = 0;
	this.tilemap_text_root_ = null;
	this.backpack_height_ = 0;
	this.backpack_width_ = 0;
	this.backpack_id_ = -1;
	iriysoft_graphic_IsfViewObject.call(this);
	this.fontQualityScale_ = fontQualityScale;
	this.m_bitmap = new openfl_display_Bitmap();
	this.m_bitmap.smoothing = true;
	this.textField = new openfl_text_TextField();
	this.textField.set_embedFonts(true);
	this.textField.set_selectable(false);
	this.textField.mouseEnabled = false;
	this.m_smooth = false;
	this.m_changed = true;
	this.set_htmlText("");
	this.set_text("");
	this.__matrix2 = new openfl_geom_Matrix();
	this.__bounds = new openfl_geom_Rectangle();
	this.__p1 = new openfl_geom_Point();
	this.__rect = new openfl_geom_Rectangle();
	this.m_offsetX = 0;
	this.set_textFormat(new iriysoft_graphic_IsfTextFormat());
};
$hxClasses["iriysoft.graphic.IsfTextFieldNME"] = iriysoft_graphic_IsfTextFieldNME;
iriysoft_graphic_IsfTextFieldNME.__name__ = "iriysoft.graphic.IsfTextFieldNME";
iriysoft_graphic_IsfTextFieldNME.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME,iriysoft_graphic_IIsfTextField];
iriysoft_graphic_IsfTextFieldNME.__super__ = iriysoft_graphic_IsfViewObject;
iriysoft_graphic_IsfTextFieldNME.prototype = $extend(iriysoft_graphic_IsfViewObject.prototype,{
	backpack_id_: null
	,backpack_width_: null
	,backpack_height_: null
	,tilemap_text_root_: null
	,fontMarginYCoef: null
	,addLeading: null
	,mapFonts: null
	,fontQualityScale_: null
	,bitmapHeight_: null
	,bitmapWidth_: null
	,m_changed: null
	,cached_: null
	,__matrix2: null
	,__bounds: null
	,__p1: null
	,__rect: null
	,render_scale: null
	,customDispose: function() {
		if(this.m_bitmap.get_bitmapData() != null) {
			this.m_bitmap.get_bitmapData().dispose();
		}
		this.m_bitmap = null;
		this.DisposeTilemapTextRoot();
		iriysoft_graphic_IsfViewObject.prototype.customDispose.call(this);
	}
	,getHtmlString: function() {
		if(this.html_text_ != null) {
			return this.html_text_;
		}
		var str = "<font face='" + this.get_textFormat().font + "' size='" + this.get_textFormat().size + "' align='" + this.get_textFormat().align + "'><b>" + this.m_text + "</b></font>";
		return str;
	}
	,getOpenFLTextFormat: function() {
		var fmt = new openfl_text_TextFormat();
		var this1 = this.mapFonts;
		var key = this.get_textFormat().font;
		var _this = this1;
		var font_name = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(font_name == null) {
			font_name = this.get_textFormat().font;
		}
		fmt.font = font_name;
		fmt.size = this.get_textFormat().size;
		fmt.color = this.get_textFormat().color;
		fmt.bold = this.get_textFormat().bold;
		fmt.italic = this.get_textFormat().italic;
		switch(this.get_textFormat().align) {
		case "center":
			fmt.align = 0;
			break;
		case "justify":
			fmt.align = 2;
			break;
		case "left":
			fmt.align = 3;
			break;
		case "right":
			fmt.align = 4;
			break;
		}
		fmt.leftMargin = this.get_textFormat().leftMargin;
		fmt.rightMargin = this.get_textFormat().rightMargin;
		fmt.indent = this.get_textFormat().indent;
		fmt.leading = this.get_textFormat().leading + this.addLeading;
		this.get_textFormat().underline = this.get_textFormat().underline;
		fmt.blockIndent = this.get_textFormat().blockIndent;
		fmt.bullet = this.get_textFormat().bullet;
		fmt.letterSpacing = this.get_textFormat().letterSpacing;
		return fmt;
	}
	,m_offsetX: null
	,m_offsetY: null
	,c_margin: null
	,cacheBitmap: function() {
		if(this.render_scale != this.fontQualityScale_) {
			this.render_scale = this.fontQualityScale_;
			this.m_changed = true;
		}
		if(!this.m_changed) {
			return;
		}
		if(this.m_useNativeTextField) {
			return;
		}
		this.real_height_ = -1;
		this.m_changed = false;
		var txtWidth = Math.ceil(this.textField.get_width() + this.c_margin * 2);
		var txtHeight = Math.ceil(this.textField.get_height() + this.c_margin * 2);
		this.textField.set_defaultTextFormat(this.getOpenFLTextFormat());
		if(this.html_text_ != "" && this.html_text_ != null) {
			this.textField.set_htmlText(this.html_text_);
		} else {
			this.textField.set_text(this.m_text);
		}
		var bd = new openfl_display_BitmapData(Math.ceil(txtWidth * this.render_scale),Math.ceil(txtHeight * this.render_scale),true,0);
		if(iriysoft_graphic_IsfTextFieldNME.DEBUG_FRAME) {
			var wide = 5;
			var _g = 0;
			var _g1 = wide;
			while(_g < _g1) {
				var i = _g++;
				bd.fillRect(new openfl_geom_Rectangle(i,i,bd.width - i * 2,bd.height - i * 2),-16711936);
			}
			bd.fillRect(new openfl_geom_Rectangle(wide,wide,bd.width - wide * 2,bd.height - wide * 2),0);
		}
		this.m_offsetX = Math.ceil(-this.c_margin);
		this.m_offsetY = Math.ceil(-this.c_margin + Math.round(this.get_textFormat().size * this.fontMarginYCoef));
		var mtr = new openfl_geom_Matrix();
		mtr.scale(this.render_scale,this.render_scale);
		mtr.translate(this.c_margin,this.c_margin);
		bd.draw(this.textField,mtr);
		if(this.m_bitmap.get_bitmapData() != null) {
			this.m_bitmap.get_bitmapData().dispose();
		}
		this.m_bitmap = new openfl_display_Bitmap();
		if(this.filters_ != null && this.filters_.length > 0) {
			var glow = js_Boot.__cast(this.filters_[0].clone() , openfl_filters_GlowFilter);
			var _g2 = glow;
			_g2.set_blurX(_g2.get_blurX() * this.render_scale);
			var _g3 = glow;
			_g3.set_blurY(_g3.get_blurY() * this.render_scale);
			glow.set_quality(1);
			glow.set_strength(2);
			bd.applyFilter(bd,new openfl_geom_Rectangle(0,0,bd.width,bd.height),new openfl_geom_Point(),glow);
		}
		this.m_bitmap.set_bitmapData(bd);
		this.m_bitmap.smoothing = true;
		this.cached_ = true;
	}
	,CalcColor: function(v1,v2,a) {
		return v1 * a + v2 * (1 - a) | 0;
	}
	,set_width: function(_width) {
		if(this.textField.get_width() == _width) {
			return _width;
		}
		this.m_invalidate = this.m_changed = true;
		return this.textField.set_width(_width);
	}
	,get_width: function() {
		if(this.emptyBounds) {
			return 0;
		}
		return this.textField.get_width();
	}
	,set_height: function(_height) {
		if(this.textField.get_height() == _height) {
			return _height;
		}
		this.m_invalidate = this.m_changed = true;
		return this.textField.set_height(_height);
	}
	,get_height: function() {
		if(this.emptyBounds) {
			return 0;
		}
		return this.textField.get_height();
	}
	,real_height_: null
	,GetRealHeight: function() {
		this.cacheBitmap();
		if(this.real_height_ != -1) {
			return this.real_height_;
		}
		this.real_height_ = this.textField.get_textHeight() * Global.kScale;
		return this.real_height_;
	}
	,emptyBounds: null
	,set_pixelSnapping: function(v) {
		return this.m_bitmap.pixelSnapping = v;
	}
	,get_pixelSnapping: function() {
		return this.m_bitmap.pixelSnapping;
	}
	,getBounds: function(_targetSpace) {
		this.cacheBitmap();
		if(this.emptyBounds) {
			var p = this.calcBoundPoint(-this.m_offsetX,-this.m_offsetY,_targetSpace);
			this.__bounds.setTo(p.x,p.y,0,0);
			return this.__bounds;
		}
		this.__rect.setTo(-this.m_offsetX,-this.m_offsetY,this.get_width() * this.render_scale,this.GetRealHeight() / Global.kScale * this.render_scale);
		var p1 = this.calcBoundPoint(this.__rect.get_left(),this.__rect.get_top(),_targetSpace);
		this.__bounds.set_left(p1.x);
		this.__bounds.set_right(p1.x);
		this.__bounds.set_top(p1.y);
		this.__bounds.set_bottom(p1.y);
		p1 = this.calcBoundPoint(this.__rect.get_right(),this.__rect.get_top(),_targetSpace);
		this.IncreaseRectangle(this.__bounds,p1.x,p1.y);
		p1 = this.calcBoundPoint(this.__rect.get_right(),this.__rect.get_bottom(),_targetSpace);
		this.IncreaseRectangle(this.__bounds,p1.x,p1.y);
		p1 = this.calcBoundPoint(this.__rect.get_left(),this.__rect.get_bottom(),_targetSpace);
		this.IncreaseRectangle(this.__bounds,p1.x,p1.y);
		return this.__bounds;
	}
	,calcBoundPoint: function(_x,_y,_targetSpace) {
		this.__p1.x = _x;
		this.__p1.y = _y;
		if(_targetSpace != null && _targetSpace != this) {
			this.__p1 = this.localToGlobal(this.__p1);
			this.__p1 = _targetSpace.globalToLocal(this.__p1);
		}
		return this.__p1;
	}
	,updateMatrix: function() {
		if(!this.m_invalidate) {
			return;
		}
		this.cacheBitmap();
		this.m_matrix.identity();
		this.m_matrix.translate(-this.m_offsetX,-this.m_offsetY);
		this.m_matrix.scale(this.m_scaleX / this.render_scale,this.m_scaleY / this.render_scale);
		if(this.m_skewX != 0 || this.m_skewY != 0) {
			var sinX = Math.sin(this.m_skewX);
			var cosX = Math.cos(this.m_skewX);
			var sinY = Math.sin(this.m_skewY);
			var cosY = Math.cos(this.m_skewY);
			this.m_matrix.setTo(this.m_matrix.a * cosY - this.m_matrix.b * sinX,this.m_matrix.a * sinY + this.m_matrix.b * cosX,this.m_matrix.c * cosY - this.m_matrix.d * sinX,this.m_matrix.c * sinY + this.m_matrix.d * cosX,this.m_matrix.tx * cosY - this.m_matrix.ty * sinX,this.m_matrix.tx * sinY + this.m_matrix.ty * cosX);
		} else {
			this.m_matrix.rotate(this.m_angle);
		}
		this.m_matrix.translate(-this.m_x,-this.m_y);
		this.m_invalidate = false;
	}
	,m_bitmap: null
	,textField: null
	,m_text: null
	,get_text: function() {
		if(this.get_useNativeTextField()) {
			return this.m_nativeTextField.get_text();
		}
		return this.m_text;
	}
	,set_text: function(_txt) {
		if(this.m_text == _txt) {
			return _txt;
		}
		this.m_invalidate = this.m_changed = true;
		this.m_text = _txt;
		return this.m_text;
	}
	,html_text_: null
	,get_htmlText: function() {
		return this.html_text_;
	}
	,set_htmlText: function(_htmlText) {
		if(this.html_text_ == _htmlText) {
			return _htmlText;
		}
		this.m_invalidate = this.m_changed = true;
		this.html_text_ = _htmlText;
		return this.html_text_;
	}
	,m_textFromat: null
	,get_textFormat: function() {
		return this.m_textFromat;
	}
	,set_textFormat: function(_txtFromat) {
		this.m_invalidate = this.m_changed = true;
		this.m_textFromat = _txtFromat;
		return this.m_textFromat;
	}
	,get_wordWrap: function() {
		return this.textField.get_wordWrap();
	}
	,set_wordWrap: function(_v) {
		this.m_invalidate = this.m_changed = true;
		return this.textField.set_wordWrap(_v);
	}
	,get_multiline: function() {
		return this.textField.get_multiline();
	}
	,set_multiline: function(_v) {
		this.m_invalidate = this.m_changed = true;
		return this.textField.set_multiline(_v);
	}
	,m_smooth: null
	,get_smooth: function() {
		return this.m_smooth;
	}
	,set_smooth: function(_v) {
		if(_v == this.m_smooth) {
			return _v;
		}
		this.m_invalidate = this.m_changed = true;
		return this.m_smooth = _v;
	}
	,m_nativeTextField: null
	,m_useNativeTextField: null
	,get_useNativeTextField: function() {
		return this.m_useNativeTextField;
	}
	,set_useNativeTextField: function(_v) {
		if(_v == this.m_useNativeTextField) {
			return _v;
		}
		this.m_invalidate = this.m_changed = true;
		if(!_v) {
			if(this.m_nativeTextField != null && this.m_nativeTextField.parent != null) {
				this.m_nativeTextField.parent.removeChild(this.m_nativeTextField);
			}
			this.m_nativeTextField = null;
		}
		return this.m_useNativeTextField = _v;
	}
	,m_input: null
	,get_input: function() {
		return this.m_input;
	}
	,set_input: function(_v) {
		if(_v == this.m_input) {
			return _v;
		}
		this.m_invalidate = this.m_changed = true;
		return this.m_input = _v;
	}
	,getBitmapWidth: function() {
		this.cacheBitmap();
		return this.bitmapWidth_;
	}
	,getBitmapHeight: function() {
		this.cacheBitmap();
		return this.bitmapHeight_;
	}
	,ProcessTextRoot: function() {
		var cont = this.get_parent();
		while(cont != null) {
			if(cont.IsTextRoot()) {
				break;
			}
			cont = cont.get_parent();
		}
		if(cont == null) {
			return false;
		}
		var cont_nme = cont;
		cont_nme.RenderText(this.m_bitmap);
		return true;
	}
	,DisposeTilemapTextRoot: function() {
		if(this.tilemap_text_root_ == null) {
			return;
		}
		if(this.backpack_id_ != -1) {
			this.tilemap_text_root_.FreeTilemapText(this.backpack_id_);
			this.backpack_id_ = -1;
		}
		this.tilemap_text_root_ = null;
	}
	,ProcessTilemapTextRoot: function() {
		var cont = this.get_parent();
		while(cont != null) {
			if(cont.IsTilemapTextRoot()) {
				break;
			}
			cont = cont.get_parent();
		}
		if(cont == null) {
			return false;
		}
		var cont_nme = cont;
		if(cont_nme != this.tilemap_text_root_) {
			this.DisposeTilemapTextRoot();
			this.tilemap_text_root_ = cont_nme;
			this.cached_ = true;
		}
		if(this.cached_) {
			if(this.backpack_id_ == -1 || this.backpack_width_ != (this.get_width() | 0) || this.backpack_height_ != (this.get_height() | 0)) {
				this.backpack_id_ = this.tilemap_text_root_.AllocTilemapText(this.backpack_id_,this.m_bitmap.get_bitmapData().width,this.m_bitmap.get_bitmapData().height);
				this.backpack_width_ = this.get_width() | 0;
				this.backpack_height_ = this.get_height() | 0;
			}
			this.tilemap_text_root_.DrawTilemapText(this.backpack_id_,this.m_bitmap.get_bitmapData());
			this.m_bitmap.get_bitmapData().dispose();
			this.m_bitmap.set_bitmapData(null);
			this.cached_ = false;
		}
		return true;
	}
	,render: function(_renderData,_matrix,_alpha) {
		var newAlpha = this.get_alpha() * _alpha;
		if(this.get_visible() == false || newAlpha == 0) {
			return;
		}
		this.__tmpMatrix.copyFrom(this.get_transformMatrix());
		this.__tmpMatrix.concat(_matrix);
		this.__matrix2.a = this.__tmpMatrix.a;
		this.__matrix2.b = this.__tmpMatrix.b;
		this.__matrix2.c = this.__tmpMatrix.c;
		this.__matrix2.d = this.__tmpMatrix.d;
		this.__matrix2.tx = -this.__tmpMatrix.tx;
		this.__matrix2.ty = -this.__tmpMatrix.ty;
		if(iriysoft_graphic_IsfTextFieldNME.LOCK_TEXT) {
			return;
		}
		var renderData = js_Boot.__cast(_renderData , iriysoft_graphic_IsfRenderDataNME);
		if(!this.m_useNativeTextField) {
			this.cacheBitmap();
			if(this.ProcessTextRoot()) {
				this.m_bitmap.get_transform().set_matrix(this.__matrix2);
				this.m_bitmap.set_alpha(newAlpha);
			} else if(this.ProcessTilemapTextRoot()) {
				var tile = this.tilemap_text_root_.RenderTilemapText(this.backpack_id_);
				tile.set_matrix(this.__matrix2);
				tile.set_alpha(newAlpha);
			} else {
				this.m_bitmap.get_transform().set_matrix(this.__matrix2);
				this.m_bitmap.set_alpha(newAlpha);
				_renderData.AddDisplaObject(this.m_bitmap);
			}
		} else {
			var tmp = this.m_nativeTextField == null;
			if(this.m_changed) {
				this.m_changed = false;
				this.m_nativeTextField.set_selectable(true);
				if(this.m_input) {
					this.m_nativeTextField.set_type(1);
				} else {
					this.m_nativeTextField.set_type(0);
				}
				this.m_nativeTextField.set_defaultTextFormat(this.getOpenFLTextFormat());
				this.m_nativeTextField.set_width(this.textField.get_width());
				this.m_nativeTextField.set_height(this.textField.get_height());
				this.m_nativeTextField.set_text(this.m_text);
				this.m_nativeTextField.set_filters(this.textField.get_filters());
			}
			this.__tmpMatrix.identity();
			this.__tmpMatrix.scale(1 / this.render_scale,1 / this.render_scale);
			this.__tmpMatrix.scale(this.m_scaleX,this.m_scaleY);
			this.__tmpMatrix.rotate(this.m_angle);
			this.__tmpMatrix.translate(-this.m_x,-this.m_y);
			this.__tmpMatrix.concat(_matrix);
			var mtr1 = this.m_nativeTextField.get_transform().get_matrix();
			mtr1.a = this.__tmpMatrix.a;
			mtr1.b = this.__tmpMatrix.b;
			mtr1.c = this.__tmpMatrix.c;
			mtr1.d = this.__tmpMatrix.d;
			mtr1.tx = -this.__tmpMatrix.tx;
			mtr1.ty = -this.__tmpMatrix.ty;
			this.m_nativeTextField.get_transform().set_matrix(mtr1);
			this.m_nativeTextField.set_alpha(newAlpha);
			this.m_nativeTextField.set_visible(this.get_visible());
		}
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		return false;
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		return false;
	}
	,updateMove: function(_globalX,_globalY) {
		return false;
	}
	,__class__: iriysoft_graphic_IsfTextFieldNME
	,__properties__: $extend(iriysoft_graphic_IsfViewObject.prototype.__properties__,{set_input:"set_input",get_input:"get_input",set_useNativeTextField:"set_useNativeTextField",get_useNativeTextField:"get_useNativeTextField",set_smooth:"set_smooth",get_smooth:"get_smooth",set_multiline:"set_multiline",get_multiline:"get_multiline",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",set_pixelSnapping:"set_pixelSnapping",get_pixelSnapping:"get_pixelSnapping"})
});
var iriysoft_graphic_IsfTextFormat = function() {
	this.align = "left";
	this.blockIndent = 0;
	this.bold = false;
	this.bullet = false;
	this.color = 16777215;
	this.font = "Times New Roman";
	this.indent = 0;
	this.italic = false;
	this.kerning = false;
	this.leading = 0;
	this.leftMargin = 0;
	this.letterSpacing = 0;
	this.rightMargin = 0;
	this.size = 12;
	this.underline = false;
};
$hxClasses["iriysoft.graphic.IsfTextFormat"] = iriysoft_graphic_IsfTextFormat;
iriysoft_graphic_IsfTextFormat.__name__ = "iriysoft.graphic.IsfTextFormat";
iriysoft_graphic_IsfTextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,underline: null
	,getCopy: function() {
		var t = new iriysoft_graphic_IsfTextFormat();
		t.align = this.align;
		t.blockIndent = this.blockIndent;
		t.bold = this.bold;
		t.bullet = this.bullet;
		t.color = this.color;
		t.font = this.font;
		t.indent = this.indent;
		t.italic = this.italic;
		t.kerning = this.kerning;
		t.leading = this.leading;
		t.leftMargin = this.leftMargin;
		t.letterSpacing = this.letterSpacing;
		t.rightMargin = this.rightMargin;
		t.size = this.size;
		t.underline = this.underline;
		return t;
	}
	,toString: function() {
		return this.font + this.align + this.blockIndent + Std.string(this.bold) + Std.string(this.bullet) + this.color + this.indent + Std.string(this.italic) + Std.string(this.kerning) + this.leading + this.leftMargin + this.letterSpacing + this.rightMargin + this.size + Std.string(this.underline);
	}
	,__class__: iriysoft_graphic_IsfTextFormat
};
var iriysoft_graphic_IsfTouchObject = function(_parent) {
	this.touchDowns = new haxe_ds_IntMap();
	iriysoft_core_IsfDisposableObject.call(this);
	this.parent = _parent;
};
$hxClasses["iriysoft.graphic.IsfTouchObject"] = iriysoft_graphic_IsfTouchObject;
iriysoft_graphic_IsfTouchObject.__name__ = "iriysoft.graphic.IsfTouchObject";
iriysoft_graphic_IsfTouchObject.ProcessRolls = function() {
	var _g = 0;
	var _g1 = iriysoft_graphic_IsfTouchObject.roll_items_;
	while(_g < _g1.length) {
		var ri = _g1[_g];
		++_g;
		if(ri.touch == null) {
			continue;
		}
		if(ri.touch.disposed) {
			ri.touch = null;
		}
	}
	var _g2 = 0;
	var _g3 = iriysoft_graphic_IsfTouchObject.roll_items_;
	while(_g2 < _g3.length) {
		var ri1 = _g3[_g2];
		++_g2;
		if(ri1.touch == null) {
			continue;
		}
		if(ri1.roll_in) {
			continue;
		}
		if(ri1.over) {
			continue;
		}
		var managed = ri1.touch.parent;
		managed.signalRollOut.dispatch(managed);
		ri1.touch = null;
	}
	var _g4 = 0;
	var _g5 = iriysoft_graphic_IsfTouchObject.roll_items_;
	while(_g4 < _g5.length) {
		var ri2 = _g5[_g4];
		++_g4;
		if(ri2.touch == null) {
			continue;
		}
		if(!ri2.roll_in) {
			continue;
		}
		var managed1 = ri2.touch.parent;
		managed1.signalRollIn.dispatch(managed1);
	}
	var _g6 = 0;
	var _g7 = iriysoft_graphic_IsfTouchObject.roll_items_;
	while(_g6 < _g7.length) {
		var ri3 = _g7[_g6];
		++_g6;
		ri3.over = false;
		ri3.roll_in = false;
	}
};
iriysoft_graphic_IsfTouchObject.AddRoll = function(touch) {
	var _g = 0;
	var _g1 = iriysoft_graphic_IsfTouchObject.roll_items_;
	while(_g < _g1.length) {
		var ri = _g1[_g];
		++_g;
		if(ri.touch == touch) {
			ri.over = true;
			return;
		}
	}
	var ri_new = new iriysoft_graphic_RollItem(touch);
	ri_new.roll_in = true;
	iriysoft_graphic_IsfTouchObject.roll_items_.push(ri_new);
};
iriysoft_graphic_IsfTouchObject.__super__ = iriysoft_core_IsfDisposableObject;
iriysoft_graphic_IsfTouchObject.prototype = $extend(iriysoft_core_IsfDisposableObject.prototype,{
	parent: null
	,touchDowns: null
	,customDispose: function() {
		this.parent = null;
		this.touchDowns = null;
		iriysoft_core_IsfDisposableObject.prototype.customDispose.call(this);
	}
	,IsDown: function(button_id) {
		if(this.touchDowns.h.hasOwnProperty(button_id)) {
			return this.touchDowns.h[button_id];
		} else {
			return false;
		}
	}
	,touchDown: function(_globalX,_globalY,_buttonId,hit) {
		if(hit == 0) {
			if(this.parent.touchable == false) {
				return false;
			}
			hit = this.parent.checkHit(_globalX,_globalY) ? 1 : 2;
		}
		var touchDownHit = hit == 1;
		if(touchDownHit) {
			this.parent.signalTouchDown.dispatch(this.parent,_globalX,_globalY,_buttonId);
		}
		this.touchDowns.h[_buttonId] = touchDownHit;
		return touchDownHit;
	}
	,touchUp: function(_globalX,_globalY,_buttonId,hit) {
		if(hit == 0) {
			if(this.parent.touchable == false) {
				return false;
			}
		}
		var touchDownHit = this.touchDowns.h.hasOwnProperty(_buttonId) && this.touchDowns.h[_buttonId];
		if(touchDownHit) {
			this.parent.signalTouchUp.dispatch(this.parent,_globalX,_globalY,_buttonId);
		}
		if(this.disposed) {
			return false;
		}
		if(hit == 0) {
			hit = this.parent.checkHit(_globalX,_globalY) ? 1 : 2;
		}
		this.touchDowns.remove(_buttonId);
		if(hit == 1) {
			if(touchDownHit) {
				this.parent.signalTouch.dispatch(this.parent,_globalX,_globalY,_buttonId);
			}
			return true;
		}
		return false;
	}
	,updateMove: function(_globalX,_globalY,hit) {
		if(hit == 0) {
			if(this.parent.touchable == false) {
				return false;
			}
		}
		var res_hit = hit == 1;
		if(hit == 0) {
			res_hit = this.parent.checkHit(_globalX,_globalY);
		}
		if(res_hit) {
			iriysoft_graphic_IsfTouchObject.AddRoll(this);
		}
		return res_hit;
	}
	,__class__: iriysoft_graphic_IsfTouchObject
});
var iriysoft_graphic_RollItem = function(touch_) {
	this.over = false;
	this.roll_in = false;
	this.touch = touch_;
};
$hxClasses["iriysoft.graphic.RollItem"] = iriysoft_graphic_RollItem;
iriysoft_graphic_RollItem.__name__ = "iriysoft.graphic.RollItem";
iriysoft_graphic_RollItem.prototype = {
	touch: null
	,roll_in: null
	,over: null
	,__class__: iriysoft_graphic_RollItem
};
var iriysoft_graphic_IsfUniversalAnimation = function() {
	this.anim_ = null;
	iriysoft_graphic_IsfAnimation.call(this);
};
$hxClasses["iriysoft.graphic.IsfUniversalAnimation"] = iriysoft_graphic_IsfUniversalAnimation;
iriysoft_graphic_IsfUniversalAnimation.__name__ = "iriysoft.graphic.IsfUniversalAnimation";
iriysoft_graphic_IsfUniversalAnimation.__interfaces__ = [iriysoft_graphic_IIsfViewObjectNME];
iriysoft_graphic_IsfUniversalAnimation.__super__ = iriysoft_graphic_IsfAnimation;
iriysoft_graphic_IsfUniversalAnimation.prototype = $extend(iriysoft_graphic_IsfAnimation.prototype,{
	animation: function() {
		return this.anim_;
	}
	,set_animation: function(v) {
		this.anim_ = v;
		if(this.anim_ != null) {
			this.anim_.stop();
			if(this.anim_.get_parent() != null) {
				this.anim_.get_parent().removeChild(this.anim_);
			}
			this.m_currentFrame = this.m_startFrame;
			this.m_endFrame = this.anim_.get_totalFrames();
			this.m_totalFrame = this.anim_.get_totalFrames();
		}
		return this;
	}
	,ApplyCont: function(v) {
		this.removeAllChildren(true);
		if(v == null) {
			return;
		}
		while(v.get_numChildren() > 0) {
			var child = v.getChildAt(0);
			this.addChild(child);
		}
		v.dispose();
	}
	,render: function(_renderData,_matrix,_alpha) {
		if(this.anim_ != null) {
			this.anim_.Update(this.get_currentFrame());
			var _g = 0;
			var _g1 = this.anim_.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				if(i >= this.get_numChildren()) {
					break;
				}
				var child_src = js_Boot.__cast(this.anim_.getChildAt(i) , iriysoft_graphic_IsfViewObject);
				var child_dst = js_Boot.__cast(this.getChildAt(i) , iriysoft_graphic_IsfViewObject);
				child_dst.m_matrix.copyFrom(child_src.m_matrix);
				child_dst.set_alpha(child_src.get_alpha());
				child_dst.m_invalidate = false;
			}
		}
		iriysoft_graphic_IsfViewObjectContainerNME.RENDER(this,_renderData,_matrix,_alpha);
	}
	,checkTouchDown: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_DOWN(this,_globalX,_globalY,_buttonId);
	}
	,checkTouchUp: function(_globalX,_globalY,_buttonId) {
		return iriysoft_graphic_IsfViewObjectContainerNME.TOUCH_UP(this,_globalX,_globalY,_buttonId);
	}
	,updateMove: function(_globalX,_globalY) {
		return iriysoft_graphic_IsfViewObjectContainerNME.UPDATE_MOVE(this,_globalX,_globalY);
	}
	,anim_: null
	,__class__: iriysoft_graphic_IsfUniversalAnimation
});
var iriysoft_graphic_RenderInfo = function() {
	this.draw_tiles = 0;
	this.draw_calls = 0;
};
$hxClasses["iriysoft.graphic.RenderInfo"] = iriysoft_graphic_RenderInfo;
iriysoft_graphic_RenderInfo.__name__ = "iriysoft.graphic.RenderInfo";
iriysoft_graphic_RenderInfo.prototype = {
	draw_calls: null
	,draw_tiles: null
	,__class__: iriysoft_graphic_RenderInfo
};
var iriysoft_graphic_atlas_IsfImageTT = function(_textureID,_tileIndex,_tx,_ty,_width,_height,_rotated) {
	this.textureID = _textureID;
	this.tileIndex = _tileIndex;
	this.anchor = new openfl_geom_Matrix();
	if(_rotated) {
		this.anchor.translate(_width - _ty,_tx);
		this.anchor.rotate(-Math.PI / 2);
	} else {
		this.anchor.translate(_tx,_ty);
	}
	this.TLx = -_tx;
	this.TLy = -_ty;
	if(_rotated) {
		this.BRx = _height + this.TLx;
		this.BRy = _width + this.TLy;
	} else {
		this.BRx = _width + this.TLx;
		this.BRy = _height + this.TLy;
	}
};
$hxClasses["iriysoft.graphic.atlas.IsfImageTT"] = iriysoft_graphic_atlas_IsfImageTT;
iriysoft_graphic_atlas_IsfImageTT.__name__ = "iriysoft.graphic.atlas.IsfImageTT";
iriysoft_graphic_atlas_IsfImageTT.__interfaces__ = [iriysoft_graphic_IITileInfo];
iriysoft_graphic_atlas_IsfImageTT.prototype = {
	anchor: null
	,textureID: null
	,tileIndex: null
	,getTileIndex: function() {
		return this.tileIndex;
	}
	,dispose: function() {
		this.anchor = null;
	}
	,TLx: null
	,TLy: null
	,BRx: null
	,BRy: null
	,__class__: iriysoft_graphic_atlas_IsfImageTT
};
var iriysoft_graphic_atlas_IsfTileLocation = function(_textureID,_x,_y,_width,_height,_rotated) {
	this.textureID = _textureID;
	this.x = _x;
	this.y = _y;
	this.width = _width;
	this.height = _height;
	this.rotated = _rotated;
};
$hxClasses["iriysoft.graphic.atlas.IsfTileLocation"] = iriysoft_graphic_atlas_IsfTileLocation;
iriysoft_graphic_atlas_IsfTileLocation.__name__ = "iriysoft.graphic.atlas.IsfTileLocation";
iriysoft_graphic_atlas_IsfTileLocation.prototype = {
	tileIndex: null
	,textureID: null
	,x: null
	,y: null
	,width: null
	,height: null
	,rotated: null
	,__class__: iriysoft_graphic_atlas_IsfTileLocation
};
var iriysoft_graphic_res_IsfAnimationCompositionDescriptor = function(_pViewManager,_animIdSet) {
	iriysoft_core_IsfDisposableObject.call(this);
	iriysoft_graphic_res_IsfAnimationCompositionDescriptor.ref_viewManager = _pViewManager;
	this.m_animIdSet = _animIdSet;
};
$hxClasses["iriysoft.graphic.res.IsfAnimationCompositionDescriptor"] = iriysoft_graphic_res_IsfAnimationCompositionDescriptor;
iriysoft_graphic_res_IsfAnimationCompositionDescriptor.__name__ = "iriysoft.graphic.res.IsfAnimationCompositionDescriptor";
iriysoft_graphic_res_IsfAnimationCompositionDescriptor.__interfaces__ = [iriysoft_graphic_res_IIsfViewObjectDescriptor];
iriysoft_graphic_res_IsfAnimationCompositionDescriptor.__super__ = iriysoft_core_IsfDisposableObject;
iriysoft_graphic_res_IsfAnimationCompositionDescriptor.prototype = $extend(iriysoft_core_IsfDisposableObject.prototype,{
	m_animIdSet: null
	,customDispose: function() {
		iriysoft_graphic_res_IsfAnimationCompositionDescriptor.ref_viewManager = null;
		this.m_animIdSet = null;
		iriysoft_core_IsfDisposableObject.prototype.customDispose.call(this);
	}
	,createViewObject: function(_id,_mode) {
		if(_mode == null) {
			_mode = "";
		}
		var animSet = [];
		var _g = 0;
		var _g1 = this.m_animIdSet;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			animSet.push(iriysoft_graphic_res_IsfAnimationCompositionDescriptor.ref_viewManager.createAnimation(s));
		}
		return new iriysoft_graphic_IsfAnimationCompositionNME(animSet);
	}
	,__class__: iriysoft_graphic_res_IsfAnimationCompositionDescriptor
});
var iriysoft_gui_ScreenConverter = function(_virtualScreenWidth,_virtualScreenHeight,_minAspectRatio,_maxAspectRatio,_preserveHeight) {
	if(_preserveHeight == null) {
		_preserveHeight = true;
	}
	if(_maxAspectRatio == null) {
		_maxAspectRatio = 1.7777777777777777;
	}
	if(_minAspectRatio == null) {
		_minAspectRatio = 1.25;
	}
	this.signalResize = new iriysoft_signal_IsfSignal1();
	iriysoft_core_IsfDisposableObject.call(this);
	this.screenWidth = 1;
	this.screenHeight = 1;
	this.m_minAspectRatio = _minAspectRatio;
	this.m_maxAspectRatio = _maxAspectRatio;
	this.m_preserveHeight = _preserveHeight;
	this.m_backgroundImages = new haxe_ds_ObjectMap();
	this.m_images = new haxe_ds_ObjectMap();
	this.resizeVirtual(_virtualScreenWidth,_virtualScreenHeight);
};
$hxClasses["iriysoft.gui.ScreenConverter"] = iriysoft_gui_ScreenConverter;
iriysoft_gui_ScreenConverter.__name__ = "iriysoft.gui.ScreenConverter";
iriysoft_gui_ScreenConverter.__super__ = iriysoft_core_IsfDisposableObject;
iriysoft_gui_ScreenConverter.prototype = $extend(iriysoft_core_IsfDisposableObject.prototype,{
	signalResize: null
	,screenWidth: null
	,screenHeight: null
	,virtualScreenWidth: null
	,virtualScreenHeight: null
	,scaleToScreen: null
	,m_minAspectRatio: null
	,m_maxAspectRatio: null
	,m_virtualCenterX: null
	,m_virtualCenterY: null
	,m_horMargin: null
	,m_vertMargin: null
	,m_preserveHeight: null
	,m_backgroundImages: null
	,m_images: null
	,customDispose: function() {
		var image = this.m_backgroundImages.keys();
		while(image.hasNext()) {
			var image1 = image.next();
			this.m_backgroundImages.remove(image1);
		}
		var image2 = this.m_images.keys();
		while(image2.hasNext()) {
			var image3 = image2.next();
			this.m_images.remove(image3);
		}
		this.m_backgroundImages = null;
		this.m_images = null;
		this.signalResize.dispose();
		this.signalResize = null;
		iriysoft_core_IsfDisposableObject.prototype.customDispose.call(this);
	}
	,resize: function(_newWidth,_newHeight) {
		if(_newWidth <= 0) {
			_newWidth = 1;
		}
		if(_newHeight <= 0) {
			_newHeight = 1;
		}
		if(this.screenWidth != _newWidth || this.screenHeight != _newHeight) {
			this.screenWidth = _newWidth;
			this.screenHeight = _newHeight;
			this.updateData();
			this.signalResize.dispatch(this);
		}
	}
	,resizeVirtual: function(_virtualWidth,_virtualHeight) {
		if(_virtualWidth <= 0) {
			_virtualWidth = 1;
		}
		if(_virtualHeight <= 0) {
			_virtualHeight = 1;
		}
		if(this.virtualScreenWidth != _virtualWidth || this.virtualScreenHeight != _virtualHeight) {
			this.virtualScreenWidth = _virtualWidth;
			this.virtualScreenHeight = _virtualHeight;
			this.updateData();
		}
	}
	,updateData: function() {
		this.m_horMargin = 0;
		this.m_vertMargin = 0;
		this.scaleToScreen = this.m_preserveHeight ? this.screenHeight / this.virtualScreenHeight : this.screenWidth / this.virtualScreenWidth;
		if(this.m_preserveHeight) {
			var minWidth = this.m_minAspectRatio * this.screenHeight;
			if(this.screenWidth < minWidth) {
				this.scaleToScreen *= this.screenWidth / minWidth;
				this.m_vertMargin = 0.5 * (this.screenHeight - this.virtualScreenHeight * this.scaleToScreen);
			} else {
				var maxWidth = this.m_maxAspectRatio * this.screenHeight;
				if(this.screenWidth > maxWidth) {
					this.m_horMargin = 0.5 * (this.screenWidth - maxWidth);
				}
			}
		} else {
			var minHeight = this.screenWidth / this.m_minAspectRatio;
			if(this.screenHeight < minHeight) {
				this.scaleToScreen *= this.screenHeight / minHeight;
				this.m_horMargin = 0.5 * (this.screenWidth - this.virtualScreenWidth * this.scaleToScreen);
			} else {
				var maxHeight = this.screenWidth / this.m_maxAspectRatio;
				if(this.screenHeight > maxHeight) {
					this.m_vertMargin = 0.5 * (this.screenHeight - maxHeight);
				}
			}
		}
		this.m_virtualCenterX = 0.5 * (this.screenWidth - this.virtualScreenWidth * this.scaleToScreen);
		this.m_virtualCenterY = 0.5 * (this.screenHeight - this.virtualScreenHeight * this.scaleToScreen);
		var image = this.m_backgroundImages.keys();
		while(image.hasNext()) {
			var image1 = image.next();
			this.alignBackgroundImage(image1);
		}
		var image2 = this.m_images.keys();
		while(image2.hasNext()) {
			var image3 = image2.next();
			this.alignImage(image3);
		}
	}
	,getScreenX: function(_virtualX) {
		return _virtualX * this.scaleToScreen + this.m_virtualCenterX;
	}
	,getScreenY: function(_virtualY) {
		return _virtualY * this.scaleToScreen + this.m_virtualCenterY;
	}
	,getVirtualX: function(_screenX) {
		return (_screenX - this.m_virtualCenterX) / this.scaleToScreen;
	}
	,getVirtualY: function(_screenY) {
		return (_screenY - this.m_virtualCenterY) / this.scaleToScreen;
	}
	,addBackgroundImage: function(_image,_keepProportions,_viewport) {
		if(_keepProportions == null) {
			_keepProportions = true;
		}
		this.m_backgroundImages.set(_image,{ keepProportions : _keepProportions, viewport : _viewport});
		this.alignBackgroundImage(_image);
	}
	,removeBackgroundImage: function(_image) {
		this.m_backgroundImages.remove(_image);
	}
	,alignBackgroundImage: function(_image) {
		var center = new openfl_geom_Point();
		var vpHeightFactor = 1;
		var vpWidthFactor = 1;
		var imageOptions = this.m_backgroundImages.h[_image.__id__];
		var viewport = imageOptions.viewport;
		if(viewport != null) {
			_image.set_scaleX(_image.set_scaleY(1));
			vpHeightFactor = _image.get_height() / viewport.height;
			vpWidthFactor = _image.get_width() / viewport.width;
			center.x = viewport.x + 0.5 * viewport.width;
			center.y = viewport.y + 0.5 * viewport.height;
		} else {
			var bounds = _image.getBounds(_image);
			center.x = 0.5 * (bounds.get_left() + bounds.get_right());
			center.y = 0.5 * (bounds.get_top() + bounds.get_bottom());
		}
		if(imageOptions.keepProportions) {
			if(this.m_preserveHeight) {
				_image.set_height(this.virtualScreenHeight * this.scaleToScreen * vpHeightFactor);
				_image.set_scaleX(_image.get_scaleY());
			} else {
				_image.set_width(this.virtualScreenWidth * this.scaleToScreen * vpWidthFactor);
				_image.set_scaleY(_image.get_scaleX());
			}
		} else {
			_image.set_height((this.screenHeight - 2 * this.m_vertMargin) * vpHeightFactor);
			_image.set_width((this.screenWidth - 2 * this.m_horMargin) * vpWidthFactor);
		}
		var screenCenter = new openfl_geom_Point(0.5 * this.screenWidth,0.5 * this.screenHeight);
		if(_image.get_parent() != null) {
			screenCenter = _image.get_parent().globalToLocal(screenCenter);
		}
		_image.set_x(screenCenter.x - center.x * _image.get_scaleX() | 0);
		_image.set_y(screenCenter.y - center.y * _image.get_scaleY() | 0);
	}
	,getImagePos: function(_image,_x,_y,_virtual,_snapX,_snapY) {
		if(_snapY == null) {
			_snapY = 0;
		}
		if(_snapX == null) {
			_snapX = 0;
		}
		if(_virtual == null) {
			_virtual = true;
		}
		var newPos = new openfl_geom_Point();
		var xShift = _virtual ? _x * this.scaleToScreen : _x;
		var yShift = _virtual ? _y * this.scaleToScreen : _y;
		var tmp;
		switch(_snapX) {
		case 0:
			tmp = _virtual ? this.getScreenX(_x) : _x;
			break;
		case 1:
			tmp = this.m_horMargin + xShift;
			break;
		case 2:
			tmp = 0.5 * this.screenWidth + xShift;
			break;
		case 3:
			tmp = this.screenWidth - this.m_horMargin + xShift;
			break;
		}
		newPos.x = tmp;
		var tmp1;
		switch(_snapY) {
		case 0:
			tmp1 = _virtual ? this.getScreenY(_y) : _y;
			break;
		case 1:
			tmp1 = this.m_vertMargin + yShift;
			break;
		case 2:
			tmp1 = 0.5 * this.screenHeight + yShift;
			break;
		case 3:
			tmp1 = this.screenHeight - this.m_vertMargin + yShift;
			break;
		}
		newPos.y = tmp1;
		if(_image.get_parent() != null) {
			newPos = _image.get_parent().globalToLocal(newPos);
		}
		return newPos;
	}
	,getImageSize: function(_image,_virtualWidth,_virtualHeight) {
		return { width : _virtualWidth * this.scaleToScreen, height : _virtualHeight * this.scaleToScreen};
	}
	,addImage: function(_image,_x,_y,_virtual,_snapX,_snapY,_scaleable) {
		if(_scaleable == null) {
			_scaleable = false;
		}
		if(_snapY == null) {
			_snapY = 0;
		}
		if(_snapX == null) {
			_snapX = 0;
		}
		if(_virtual == null) {
			_virtual = true;
		}
		var desc = { x : _x, y : _y, virtual : _virtual, snapX : _snapX, snapY : _snapY, width : _image.get_width(), height : _image.get_height(), scaleable : _scaleable};
		this.m_images.set(_image,desc);
		this.alignImage(_image);
	}
	,removeImage: function(_image) {
		this.m_images.remove(_image);
	}
	,alignImage: function(_image) {
		var desc = this.m_images.h[_image.__id__];
		var newPos = this.getImagePos(_image,desc.x,desc.y,desc.virtual,desc.snapX,desc.snapY);
		_image.set_x(newPos.x | 0);
		_image.set_y(newPos.y | 0);
		if(desc.scaleable) {
			var size = this.getImageSize(_image,desc.width,desc.height);
			_image.set_width(size.width);
			_image.set_height(size.height);
		}
	}
	,__class__: iriysoft_gui_ScreenConverter
});
var iriysoft_helper_Fwh = function() { };
$hxClasses["iriysoft.helper.Fwh"] = iriysoft_helper_Fwh;
iriysoft_helper_Fwh.__name__ = "iriysoft.helper.Fwh";
iriysoft_helper_Fwh.TraceChilds = function(view) {
	if(view == null) {
		return;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return;
	}
	var cont = js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		var child = cont.getChildAt(i);
		haxe_Log.trace(child.get_name(),{ fileName : "../framework/hx/src_fw/iriysoft/helper/Fwh.hx", lineNumber : 35, className : "iriysoft.helper.Fwh", methodName : "TraceChilds", customParams : [Type.typeof(child)]});
	}
};
iriysoft_helper_Fwh.AnimStartRecursive = function(view,from_frame,repeats) {
	if(view == null) {
		return;
	}
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		var anim = js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
		anim.start(from_frame,repeats);
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return;
	}
	var cont = js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		iriysoft_helper_Fwh.AnimStartRecursive(cont.getChildAt(i),from_frame,repeats);
	}
};
iriysoft_helper_Fwh.TraceParents = function(view,callback) {
	if(view == null || callback == null) {
		return;
	}
	callback(view);
	iriysoft_helper_Fwh.TraceParents(view.get_parent(),callback);
};
iriysoft_helper_Fwh.CancelEventRecursive = function(view) {
	if(view == null) {
		return;
	}
	if(view.get_parent() == null) {
		return;
	}
	if(!js_Boot.__implements(view.get_parent(),iriysoft_graphic_IIsfViewObjectContainer)) {
		return;
	}
	var cont = js_Boot.__cast(view.get_parent() , iriysoft_graphic_IIsfViewObjectContainer);
	cont.CancelEvent();
	iriysoft_helper_Fwh.CancelEventRecursive(cont);
};
iriysoft_helper_Fwh.CreateV = function(raw_data,view_manager) {
	return UiCreator.Create(raw_data,view_manager);
};
iriysoft_helper_Fwh.CreateC = function(raw_data,view_manager) {
	var view = iriysoft_helper_Fwh.CreateV(raw_data,view_manager);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.CreateA = function(raw_data,view_manager) {
	var view = iriysoft_helper_Fwh.CreateV(raw_data,view_manager);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.FindV = function(root,name) {
	return UiCreator.Find(root,name);
};
iriysoft_helper_Fwh.FindC = function(root,name) {
	var view = iriysoft_helper_Fwh.FindV(root,name);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.FindA = function(root,name) {
	var view = iriysoft_helper_Fwh.FindV(root,name);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.FindT = function(root,name) {
	var view = iriysoft_helper_Fwh.FindV(root,name);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.GetChildV = function(root,path) {
	if(path == null) {
		return root;
	}
	var _g = 0;
	while(_g < path.length) {
		var name = path[_g];
		++_g;
		if(!js_Boot.__implements(root,iriysoft_graphic_IIsfViewObjectContainer)) {
			return null;
		}
		root = (js_Boot.__cast(root , iriysoft_graphic_IIsfViewObjectContainer)).getChildByName(name);
	}
	return root;
};
iriysoft_helper_Fwh.GetChildC = function(root,path) {
	var view = iriysoft_helper_Fwh.GetChildV(root,path);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.GetChildA = function(root,path) {
	var view = iriysoft_helper_Fwh.GetChildV(root,path);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.GetChildT = function(root,path) {
	var view = iriysoft_helper_Fwh.GetChildV(root,path);
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		return js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.GetChildB = function(root,path) {
	var view = iriysoft_helper_Fwh.GetChildV(root,path);
	if(((view) instanceof iriysoft_graphic_IsfButton)) {
		return js_Boot.__cast(view , iriysoft_graphic_IsfButton);
	} else {
		return null;
	}
};
iriysoft_helper_Fwh.ChildSetHtmlText = function(root,path,html_text) {
	var text_field = iriysoft_helper_Fwh.GetChildT(root,path);
	if(text_field != null) {
		text_field.set_htmlText(html_text);
	}
	return text_field;
};
iriysoft_helper_Fwh.ChildSetText = function(root,path,text) {
	var text_field = iriysoft_helper_Fwh.GetChildT(root,path);
	if(text_field != null) {
		text_field.set_text(text);
	}
	return text_field;
};
iriysoft_helper_Fwh.ChildButtonInit = function(root,path,callback,sound_manager,text) {
	return iriysoft_helper_Fwh.ButtonInit(iriysoft_helper_Fwh.GetChildB(root,path),callback,sound_manager,text);
};
iriysoft_helper_Fwh.ChildSetVisible = function(root,path,visible) {
	var view = iriysoft_helper_Fwh.GetChildV(root,path);
	if(view != null) {
		view.set_visible(visible);
	}
	return view;
};
iriysoft_helper_Fwh.ChildSetVisibleAll = function(root,path,visible) {
	var cont = iriysoft_helper_Fwh.GetChildC(root,path);
	if(cont == null) {
		return;
	}
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		cont.getChildAt(i).set_visible(visible);
	}
};
iriysoft_helper_Fwh.ChildGotoAndStop = function(root,path,frame) {
	var anim = iriysoft_helper_Fwh.GetChildA(root,path);
	if(anim != null) {
		anim.gotoFrame(frame);
		anim.stop();
	}
	return anim;
};
iriysoft_helper_Fwh.ChildStart = function(root,path,start_frame,repeats) {
	if(repeats == null) {
		repeats = -1;
	}
	var anim = iriysoft_helper_Fwh.GetChildA(root,path);
	if(anim != null) {
		anim.start(start_frame,repeats);
	}
	return anim;
};
iriysoft_helper_Fwh.ChildAddChildAt = function(root,path,child,at) {
	if(at == null) {
		at = -1;
	}
	if(child == null) {
		return;
	}
	var cont = iriysoft_helper_Fwh.GetChildC(root,path);
	if(cont == null) {
		return;
	}
	if(at == -1) {
		cont.addChild(child);
	} else {
		cont.addChildAt(child,at);
	}
};
iriysoft_helper_Fwh.HideAllChilds = function(view) {
	try {
		var view_c = js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
		var _g = 0;
		var _g1 = view_c.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			view_c.getChildAt(i).set_visible(false);
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
};
iriysoft_helper_Fwh.FormatTime = function(time_sec,sep,use_hours,use_mins,use_secs) {
	if(time_sec < 0) {
		time_sec = 0;
	}
	var hours = Math.floor(time_sec / 3600);
	var mins = Math.floor((time_sec - hours * 3600) / 60);
	var secs = Math.floor(time_sec - hours * 3600 - mins * 60);
	var out = "";
	if(use_hours) {
		if(hours < 10) {
			out += "0";
		}
		out += hours == null ? "null" : "" + hours;
	}
	if(use_mins) {
		if(out.length > 0) {
			out += sep;
		}
		if(mins < 10) {
			out += "0";
		}
		out += mins == null ? "null" : "" + mins;
	}
	if(use_secs) {
		if(out.length > 0) {
			out += sep;
		}
		if(secs < 10) {
			out += "0";
		}
		out += secs == null ? "null" : "" + secs;
	}
	return out;
};
iriysoft_helper_Fwh.ResetViewGeom = function(view) {
	view.set_x(0);
	view.set_y(0);
	view.set_rotation(0);
	view.set_scaleX(1);
	view.set_scaleY(1);
};
iriysoft_helper_Fwh.EmptyTextsBounds = function(view) {
	if(view == null) {
		return;
	}
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		var txt = js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
		txt.emptyBounds = true;
		return;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return;
	}
	var cont = js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		iriysoft_helper_Fwh.EmptyTextsBounds(cont.getChildAt(i));
	}
};
iriysoft_helper_Fwh.GetLowestParent = function(view) {
	var view_tmp = view;
	while(view_tmp.get_parent() != null) view_tmp = view_tmp.get_parent();
	if(view == view_tmp) {
		return null;
	} else {
		return view_tmp;
	}
};
iriysoft_helper_Fwh.AddChildByName = function(root,name,child) {
	if(root == null) {
		return;
	}
	if(name == null) {
		return;
	}
	if(child == null) {
		return;
	}
	var cont = UiCreator.FindC(root,name);
	if(cont == null) {
		return;
	}
	cont.addChild(child);
};
iriysoft_helper_Fwh.SetAlphaByName = function(root,name,alpha) {
	if(root == null) {
		return null;
	}
	if(name == null) {
		return null;
	}
	var view = UiCreator.Find(root,name);
	if(view == null) {
		return null;
	}
	view.set_alpha(alpha);
	return view;
};
iriysoft_helper_Fwh.SetVisibleByName = function(root,name,visible) {
	if(root == null) {
		return null;
	}
	if(name == null) {
		return null;
	}
	var view = UiCreator.Find(root,name);
	if(view == null) {
		return null;
	}
	view.set_visible(visible);
	return view;
};
iriysoft_helper_Fwh.GotoAndStop = function(view,frame) {
	if(view == null) {
		return null;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return null;
	}
	var anim = js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	anim.gotoFrame(frame);
	anim.stop();
	return anim;
};
iriysoft_helper_Fwh.GotoAndStopFactor = function(view,factor) {
	if(view == null) {
		return null;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return null;
	}
	var anim = js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	anim.gotoFrame(1 + ((anim.get_totalFrames() - 1) * factor | 0));
	anim.stop();
	return anim;
};
iriysoft_helper_Fwh.StartPlay = function(view,frame,repeats) {
	if(view == null) {
		return null;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		return null;
	}
	var anim = js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
	anim.start(frame,repeats);
	return anim;
};
iriysoft_helper_Fwh.GotoAndStopByName = function(root,name,frame) {
	return iriysoft_helper_Fwh.GotoAndStop(UiCreator.Find(root,name),frame);
};
iriysoft_helper_Fwh.GotoAndStopFactorByName = function(root,name,factor) {
	return iriysoft_helper_Fwh.GotoAndStopFactor(UiCreator.Find(root,name),factor);
};
iriysoft_helper_Fwh.StartPlayByName = function(root,name,frame,repeats) {
	return iriysoft_helper_Fwh.StartPlay(UiCreator.Find(root,name),frame,repeats);
};
iriysoft_helper_Fwh.SetTextByName = function(root,name,text) {
	if(root == null) {
		return null;
	}
	if(name == null) {
		return null;
	}
	if(text == null) {
		text = "";
	}
	var text_field = UiCreator.FindT(root,name);
	var text_field_shadow = UiCreator.FindT(root,name + "_shadow");
	if(text_field == null) {
		return null;
	}
	if(text_field_shadow != null) {
		text_field_shadow.set_text(text);
	}
	text_field.set_text(text);
	return text_field;
};
iriysoft_helper_Fwh.SetHtmlTextByName = function(root,name,text) {
	if(root == null) {
		return null;
	}
	if(name == null) {
		return null;
	}
	if(text == null) {
		text = "";
	}
	var text_field = UiCreator.FindT(root,name);
	if(text_field == null) {
		return null;
	}
	text_field.set_htmlText(text);
	return text_field;
};
iriysoft_helper_Fwh.SetTextColorByName = function(root,name,color) {
	if(root == null) {
		return;
	}
	if(name == null) {
		return;
	}
	var text_field = UiCreator.FindT(root,name);
	if(text_field == null) {
		return;
	}
	text_field.get_textFormat().color = color;
	text_field.set_textFormat(text_field.get_textFormat());
};
iriysoft_helper_Fwh.SetText = function(view,text) {
	if(view == null) {
		return;
	}
	if(text == null) {
		text = "";
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		return;
	}
	var text_field = js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
	text_field.set_text(text);
};
iriysoft_helper_Fwh.SetTextColor = function(view,color) {
	if(view == null) {
		return;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfTextField)) {
		return;
	}
	var text_field = js_Boot.__cast(view , iriysoft_graphic_IIsfTextField);
	text_field.get_textFormat().color = color;
	text_field.set_textFormat(text_field.get_textFormat());
};
iriysoft_helper_Fwh.SetTextFormat = function(view,text,$arguments) {
	iriysoft_helper_Fwh.SetText(view,iriysoft_helper_Fwh.Format(text,$arguments));
	return;
};
iriysoft_helper_Fwh.SetTextFormatByName = function(root,name,text,$arguments) {
	return iriysoft_helper_Fwh.SetTextByName(root,name,iriysoft_helper_Fwh.Format(text,$arguments));
};
iriysoft_helper_Fwh.SetHtmlTextFormatByName = function(root,name,text,$arguments) {
	return iriysoft_helper_Fwh.SetHtmlTextByName(root,name,iriysoft_helper_Fwh.Format(text,$arguments));
};
iriysoft_helper_Fwh.RandomizeArray = function(arr) {
	return arr[arr.length * Math.random() | 0];
};
iriysoft_helper_Fwh.Format = function(str,$arguments) {
	if(str == null || str.length == 0 || $arguments == null) {
		return "";
	}
	var out_str = "";
	var char_code = 0;
	var index = 0;
	var i = 0;
	var tmp_i = 0;
	var j = 0;
	while(true) {
		char_code = HxOverrides.cca(str,i);
		if(char_code == 35) {
			j = 1;
			char_code = HxOverrides.cca(str,i + j);
			if(char_code == 123) {
				++j;
				while(true) {
					char_code = HxOverrides.cca(str,i + j);
					if(char_code < 48 || char_code > 57) {
						break;
					}
					++j;
				}
				if(char_code == 125) {
					index = Std.parseInt(HxOverrides.substr(str,i + 2,j - 2));
					if(index >= 0 || index < $arguments.length) {
						out_str += Std.string($arguments[index - 1]);
					}
					i += j + 1;
					continue;
				}
			}
		}
		if(i >= str.length) {
			break;
		}
		out_str += str.charAt(i);
		++i;
	}
	return out_str;
};
iriysoft_helper_Fwh.PlaceBefore = function(before_view,view_to_place) {
	if(before_view == null) {
		return;
	}
	if(before_view.get_parent() == null) {
		return;
	}
	if(view_to_place == null) {
		return;
	}
	var index = before_view.get_parent().getChildIndex(before_view);
	before_view.get_parent().addChildAt(view_to_place,index);
};
iriysoft_helper_Fwh.PlaceAfter = function(after_view,view_to_place) {
	if(after_view == null) {
		return;
	}
	if(after_view.get_parent() == null) {
		return;
	}
	if(view_to_place == null) {
		return;
	}
	var index = after_view.get_parent().getChildIndex(after_view);
	after_view.get_parent().addChildAt(view_to_place,index + 1);
};
iriysoft_helper_Fwh.PlaceBelow = function(above_view,below_view,offset) {
	if(above_view == null) {
		return;
	}
	if(below_view == null) {
		return;
	}
	var above_bounds = above_view.getBounds(below_view.get_parent());
	below_view.set_y(above_bounds.get_bottom() + offset * Global.kScale);
};
iriysoft_helper_Fwh.ChildPlaceBelow = function(above_root,above_path,below_root,below_path,offset) {
	if(above_root == null) {
		return;
	}
	if(below_root == null) {
		return;
	}
	iriysoft_helper_Fwh.PlaceBelow(iriysoft_helper_Fwh.GetChildV(above_root,above_path),iriysoft_helper_Fwh.GetChildV(below_root,below_path),offset);
};
iriysoft_helper_Fwh.DisposeByName = function(cont,name) {
	var view = UiCreator.Find(cont,name);
	if(view == null) {
		return;
	}
	view.dispose();
};
iriysoft_helper_Fwh.RemoveFromParent = function(view) {
	if(view == null) {
		return;
	}
	if(view.get_parent() == null) {
		return;
	}
	view.get_parent().removeChild(view);
};
iriysoft_helper_Fwh.RemoveFromParentByName = function(cont,name) {
	iriysoft_helper_Fwh.RemoveFromParent(UiCreator.Find(cont,name));
};
iriysoft_helper_Fwh.Replace = function(remove_view,replace_view) {
	if(remove_view == replace_view) {
		return;
	}
	iriysoft_helper_Fwh.PlaceBefore(remove_view,replace_view);
	iriysoft_helper_Fwh.RemoveFromParent(remove_view);
};
iriysoft_helper_Fwh.ReplacePosName = function(remove_view,replace_view) {
	iriysoft_helper_Fwh.Replace(remove_view,replace_view);
	if(replace_view != null && remove_view != null) {
		replace_view.set_x(remove_view.get_x());
		replace_view.set_y(remove_view.get_y());
		replace_view.set_name(remove_view.get_name());
	}
};
iriysoft_helper_Fwh.ButtonInit = function(view,callback,sound_manager,text) {
	if(view == null) {
		return null;
	}
	if(!((view) instanceof iriysoft_graphic_IsfButton)) {
		return null;
	}
	var btn = js_Boot.__cast(view , iriysoft_graphic_IsfButton);
	btn.set_disable_over(Global.touch);
	if(text != null) {
		iriysoft_helper_Fwh.ButtonSetText(btn,text);
	}
	btn.activate_sg().connect(function(b) {
		if(sound_manager != null) {
			sound_manager.Play(1);
		}
		if(callback != null) {
			callback(b);
		}
	});
	return btn;
};
iriysoft_helper_Fwh.ButtonEnable = function(root,name,enable) {
	var view = UiCreator.Find(root,name);
	if(view == null) {
		return null;
	}
	if(!((view) instanceof iriysoft_graphic_IsfButton)) {
		return null;
	}
	var btn = js_Boot.__cast(view , iriysoft_graphic_IsfButton);
	btn.set_enable(enable);
	return btn;
};
iriysoft_helper_Fwh.ButtonInitByName = function(root,name,callback,sound_manager,text) {
	return iriysoft_helper_Fwh.ButtonInit(UiCreator.Find(root,name),callback,sound_manager,text);
};
iriysoft_helper_Fwh.ButtonSetTextByName = function(button,name,text) {
	iriysoft_helper_Fwh.SetTextByName(UiCreator.Find(button,"face_up"),name,text);
	iriysoft_helper_Fwh.SetTextByName(UiCreator.Find(button,"face_over"),name,text);
	iriysoft_helper_Fwh.SetTextByName(UiCreator.Find(button,"face_down"),name,text);
	iriysoft_helper_Fwh.SetTextByName(UiCreator.Find(button,"face_disabled"),name,text);
};
iriysoft_helper_Fwh.ButtonSetHtmlTextByName = function(button,name,text) {
	iriysoft_helper_Fwh.SetHtmlTextByName(UiCreator.Find(button,"face_up"),name,text);
	iriysoft_helper_Fwh.SetHtmlTextByName(UiCreator.Find(button,"face_over"),name,text);
	iriysoft_helper_Fwh.SetHtmlTextByName(UiCreator.Find(button,"face_down"),name,text);
	iriysoft_helper_Fwh.SetHtmlTextByName(UiCreator.Find(button,"face_disabled"),name,text);
};
iriysoft_helper_Fwh.ButtonChildSetHtmlText = function(button,path,html_text) {
	var txt = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path);
	if(txt != null) {
		txt.set_htmlText(html_text);
	}
	var txt1 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path);
	if(txt1 != null) {
		txt1.set_htmlText(html_text);
	}
	var txt2 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path);
	if(txt2 != null) {
		txt2.set_htmlText(html_text);
	}
	var txt3 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path);
	if(txt3 != null) {
		txt3.set_htmlText(html_text);
	}
};
iriysoft_helper_Fwh.ButtonChildSetText = function(button,path,text) {
	var txt = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path);
	if(txt != null) {
		txt.set_text(text);
	}
	var txt1 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path);
	if(txt1 != null) {
		txt1.set_text(text);
	}
	var txt2 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path);
	if(txt2 != null) {
		txt2.set_text(text);
	}
	var txt3 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path);
	if(txt3 != null) {
		txt3.set_text(text);
	}
};
iriysoft_helper_Fwh.ButtonChildSetTextColor = function(button,path,color) {
	var txt = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path);
	if(txt != null) {
		txt.get_textFormat().color = color;
		txt.set_textFormat(txt.get_textFormat());
	}
	var txt1 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path);
	if(txt1 != null) {
		txt1.get_textFormat().color = color;
		txt1.set_textFormat(txt1.get_textFormat());
	}
	var txt2 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path);
	if(txt2 != null) {
		txt2.get_textFormat().color = color;
		txt2.set_textFormat(txt2.get_textFormat());
	}
	var txt3 = iriysoft_helper_Fwh.GetChildT(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path);
	if(txt3 != null) {
		txt3.get_textFormat().color = color;
		txt3.set_textFormat(txt3.get_textFormat());
	}
};
iriysoft_helper_Fwh.ButtonSetTextColorByName = function(button,name,color) {
	iriysoft_helper_Fwh.SetTextColorByName(UiCreator.Find(button,"face_up"),name,color);
	iriysoft_helper_Fwh.SetTextColorByName(UiCreator.Find(button,"face_over"),name,color);
	iriysoft_helper_Fwh.SetTextColorByName(UiCreator.Find(button,"face_down"),name,color);
	iriysoft_helper_Fwh.SetTextColorByName(UiCreator.Find(button,"face_disabled"),name,color);
};
iriysoft_helper_Fwh.ButtonSetText = function(view,text) {
	iriysoft_helper_Fwh.ButtonSetTextByName(view,"btn_text",text);
};
iriysoft_helper_Fwh.ButtonGotoAndStopByName = function(button,name,frame) {
	iriysoft_helper_Fwh.GotoAndStopByName(UiCreator.Find(button,"face_up"),name,frame);
	iriysoft_helper_Fwh.GotoAndStopByName(UiCreator.Find(button,"face_over"),name,frame);
	iriysoft_helper_Fwh.GotoAndStopByName(UiCreator.Find(button,"face_down"),name,frame);
	iriysoft_helper_Fwh.GotoAndStopByName(UiCreator.Find(button,"face_disabled"),name,frame);
};
iriysoft_helper_Fwh.ButtonChildGotoAndStop = function(button,path,frame) {
	iriysoft_helper_Fwh.ChildGotoAndStop(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path,frame);
	iriysoft_helper_Fwh.ChildGotoAndStop(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path,frame);
	iriysoft_helper_Fwh.ChildGotoAndStop(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path,frame);
	iriysoft_helper_Fwh.ChildGotoAndStop(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path,frame);
};
iriysoft_helper_Fwh.ButtonChildSetVisible = function(button,path,visible) {
	iriysoft_helper_Fwh.ChildSetVisible(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path,visible);
	iriysoft_helper_Fwh.ChildSetVisible(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path,visible);
	iriysoft_helper_Fwh.ChildSetVisible(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path,visible);
	iriysoft_helper_Fwh.ChildSetVisible(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path,visible);
};
iriysoft_helper_Fwh.ButtonChildAddChildAt = function(button,path,up_child,over_child,down_child,disabled_child,at) {
	if(at == null) {
		at = -1;
	}
	iriysoft_helper_Fwh.ChildAddChildAt(iriysoft_helper_Fwh.GetChildV(button,["face_up"]),path,up_child,at);
	iriysoft_helper_Fwh.ChildAddChildAt(iriysoft_helper_Fwh.GetChildV(button,["face_over"]),path,over_child,at);
	iriysoft_helper_Fwh.ChildAddChildAt(iriysoft_helper_Fwh.GetChildV(button,["face_down"]),path,down_child,at);
	iriysoft_helper_Fwh.ChildAddChildAt(iriysoft_helper_Fwh.GetChildV(button,["face_disabled"]),path,disabled_child,at);
};
iriysoft_helper_Fwh.ButtonGetFace = function(button,face) {
	return UiCreator.Find(button,face);
};
iriysoft_helper_Fwh.ButtonFind = function(button,face,name) {
	return UiCreator.Find(UiCreator.Find(button,face),name);
};
iriysoft_helper_Fwh.ButtonSetVisible = function(button,name,visible) {
	iriysoft_helper_Fwh.SetVisibleByName(UiCreator.Find(button,"face_up"),name,visible);
	iriysoft_helper_Fwh.SetVisibleByName(UiCreator.Find(button,"face_over"),name,visible);
	iriysoft_helper_Fwh.SetVisibleByName(UiCreator.Find(button,"face_down"),name,visible);
	iriysoft_helper_Fwh.SetVisibleByName(UiCreator.Find(button,"face_disabled"),name,visible);
};
iriysoft_helper_Fwh.AlignerAddBackView = function(aligner,view,keep_proportions) {
	if(view == null) {
		return;
	}
	aligner.addBackgroundImage(view,keep_proportions);
};
iriysoft_helper_Fwh.AlignerAddBack = function(aligner,cont,name,keep_proportions) {
	iriysoft_helper_Fwh.AlignerAddBackView(aligner,UiCreator.Find(cont,name),keep_proportions);
};
iriysoft_helper_Fwh.AlignerAddBackViewWithViewPort = function(aligner,view,keep_proportions,viewport) {
	if(view == null) {
		return;
	}
	aligner.addBackgroundImage(view,keep_proportions,viewport);
};
iriysoft_helper_Fwh.AlignerAddBackWithViewPort = function(aligner,cont,name,keep_proportions,viewport) {
	iriysoft_helper_Fwh.AlignerAddBackViewWithViewPort(aligner,UiCreator.Find(cont,name),keep_proportions,viewport);
};
iriysoft_helper_Fwh.AlignerAddVirtualView = function(aligner,view) {
	if(view == null) {
		return;
	}
	if(view.get_parent() == null) {
		return;
	}
	var pnt = new openfl_geom_Point(view.get_x(),view.get_y());
	var global = view.get_parent().localToGlobal(pnt);
	aligner.addImage(view,global.x,global.y);
};
iriysoft_helper_Fwh.AlignerAddVirtual = function(aligner,cont,name) {
	var view = UiCreator.Find(cont,name);
	iriysoft_helper_Fwh.AlignerAddVirtualView(aligner,view);
};
iriysoft_helper_Fwh.AlignerAddSnapView = function(aligner,view,snap_x,snap_y) {
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	iriysoft_helper_Fwh.AlignerAddSnapViewWithAllParams(aligner,view,snap_x,snap_y);
};
iriysoft_helper_Fwh.AlignerAddSnapViewScaleable = function(aligner,view,snap_x,snap_y,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	iriysoft_helper_Fwh.AlignerAddSnapViewWithAllParams(aligner,view,snap_x,snap_y,true,virtual);
};
iriysoft_helper_Fwh.AlignerAddSnapViewWithAllParams = function(aligner,view,snap_x,snap_y,scaleable,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	if(scaleable == null) {
		scaleable = false;
	}
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	if(view == null) {
		return;
	}
	if(view.get_parent() == null) {
		return;
	}
	var global = view.localToGlobal(new openfl_geom_Point());
	var x_offset = 0;
	switch(snap_x) {
	case 0:
		x_offset = global.x;
		break;
	case 1:
		x_offset = global.x;
		break;
	case 2:
		x_offset = global.x - aligner.virtualScreenWidth / 2;
		break;
	case 3:
		x_offset = global.x - aligner.virtualScreenWidth;
		break;
	}
	var y_offset = 0;
	switch(snap_y) {
	case 0:
		y_offset = global.y;
		break;
	case 1:
		y_offset = global.y;
		break;
	case 2:
		y_offset = global.y - aligner.virtualScreenHeight / 2;
		break;
	case 3:
		y_offset = global.y - aligner.virtualScreenHeight;
		break;
	}
	aligner.addImage(view,x_offset,y_offset,virtual,snap_x,snap_y,scaleable);
};
iriysoft_helper_Fwh.AlignerSnapPointView = function(aligner,view,x,y,snap_x,snap_y) {
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	if(view == null) {
		return null;
	}
	if(view.get_parent() == null) {
		return null;
	}
	var pnt = new openfl_geom_Point(x,y);
	var global = view.get_parent().localToGlobal(pnt);
	var x_offset = 0;
	switch(snap_x) {
	case 0:
		x_offset = global.x;
		break;
	case 1:
		x_offset = global.x;
		break;
	case 2:
		x_offset = global.x - 960;
		break;
	case 3:
		x_offset = global.x - 1920;
		break;
	}
	var y_offset = 0;
	switch(snap_y) {
	case 0:
		y_offset = global.y;
		break;
	case 1:
		y_offset = global.y;
		break;
	case 2:
		y_offset = global.y - 540;
		break;
	case 3:
		y_offset = global.y - 1080;
		break;
	}
	return aligner.getImagePos(view,x_offset,y_offset,false,snap_x,snap_y);
};
iriysoft_helper_Fwh.AlignerAddSnap = function(aligner,cont,name,snap_x,snap_y) {
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	iriysoft_helper_Fwh.AlignerAddSnapView(aligner,UiCreator.Find(cont,name),snap_x,snap_y);
};
iriysoft_helper_Fwh.AlignerAddSnapScaleable = function(aligner,cont,name,snap_x,snap_y,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	if(snap_y == null) {
		snap_y = 0;
	}
	if(snap_x == null) {
		snap_x = 0;
	}
	iriysoft_helper_Fwh.AlignerAddSnapViewWithAllParams(aligner,UiCreator.Find(cont,name),snap_x,snap_y,true,virtual);
};
iriysoft_helper_Fwh.AnimationSetFps = function(view,fps) {
	if(js_Boot.__implements(view,iriysoft_graphic_IIsfAnimation)) {
		var anim = js_Boot.__cast(view , iriysoft_graphic_IIsfAnimation);
		anim.set_fps(fps);
		return;
	}
	if(!js_Boot.__implements(view,iriysoft_graphic_IIsfViewObjectContainer)) {
		return;
	}
	var cont = js_Boot.__cast(view , iriysoft_graphic_IIsfViewObjectContainer);
	var _g = 0;
	var _g1 = cont.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		iriysoft_helper_Fwh.AnimationSetFps(cont.getChildAt(i),fps);
	}
};
iriysoft_helper_Fwh.IsVisible = function(view) {
	if(view == null) {
		return false;
	}
	if(!view.get_visible()) {
		return false;
	}
	if(js_Boot.__implements(view,IRenderLayer)) {
		return true;
	}
	if(view.get_parent() == null) {
		return false;
	}
	return iriysoft_helper_Fwh.IsVisible(view.get_parent());
};
iriysoft_helper_Fwh.GetTime = function() {
	return new Date().getTime() / 1000;
};
iriysoft_helper_Fwh.GetArrayIndex = function(array,value) {
	var size = array.length;
	if(size == 0) {
		return 1;
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		var arr_val = array[i];
		if(value < arr_val) {
			return i;
		}
	}
	return size;
};
iriysoft_helper_Fwh.CalcResizeData = function() {
	var stage = openfl_Lib.get_current().stage;
	var newStageWidth = stage.stageWidth;
	var newStageHeight = stage.stageHeight;
	var pixelRatio = 1;
	var scroll_x = 0;
	var scroll_y = 0;
	
      newStageWidth = window.innerWidth;
      newStageHeight = window.innerHeight;
      pixelRatio = window.devicePixelRatio;
      scroll_x = window.scrollX;
      scroll_y = window.scrollY;
    ;
	var scale = Math.min(newStageWidth / Global.kScrWidth,newStageHeight / Global.kScrHeight);
	var font_scale = Math.ceil(scale * pixelRatio * 10 + 2) / 10;
	var width = newStageWidth / scale;
	var height = newStageHeight / scale;
	var offset_x = 0;
	if(width > Global.kMaxScrWidth) {
		offset_x = (width - Global.kMaxScrWidth) / 2 * scale;
		width = Global.kMaxScrWidth;
	}
	var offset_y = 0;
	if(height > Global.kMaxScrHeight) {
		offset_y = (height - Global.kMaxScrHeight) / 2 * scale;
		height = Global.kMaxScrHeight;
	}
	var resize_data = new iriysoft_helper_ResizeData();
	resize_data.scroll_x = scroll_x * pixelRatio;
	resize_data.scroll_y = scroll_y * pixelRatio;
	resize_data.width = width;
	resize_data.height = height;
	resize_data.scale = scale * pixelRatio;
	resize_data.offset_x = offset_x * pixelRatio;
	resize_data.offset_y = offset_y * pixelRatio;
	resize_data.font_scale = font_scale * Global.kScale;
	resize_data.pixel_ratio = pixelRatio;
	return resize_data;
};
iriysoft_helper_Fwh.CalcResizeOld = function(root) {
	var newStageWidth = root.stage.stageWidth;
	var newStageHeight = root.stage.stageHeight;
	var pixelRatio = 1;
	var scroll_x = 0;
	var scroll_y = 0;
	
      newStageWidth = window.innerWidth;
      newStageHeight = window.innerHeight;
      pixelRatio = window.devicePixelRatio;
      scroll_x = window.scrollX;
      scroll_y = window.scrollY;
    ;
	var stage_width = Math.ceil(newStageWidth);
	var stage_height = Math.ceil(newStageHeight);
	var scale = Math.min(stage_width / Global.kScrWidth,stage_height / Global.kScrHeight);
	var pos_x = Math.floor((stage_width / scale - Global.kMaxScrWidth) / 2);
	var root_x = Math.floor(scroll_x * pixelRatio + pos_x * scale * pixelRatio);
	var pos_y = Math.floor((stage_height / scale - Global.kMaxScrHeight) / 2);
	var root_y = Math.floor(scroll_y * pixelRatio + pos_y * scale * pixelRatio);
	var root_scale = scale * pixelRatio;
	var font_scale = Math.ceil(scale * pixelRatio * 10 + 1) / 10;
	return { x : root_x, y : root_y, scroll_x : Math.ceil(scroll_x * pixelRatio), scroll_y : Math.ceil(scroll_y * pixelRatio), pixelRatio : pixelRatio, width : Math.ceil(stage_width * pixelRatio), height : Math.ceil(stage_height * pixelRatio), scale : root_scale, font_scale : font_scale};
};
var iriysoft_helper_ResizeData = function() {
};
$hxClasses["iriysoft.helper.ResizeData"] = iriysoft_helper_ResizeData;
iriysoft_helper_ResizeData.__name__ = "iriysoft.helper.ResizeData";
iriysoft_helper_ResizeData.prototype = {
	scroll_x: null
	,scroll_y: null
	,width: null
	,height: null
	,scale: null
	,offset_x: null
	,offset_y: null
	,font_scale: null
	,pixel_ratio: null
	,__class__: iriysoft_helper_ResizeData
};
var iriysoft_signal_IsfSlotList = function() {
	this.m_slots = new haxe_ds_List();
};
$hxClasses["iriysoft.signal.IsfSlotList"] = iriysoft_signal_IsfSlotList;
iriysoft_signal_IsfSlotList.__name__ = "iriysoft.signal.IsfSlotList";
iriysoft_signal_IsfSlotList.prototype = {
	m_slots: null
	,dispose: function() {
		this.m_slots.clear();
		this.m_slots = null;
	}
	,hasSlot: function(_listener) {
		var _g_head = this.m_slots.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var listener = val;
			if(Reflect.compareMethods(listener,_listener)) {
				return true;
			}
		}
		return false;
	}
	,addSlot: function(_listener) {
		if(!this.hasSlot(_listener)) {
			this.m_slots.push(_listener);
		}
	}
	,removeSlot: function(_listener) {
		var _g_head = this.m_slots.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var listener = val;
			if(Reflect.compareMethods(listener,_listener)) {
				this.m_slots.remove(listener);
			}
		}
	}
	,removeAllSlots: function() {
		if(this.m_slots != null) {
			this.m_slots.clear();
		}
		this.m_slots = new haxe_ds_List();
	}
	,registrySlot: function(_listener,_enable) {
		if(_enable) {
			this.addSlot(_listener);
		} else {
			this.removeSlot(_listener);
		}
	}
	,__class__: iriysoft_signal_IsfSlotList
};
var iriysoft_signal_IsfSignal1 = function() {
	iriysoft_signal_IsfSlotList.call(this);
};
$hxClasses["iriysoft.signal.IsfSignal1"] = iriysoft_signal_IsfSignal1;
iriysoft_signal_IsfSignal1.__name__ = "iriysoft.signal.IsfSignal1";
iriysoft_signal_IsfSignal1.__super__ = iriysoft_signal_IsfSlotList;
iriysoft_signal_IsfSignal1.prototype = $extend(iriysoft_signal_IsfSlotList.prototype,{
	dispatch: function(_value1) {
		var _g_head = this.m_slots.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var listener = val;
			listener(_value1);
			if(this.m_slots == null) {
				break;
			}
		}
	}
	,__class__: iriysoft_signal_IsfSignal1
});
var iriysoft_signal_IsfSignal2 = function() {
	iriysoft_signal_IsfSlotList.call(this);
};
$hxClasses["iriysoft.signal.IsfSignal2"] = iriysoft_signal_IsfSignal2;
iriysoft_signal_IsfSignal2.__name__ = "iriysoft.signal.IsfSignal2";
iriysoft_signal_IsfSignal2.__super__ = iriysoft_signal_IsfSlotList;
iriysoft_signal_IsfSignal2.prototype = $extend(iriysoft_signal_IsfSlotList.prototype,{
	dispatch: function(_value1,_value2) {
		var _g_head = this.m_slots.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var listener = val;
			listener(_value1,_value2);
			if(this.m_slots == null) {
				break;
			}
		}
	}
	,__class__: iriysoft_signal_IsfSignal2
});
var iriysoft_signal_IsfSignal4 = function() {
	iriysoft_signal_IsfSlotList.call(this);
};
$hxClasses["iriysoft.signal.IsfSignal4"] = iriysoft_signal_IsfSignal4;
iriysoft_signal_IsfSignal4.__name__ = "iriysoft.signal.IsfSignal4";
iriysoft_signal_IsfSignal4.__super__ = iriysoft_signal_IsfSlotList;
iriysoft_signal_IsfSignal4.prototype = $extend(iriysoft_signal_IsfSlotList.prototype,{
	dispatch: function(_value1,_value2,_value3,_value4) {
		var _g_head = this.m_slots.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var listener = val;
			listener(_value1,_value2,_value3,_value4);
			if(this.m_slots == null) {
				break;
			}
		}
	}
	,__class__: iriysoft_signal_IsfSignal4
});
var iriysoft_sound_MusicManager = function(sound_manager) {
	this.sound_manager_ = null;
	this.music_instance_id_ = -1;
	this.music_id_ = -1;
	this.sound_manager_ = sound_manager;
};
$hxClasses["iriysoft.sound.MusicManager"] = iriysoft_sound_MusicManager;
iriysoft_sound_MusicManager.__name__ = "iriysoft.sound.MusicManager";
iriysoft_sound_MusicManager.prototype = {
	Play: function(music_id) {
		if(music_id == this.music_id_) {
			return;
		}
		this.music_id_ = music_id;
		if(this.music_instance_id_ != -1) {
			this.sound_manager_.StopInstance(this.music_instance_id_);
			this.music_instance_id_ = -1;
		}
		if(music_id == -1) {
			return;
		}
		this.music_instance_id_ = this.sound_manager_.Play(this.music_id_);
	}
	,Stop: function() {
		if(this.music_instance_id_ != -1) {
			this.sound_manager_.StopInstance(this.music_instance_id_);
			this.music_instance_id_ = -1;
		}
		this.music_id_ = -1;
	}
	,master_volume: function() {
		return this.sound_manager_.master_volume();
	}
	,set_master_volume: function(v) {
		this.sound_manager_.set_master_volume(v);
	}
	,mute: function() {
		return this.sound_manager_.mute();
	}
	,set_mute: function(v) {
		this.sound_manager_.set_mute(v);
	}
	,sound_manager: function() {
		return this.sound_manager_;
	}
	,music_id_: null
	,music_instance_id_: null
	,sound_manager_: null
	,__class__: iriysoft_sound_MusicManager
};
var iriysoft_sound_SoundManager = function(sounds) {
	this.mute_ = false;
	this.cached_ = null;
	this.sounds_time_ = null;
	this.master_volume_ = 1;
	this.current_channel_id = 0;
	this.channel_paused_position_ = -1;
	this.channel_paused_id_ = -1;
	this.channels_ = null;
	this.sounds_ = null;
	this.sounds_ = sounds;
	this.channels_ = new haxe_ds_IntMap();
	this.sounds_time_ = new haxe_ds_List();
	this.cached_ = new haxe_ds_StringMap();
};
$hxClasses["iriysoft.sound.SoundManager"] = iriysoft_sound_SoundManager;
iriysoft_sound_SoundManager.__name__ = "iriysoft.sound.SoundManager";
iriysoft_sound_SoundManager.prototype = {
	master_volume: function() {
		return this.master_volume_;
	}
	,set_master_volume: function(v) {
		this.master_volume_ = v;
		this.ReapplySoundTransform();
	}
	,PlayAdvanced: function(sound_id,loop,start_time,panning) {
		if(panning == null) {
			panning = 0;
		}
		if(start_time == null) {
			start_time = 0;
		}
		if(loop == null) {
			loop = false;
		}
		var _gthis = this;
		this.RemoveStoppedChannels();
		if(sound_id == -1) {
			return -1;
		}
		var sound_info = this.sounds_.h[sound_id];
		if(sound_info == null) {
			return -1;
		}
		if(!this.IsAllowPlay(sound_id)) {
			return -1;
		}
		if(sound_info.sound_path == null) {
			return -1;
		}
		var channel_info = { channel_id : this.current_channel_id, sound_id : sound_id, channel : null, pos : 0, checks : 0, loop : loop, length : -1, dispose : false};
		++this.current_channel_id;
		this.channels_.h[channel_info.channel_id] = channel_info;
		var key = sound_info.sound_path;
		var _this = this.cached_;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = sound_info.sound_path;
			var _this1 = this.cached_;
			var sound = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var sound_transform = this.CreateSoundTransform(sound_id);
			var loops = loop ? 2147483647 : 0;
			var channel = sound.play(start_time,loops,sound_transform);
			if(channel == null) {
				return -1;
			}
			channel_info.length = sound.get_length();
			channel_info.channel = channel;
			channel.addEventListener("soundComplete",$bind(this,this.OnSoundComplete));
		} else {
			var audio_buffer_f = lime_media_AudioBuffer.loadFromFile(sound_info.sound_path);
			audio_buffer_f.onComplete(function(buffer) {
				if(channel_info.dispose) {
					return;
				}
				var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
				if(sound1 == null) {
					return;
				}
				var key2 = sound_info.sound_path;
				var _this2 = _gthis.cached_;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,sound1);
				} else {
					_this2.h[key2] = sound1;
				}
				var sound_transform1 = _gthis.CreateSoundTransform(sound_id);
				var loops1 = loop ? 2147483647 : 0;
				var channel1 = sound1.play(start_time,loops1,sound_transform1);
				if(channel1 == null) {
					return;
				}
				channel_info.length = sound1.get_length();
				channel_info.channel = channel1;
				channel1.addEventListener("soundComplete",$bind(_gthis,_gthis.OnSoundComplete));
			});
		}
		return channel_info.channel_id;
	}
	,ClearCache: function() {
		var key = this.cached_.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.cached_;
			var snd = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			snd.close();
			var value = null;
			var _this1 = this.cached_;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
		this.cached_ = new haxe_ds_StringMap();
	}
	,SetSoundVolume: function(sound_id,volume) {
		if(sound_id == -1) {
			return;
		}
		var sound_info = this.sounds_.h[sound_id];
		if(sound_info == null) {
			return;
		}
		sound_info.volume = volume;
	}
	,GetSoundVolume: function(sound_id) {
		if(sound_id == -1) {
			return 0;
		}
		var sound_info = this.sounds_.h[sound_id];
		if(sound_info == null) {
			return 0;
		}
		return sound_info.volume;
	}
	,Play: function(sound_id) {
		if(sound_id == -1) {
			return -1;
		}
		var sound_info = this.sounds_.h[sound_id];
		if(sound_info == null) {
			return -1;
		}
		if(sound_info.sound_path == null) {
			return -1;
		}
		return this.PlayAdvanced(sound_id,sound_info.loop,sound_info.start_time,sound_info.panning);
	}
	,HasInstance: function(instance_id) {
		var channel_info = this.channels_.h[instance_id];
		if(channel_info == null) {
			return false;
		}
		return true;
	}
	,StopInstance: function(instance_id) {
		this.RemoveInstance(instance_id);
	}
	,IsSoundPlaying: function(sound_id) {
		var key = this.channels_.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var channel_info = this.channels_.h[key1];
			if(channel_info.sound_id == sound_id) {
				return true;
			}
		}
		return false;
	}
	,IsInstancePlaying: function(instance_id) {
		var channel_info = this.channels_.h[instance_id];
		if(channel_info == null) {
			return false;
		}
		return true;
	}
	,Dispose: function() {
		var key = this.channels_.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var channel_info = this.channels_.h[key1];
			var sound_info = this.sounds_.h[channel_info.sound_id];
			if(sound_info.loop && channel_info.channel != null) {
				channel_info.channel.stop();
			}
			channel_info.channel = null;
			this.channels_.remove(key1);
		}
		this.channels_ = null;
		this.sounds_ = null;
	}
	,mute: function() {
		return this.mute_;
	}
	,set_mute: function(v) {
		this.mute_ = v;
		this.ReapplySoundTransform();
	}
	,ReapplySoundTransform: function() {
		var channel_info = this.channels_.iterator();
		while(channel_info.hasNext()) {
			var channel_info1 = channel_info.next();
			if(channel_info1.channel == null) {
				continue;
			}
			var sound_transform = this.CreateSoundTransform(channel_info1.sound_id);
			channel_info1.channel.set_soundTransform(sound_transform);
		}
	}
	,IsAllowPlay: function(sound_id) {
		var time = new Date().getTime();
		time /= 1000;
		var _g_head = this.sounds_time_.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var snd_time = val;
			if(time - snd_time.time > 1) {
				this.sounds_time_.remove(snd_time);
			}
		}
		var _g1_head = this.sounds_time_.h;
		while(_g1_head != null) {
			var val1 = _g1_head.item;
			_g1_head = _g1_head.next;
			var snd_time1 = val1;
			if(sound_id == snd_time1.sound_id && time - snd_time1.time < 0.01) {
				return false;
			}
		}
		this.sounds_time_.push(new iriysoft_sound_SoundTime(sound_id,time));
		return true;
	}
	,CreateSoundTransform: function(sound_id) {
		var sound_info = this.sounds_.h[sound_id];
		return new openfl_media_SoundTransform(this.mute_ ? 0 : sound_info.volume * this.master_volume_,sound_info.panning);
	}
	,RemoveInstance: function(instance_id) {
		if(instance_id == -1) {
			return;
		}
		var channel_info = this.channels_.h[instance_id];
		if(channel_info == null) {
			return;
		}
		if(channel_info.channel == null) {
			channel_info.dispose = true;
		} else {
			channel_info.channel.stop();
			channel_info.channel.removeEventListener("soundComplete",$bind(this,this.OnSoundComplete));
		}
		channel_info.channel = null;
		this.channels_.remove(instance_id);
	}
	,OnSoundComplete: function(e) {
		var key = this.channels_.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var channel_info = this.channels_.h[key1];
			if(channel_info.channel == e.currentTarget) {
				this.RemoveInstance(key1);
				return;
			}
		}
	}
	,RemoveStoppedChannels: function() {
		var key = this.channels_.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var channel_info = this.channels_.h[key1];
			if(channel_info.loop) {
				continue;
			}
			if(channel_info.channel == null) {
				continue;
			}
			if(channel_info.channel.get_position() == channel_info.pos) {
				++channel_info.checks;
				if(channel_info.checks > 5) {
					this.RemoveInstance(key1);
				}
			} else {
				channel_info.pos = channel_info.channel.get_position();
			}
		}
	}
	,sounds_: null
	,channels_: null
	,channel_paused_id_: null
	,channel_paused_position_: null
	,current_channel_id: null
	,master_volume_: null
	,sounds_time_: null
	,cached_: null
	,mute_: null
	,__class__: iriysoft_sound_SoundManager
};
var iriysoft_sound_SoundTime = function(sound_id_in,time_in) {
	this.sound_id = sound_id_in;
	this.time = time_in;
};
$hxClasses["iriysoft.sound.SoundTime"] = iriysoft_sound_SoundTime;
iriysoft_sound_SoundTime.__name__ = "iriysoft.sound.SoundTime";
iriysoft_sound_SoundTime.prototype = {
	sound_id: null
	,time: null
	,__class__: iriysoft_sound_SoundTime
};
var iriysoft_stream_IIsfStreamSequentialInput = function() { };
$hxClasses["iriysoft.stream.IIsfStreamSequentialInput"] = iriysoft_stream_IIsfStreamSequentialInput;
iriysoft_stream_IIsfStreamSequentialInput.__name__ = "iriysoft.stream.IIsfStreamSequentialInput";
iriysoft_stream_IIsfStreamSequentialInput.__isInterface__ = true;
iriysoft_stream_IIsfStreamSequentialInput.prototype = {
	readByte: null
	,readInt: null
	,readDouble: null
	,readString: null
	,readBytes: null
	,close: null
	,__class__: iriysoft_stream_IIsfStreamSequentialInput
};
var iriysoft_stream_IsfStreamMemoryInput = function(_bytes) {
	this.m_bytes = _bytes;
	this.m_bytesInput = new haxe_io_BytesInput(_bytes);
	this.m_bytesInput.set_bigEndian(false);
};
$hxClasses["iriysoft.stream.IsfStreamMemoryInput"] = iriysoft_stream_IsfStreamMemoryInput;
iriysoft_stream_IsfStreamMemoryInput.__name__ = "iriysoft.stream.IsfStreamMemoryInput";
iriysoft_stream_IsfStreamMemoryInput.__interfaces__ = [iriysoft_stream_IIsfStreamSequentialInput];
iriysoft_stream_IsfStreamMemoryInput.prototype = {
	m_bytesInput: null
	,m_bytes: null
	,readByte: function() {
		return this.m_bytesInput.readByte();
	}
	,readInt: function() {
		return this.m_bytesInput.readInt32();
	}
	,readDouble: function() {
		return this.m_bytesInput.readDouble();
	}
	,readString: function() {
		var len = this.readInt();
		var str = "";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var code = this.m_bytesInput.readInt16();
			str += String.fromCodePoint(code);
		}
		return str;
	}
	,readBytes: function(_b,_pos,_len) {
		return this.m_bytesInput.readBytes(_b,_pos,_len);
	}
	,close: function() {
		this.m_bytesInput.close();
	}
	,__class__: iriysoft_stream_IsfStreamMemoryInput
};
var iriysoft_tween_Transition = function(_transitionFun,_x0,_x1,_duration) {
	if(_duration == null) {
		_duration = 0;
	}
	if(_x1 == null) {
		_x1 = 0;
	}
	if(_x0 == null) {
		_x0 = 0;
	}
	if(_transitionFun != null) {
		this.m_calc = _transitionFun;
	} else {
		this.m_calc = $bind(this,this.defCalc);
	}
	this.x0 = _x0;
	this.dx = _x1 - _x0;
	this.mscDuration = _duration * 1000;
};
$hxClasses["iriysoft.tween.Transition"] = iriysoft_tween_Transition;
iriysoft_tween_Transition.__name__ = "iriysoft.tween.Transition";
iriysoft_tween_Transition.jump = function(t,b,c,d) {
	var v = 0;
	if(t < d / 2) {
		v = c * 2 * t / d + b;
	} else {
		v = c * 2 * (1 - t / d) + b;
	}
	return v;
};
iriysoft_tween_Transition.linear = function(t,b,c,d) {
	return c * t / d + b;
};
iriysoft_tween_Transition.sineIn = function(t,b,c,d) {
	return -c * Math.cos(t / d * (Math.PI / 2)) + b + c;
};
iriysoft_tween_Transition.sineOut = function(t,b,c,d) {
	return c * Math.sin(t / d * (Math.PI / 2)) + b;
};
iriysoft_tween_Transition.sineInAndOut = function(t,b,c,d) {
	return -c / 2 * (Math.cos(t / d * Math.PI) - 1) + b;
};
iriysoft_tween_Transition.quadIn = function(t,b,c,d) {
	return c * (t /= d) * t + b;
};
iriysoft_tween_Transition.quadOut = function(t,b,c,d) {
	return -c * (t /= d) * (t - 2) + b;
};
iriysoft_tween_Transition.quadInAndOut = function(t,b,c,d) {
	if((t /= d / 2) < 1) {
		return c / 2 * t * t + b;
	} else {
		return -c / 2 * (--t * (t - 2) - 1) + b;
	}
};
iriysoft_tween_Transition.cubicIn = function(t,b,c,d) {
	return c * (t /= d) * t * t + b;
};
iriysoft_tween_Transition.cubicOut = function(t,b,c,d) {
	t = t / d - 1;
	return c * (t * t * t + 1) + b;
};
iriysoft_tween_Transition.cubicInAndOut = function(t,b,c,d) {
	if((t /= d / 2) < 1) {
		return c / 2 * t * t * t + b;
	} else {
		return c / 2 * ((t -= 2) * t * t + 2) + b;
	}
};
iriysoft_tween_Transition.quartIn = function(t,b,c,d) {
	return c * (t /= d) * t * t * t + b;
};
iriysoft_tween_Transition.quartOut = function(t,b,c,d) {
	t = t / d - 1;
	return -c * (t * t * t * t - 1) + b;
};
iriysoft_tween_Transition.quartInAndOut = function(t,b,c,d) {
	if((t /= d / 2) < 1) {
		return c / 2 * t * t * t * t + b;
	} else {
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	}
};
iriysoft_tween_Transition.quintIn = function(t,b,c,d) {
	return c * (t /= d) * t * t * t * t + b;
};
iriysoft_tween_Transition.quintOut = function(t,b,c,d) {
	t = t / d - 1;
	return c * (t * t * t * t * t + 1) + b;
};
iriysoft_tween_Transition.quintInAndOut = function(t,b,c,d) {
	if((t /= d / 2) < 1) {
		return c / 2 * t * t * t * t * t + b;
	} else {
		return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	}
};
iriysoft_tween_Transition.expoIn = function(t,b,c,d) {
	if(t == 0) {
		return b;
	} else {
		return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
};
iriysoft_tween_Transition.expoOut = function(t,b,c,d) {
	if(t == d) {
		return b + c;
	} else {
		return c * (-Math.pow(2,-10 * t / d) + 1) + b;
	}
};
iriysoft_tween_Transition.expoInAndOut = function(t,b,c,d) {
	if(t == 0) {
		return b;
	}
	if(t == d) {
		return b + c;
	}
	if((t /= d / 2) < 1) {
		return c / 2 * Math.pow(2,10 * (t - 1)) + b;
	}
	return c / 2 * (-Math.pow(2,-10 * --t) + 2) + b;
};
iriysoft_tween_Transition.backIn = function(t,b,c,d) {
	var s = 1.70158;
	return c * (t /= d) * t * ((s + 1) * t - s) + b;
};
iriysoft_tween_Transition.backOut = function(t,b,c,d) {
	var s = 1.70158;
	t = t / d - 1;
	return c * (t * t * ((s + 1) * t + s) + 1) + b;
};
iriysoft_tween_Transition.backInAndOut = function(t,b,c,d) {
	var s = 1.70158;
	if((t /= d / 2) < 1) {
		return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
	}
	return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
};
iriysoft_tween_Transition.bounce = function(t,b,c,d) {
	if((t /= d) < 0.36363636363636365) {
		return c * (7.5625 * t * t) + b;
	} else if(t < 0.72727272727272729) {
		return c * (7.5625 * (t -= 0.54545454545454541) * t + 0.75) + b;
	} else if(t < 0.90909090909090906) {
		return c * (7.5625 * (t -= 0.81818181818181823) * t + 0.9375) + b;
	} else {
		return c * (7.5625 * (t -= 0.95454545454545459) * t + 0.984375) + b;
	}
};
iriysoft_tween_Transition.elasticIn = function(t,b,c,d) {
	var a = iriysoft_tween_Transition.ELASTIC_AMPLITUDE;
	var p = iriysoft_tween_Transition.ELASTIC_PERIOD;
	var s;
	if(t == 0) {
		return b;
	}
	if((t /= d) == 1) {
		return b + c;
	}
	if(isNaN(p)) {
		p = d * 0.3;
	}
	if(isNaN(a) || a < Math.abs(c)) {
		a = c;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(c / a);
	}
	return -(a * Math.pow(2,10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
};
iriysoft_tween_Transition.elasticOut = function(t,b,c,d) {
	var a = iriysoft_tween_Transition.ELASTIC_AMPLITUDE;
	var p = iriysoft_tween_Transition.ELASTIC_PERIOD;
	var s;
	if(t == 0) {
		return b;
	}
	if((t /= d) == 1) {
		return b + c;
	}
	if(isNaN(p)) {
		p = d * 0.3;
	}
	if(isNaN(a) || a < Math.abs(c)) {
		a = c;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(c / a);
	}
	return a * Math.pow(2,-10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
};
iriysoft_tween_Transition.elasticInAndOut = function(t,b,c,d) {
	var a = iriysoft_tween_Transition.ELASTIC_AMPLITUDE;
	var p = iriysoft_tween_Transition.ELASTIC_PERIOD;
	var s;
	if(t == 0) {
		return b;
	}
	if((t /= d / 2) == 2) {
		return b + c;
	}
	if(isNaN(p)) {
		p = d * 0.44999999999999996;
	}
	if(isNaN(a) || a < Math.abs(c)) {
		a = c;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(c / a);
	}
	if(t < 1) {
		return -0.5 * (a * Math.pow(2,10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
	} else {
		return a * Math.pow(2,-10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
	}
};
iriysoft_tween_Transition.prototype = {
	defCalc: function(t,b,c,d) {
		return 0;
	}
	,m_calc: null
	,x0: null
	,dx: null
	,mscDuration: null
	,copyTo: function(_target) {
		_target.x0 = this.x0;
		_target.dx = this.dx;
		_target.mscDuration = this.mscDuration;
		_target.m_calc = this.m_calc;
	}
	,copyFrom: function(_srcTr) {
		_srcTr.copyTo(this);
	}
	,calc: function(mlsec) {
		return this.m_calc(mlsec,this.x0,this.dx,this.mscDuration);
	}
	,__class__: iriysoft_tween_Transition
};
var iriysoft_tween_Tween = function(_transition,_delayBeforeStart,_disposeAfterFinish,_repeatCounter) {
	if(_repeatCounter == null) {
		_repeatCounter = 1;
	}
	if(_disposeAfterFinish == null) {
		_disposeAfterFinish = true;
	}
	if(_delayBeforeStart == null) {
		_delayBeforeStart = 0;
	}
	iriysoft_core_IsfBaseObject.call(this);
	if(_transition != null) {
		this.initTween(_transition,_delayBeforeStart,_disposeAfterFinish,_repeatCounter);
	}
	this.signalTweenStart = new iriysoft_signal_IsfSignal1();
	this.signalTweenProcess = new iriysoft_signal_IsfSignal1();
	this.signalTweenFinish = new iriysoft_signal_IsfSignal1();
};
$hxClasses["iriysoft.tween.Tween"] = iriysoft_tween_Tween;
iriysoft_tween_Tween.__name__ = "iriysoft.tween.Tween";
iriysoft_tween_Tween.__super__ = iriysoft_core_IsfBaseObject;
iriysoft_tween_Tween.prototype = $extend(iriysoft_core_IsfBaseObject.prototype,{
	signalTweenStart: null
	,signalTweenProcess: null
	,signalTweenFinish: null
	,m_mscTime: null
	,getCurMscTime: function() {
		return this.m_mscTime;
	}
	,m_delayBeforeStart: null
	,repeatCounter: null
	,userData: null
	,isFinished: null
	,currentValue: null
	,previousValue: null
	,transition: null
	,setTransition: function(_transition) {
		this.transition = _transition;
	}
	,isPlaying: null
	,disposeAfterFinish: null
	,customDispose: function() {
		this.signalTweenStart.dispose();
		this.signalTweenProcess.dispose();
		this.signalTweenFinish.dispose();
		iriysoft_core_IsfBaseObject.prototype.customDispose.call(this);
		this.userData = null;
	}
	,initTween: function(_transition,_delayBeforeStart,_disposeAfterFinish,_repeatCounter) {
		if(_repeatCounter == null) {
			_repeatCounter = 1;
		}
		if(_disposeAfterFinish == null) {
			_disposeAfterFinish = true;
		}
		if(_delayBeforeStart == null) {
			_delayBeforeStart = 0;
		}
		if(_transition == null) {
			this.transition = new iriysoft_tween_Transition(iriysoft_tween_Transition.linear,0,0,0);
		}
		this.transition = _transition;
		this.m_delayBeforeStart = _delayBeforeStart;
		this.disposeAfterFinish = _disposeAfterFinish;
		this.restart(_repeatCounter);
		return this;
	}
	,setDelayBeforeStart: function(_delayBeforeStart) {
		this.m_delayBeforeStart = _delayBeforeStart;
	}
	,restart: function(_repeatCounter,_startTime) {
		if(_startTime == null) {
			_startTime = 0;
		}
		this.repeatCounter = _repeatCounter;
		this.m_lifetime = _startTime;
		this.m_mscTime = this.m_lifetime * 1000;
		this.isFinished = false;
		this.currentValue = this.transition.calc(this.m_mscTime);
		this.previousValue = NaN;
		this.isPlaying = true;
	}
	,customProcess: function(_timeElapsed) {
		if(!this.isPlaying) {
			return;
		}
		if(!this.isFinished && this.m_lifetime >= this.m_delayBeforeStart) {
			if(this.m_lifetime - _timeElapsed < this.m_delayBeforeStart) {
				this.startTween();
				this.signalTweenStart.dispatch(this);
			}
			if(this.m_mscTime < this.transition.mscDuration + this.m_delayBeforeStart) {
				this.processTween();
				this.signalTweenProcess.dispatch(this);
			} else {
				this.finishTween();
				this.repeatCounter--;
				if(this.repeatCounter == 0) {
					this.isFinished = true;
					this.isPlaying = false;
					this.signalTweenFinish.dispatch(this);
					if(this.disposeAfterFinish) {
						this.dispose();
					}
				} else {
					this.restart(this.repeatCounter);
				}
			}
			this.m_mscTime += _timeElapsed * 1000;
		}
		iriysoft_core_IsfBaseObject.prototype.customProcess.call(this,_timeElapsed);
	}
	,startTween: function() {
	}
	,processTween: function() {
		this.previousValue = this.currentValue;
		this.currentValue = this.transition.calc(this.m_mscTime);
	}
	,finishTween: function() {
		this.currentValue = this.transition.x0 + this.transition.dx;
	}
	,__class__: iriysoft_tween_Tween
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var layout_LayoutItem = function(object,verticalLayout,horizontalLayout,rigidVertical,rigidHorizontal) {
	if(rigidHorizontal == null) {
		rigidHorizontal = true;
	}
	if(rigidVertical == null) {
		rigidVertical = true;
	}
	if(verticalLayout == null) {
		verticalLayout = layout_LayoutType.TOP;
	}
	if(horizontalLayout == null) {
		horizontalLayout = layout_LayoutType.LEFT;
	}
	this.object = object;
	this.verticalLayout = verticalLayout;
	this.horizontalLayout = horizontalLayout;
	this.rigidVertical = rigidVertical;
	this.rigidHorizontal = rigidHorizontal;
	this.initialize();
};
$hxClasses["layout.LayoutItem"] = layout_LayoutItem;
layout_LayoutItem.__name__ = "layout.LayoutItem";
layout_LayoutItem.prototype = {
	horizontalLayout: null
	,marginLeft: null
	,marginRight: null
	,marginTop: null
	,marginBottom: null
	,minHeight: null
	,minWidth: null
	,object: null
	,rigidHorizontal: null
	,rigidVertical: null
	,verticalLayout: null
	,configureItems: function() {
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,ifDefined: function(value,defaultValue) {
		if(value != null) {
			if(typeof(value) != "string" || typeof(value) == "string" && value != "") {
				return value;
			}
		}
		return defaultValue;
	}
	,initialize: function() {
		this.setMargins();
	}
	,layoutItem: function(layoutGroup) {
		switch(this.verticalLayout._hx_index) {
		case 0:
			this.set_objectY(layoutGroup.get_height() - this.get_objectHeight() - this.marginBottom);
			break;
		case 1:
			this.set_objectY(layoutGroup.get_height() / 2 - this.get_objectHeight() / 2 + this.marginTop - this.marginBottom);
			break;
		case 5:
			this.set_objectY(this.marginTop);
			var stretchHeight = layoutGroup.get_height() - this.marginTop - this.marginBottom;
			if(stretchHeight < 0) {
				stretchHeight = 0;
			}
			if(this.rigidVertical && this.minHeight != null && stretchHeight < this.minHeight) {
				this.set_objectHeight(this.minHeight);
			} else {
				this.set_objectHeight(stretchHeight);
			}
			break;
		case 6:
			this.set_objectY(this.marginTop);
			break;
		default:
		}
		switch(this.horizontalLayout._hx_index) {
		case 1:
			this.set_objectX(layoutGroup.get_width() / 2 - this.get_objectWidth() / 2 + this.marginLeft - this.marginRight);
			break;
		case 2:
			this.set_objectX(this.marginLeft);
			break;
		case 4:
			this.set_objectX(layoutGroup.get_width() - this.get_objectWidth() - this.marginRight);
			break;
		case 5:
			this.set_objectX(this.marginLeft);
			var stretchWidth = layoutGroup.get_width() - this.marginLeft - this.marginRight;
			if(stretchWidth < 0) {
				stretchWidth = 0;
			}
			if(this.rigidHorizontal && this.minWidth != null && stretchWidth < this.minWidth) {
				this.set_objectWidth(this.minWidth);
			} else {
				this.set_objectWidth(stretchWidth);
			}
			break;
		default:
		}
		var _g2 = this;
		_g2.set_objectX(_g2.get_objectX() + layoutGroup.get_x());
		var _g21 = this;
		_g21.set_objectY(_g21.get_objectY() + layoutGroup.get_y());
	}
	,refreshSize: function() {
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setMargins: function(marginTop,marginRight,marginBottom,marginLeft) {
		if(marginLeft == null) {
			marginLeft = 0;
		}
		if(marginBottom == null) {
			marginBottom = 0;
		}
		if(marginRight == null) {
			marginRight = 0;
		}
		if(marginTop == null) {
			marginTop = 0;
		}
		this.marginTop = marginTop;
		this.marginRight = marginRight;
		this.marginBottom = marginBottom;
		this.marginLeft = marginLeft;
	}
	,setMinSize: function(minWidth,minHeight) {
		if(minHeight == null) {
			minHeight = 0;
		}
		if(minWidth == null) {
			minWidth = 0;
		}
		this.minWidth = minWidth;
		this.minHeight = minHeight;
	}
	,get_objectHeight: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"height")) {
			value = Reflect.field(target,"height");
		} else {
			value = Reflect.getProperty(target,"height");
		}
		return value;
	}
	,set_objectHeight: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"height")) {
			target["height"] = value1;
		} else {
			Reflect.setProperty(target,"height",value1);
		}
		return value;
	}
	,get_objectScaleX: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"scaleX")) {
			value = Reflect.field(target,"scaleX");
		} else {
			value = Reflect.getProperty(target,"scaleX");
		}
		return value;
	}
	,set_objectScaleX: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"scaleX")) {
			target["scaleX"] = value1;
		} else {
			Reflect.setProperty(target,"scaleX",value1);
		}
		return value;
	}
	,get_objectScaleY: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"scaleY")) {
			value = Reflect.field(target,"scaleY");
		} else {
			value = Reflect.getProperty(target,"scaleY");
		}
		return value;
	}
	,set_objectScaleY: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"scaleY")) {
			target["scaleY"] = value1;
		} else {
			Reflect.setProperty(target,"scaleY",value1);
		}
		return value;
	}
	,get_objectWidth: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"width")) {
			value = Reflect.field(target,"width");
		} else {
			value = Reflect.getProperty(target,"width");
		}
		return value;
	}
	,set_objectWidth: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"width")) {
			target["width"] = value1;
		} else {
			Reflect.setProperty(target,"width",value1);
		}
		return value;
	}
	,get_objectX: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"x")) {
			value = Reflect.field(target,"x");
		} else {
			value = Reflect.getProperty(target,"x");
		}
		return value;
	}
	,set_objectX: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"x")) {
			target["x"] = value1;
		} else {
			Reflect.setProperty(target,"x",value1);
		}
		return value;
	}
	,get_objectY: function() {
		var target = this.object;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"y")) {
			value = Reflect.field(target,"y");
		} else {
			value = Reflect.getProperty(target,"y");
		}
		return value;
	}
	,set_objectY: function(value) {
		var target = this.object;
		var value1 = value;
		if(Object.prototype.hasOwnProperty.call(target,"y")) {
			target["y"] = value1;
		} else {
			Reflect.setProperty(target,"y",value1);
		}
		return value;
	}
	,__class__: layout_LayoutItem
	,__properties__: {set_objectY:"set_objectY",get_objectY:"get_objectY",set_objectX:"set_objectX",get_objectX:"get_objectX",set_objectWidth:"set_objectWidth",get_objectWidth:"get_objectWidth",set_objectScaleY:"set_objectScaleY",get_objectScaleY:"get_objectScaleY",set_objectScaleX:"set_objectScaleX",get_objectScaleX:"get_objectScaleX",set_objectHeight:"set_objectHeight",get_objectHeight:"get_objectHeight"}
};
var layout_LayoutGroup = function(verticalLayout,horizontalLayout,rigidVertical,rigidHorizontal) {
	if(rigidHorizontal == null) {
		rigidHorizontal = true;
	}
	if(rigidVertical == null) {
		rigidVertical = true;
	}
	if(verticalLayout == null) {
		verticalLayout = layout_LayoutType.NONE;
	}
	if(horizontalLayout == null) {
		horizontalLayout = layout_LayoutType.NONE;
	}
	layout_LayoutItem.call(this,this,verticalLayout,horizontalLayout,rigidVertical,rigidHorizontal);
	this._x = 0;
	this._y = 0;
	this._width = 0;
	this._height = 0;
	this._pixelScale = 0;
	this.resize(0,0);
};
$hxClasses["layout.LayoutGroup"] = layout_LayoutGroup;
layout_LayoutGroup.__name__ = "layout.LayoutGroup";
layout_LayoutGroup.__super__ = layout_LayoutItem;
layout_LayoutGroup.prototype = $extend(layout_LayoutItem.prototype,{
	clampHeight: null
	,clampWidth: null
	,initHeight: null
	,initScale: null
	,initWidth: null
	,items: null
	,itemConfigureHorizontal: null
	,itemConfigureVertical: null
	,loop: null
	,_height: null
	,_pixelScale: null
	,_width: null
	,_x: null
	,_y: null
	,addItem: function(item,autoConfigureVertical,autoConfigureHorizontal,updateSize) {
		if(updateSize == null) {
			updateSize = true;
		}
		if(autoConfigureHorizontal == null) {
			autoConfigureHorizontal = true;
		}
		if(autoConfigureVertical == null) {
			autoConfigureVertical = true;
		}
		if(this.initWidth != 0 && this.initHeight != 0) {
			this.configureItem(item,autoConfigureVertical,autoConfigureHorizontal);
		}
		this.items.push(item);
		this.itemConfigureVertical.push(autoConfigureVertical);
		this.itemConfigureHorizontal.push(autoConfigureHorizontal);
		if(updateSize) {
			this.refreshSize();
			if(this.initWidth != 0 && this.initHeight != 0) {
				this.configureItems();
			}
		}
	}
	,configureItem: function(item,autoConfigureVertical,autoConfigureHorizontal) {
		item.configureItems();
		if(autoConfigureVertical) {
			switch(item.verticalLayout._hx_index) {
			case 0:
				item.marginBottom = this.initHeight - item.get_objectY() - item.get_objectHeight() - this._y;
				break;
			case 1:
				var verticalOffset = item.get_objectY() - (this.initHeight / 2 - item.get_objectHeight() / 2) - this._y;
				if(verticalOffset > 0) {
					item.marginTop = verticalOffset;
				} else {
					item.marginBottom = Math.abs(verticalOffset);
				}
				break;
			case 5:
				item.marginTop = item.get_objectY() - this._y;
				item.marginBottom = this.initHeight - item.get_objectY() - item.get_objectHeight() - this._y;
				if(item.rigidVertical && item.minHeight == null) {
					item.minHeight = item.get_objectHeight();
				}
				break;
			case 6:
				item.marginTop = item.get_objectY() - this._y;
				break;
			default:
			}
		}
		if(autoConfigureHorizontal) {
			switch(item.horizontalLayout._hx_index) {
			case 1:
				var horizontalOffset = item.get_objectX() - (this.initWidth / 2 - item.get_objectWidth() / 2) - this._x;
				if(horizontalOffset > 0) {
					item.marginLeft = horizontalOffset;
				} else {
					item.marginRight = Math.abs(horizontalOffset);
				}
				break;
			case 2:
				item.marginLeft = item.get_objectX() - this._x;
				break;
			case 4:
				item.marginRight = this.initWidth - item.get_objectX() - item.get_objectWidth() - this._x;
				break;
			case 5:
				item.marginLeft = item.get_objectX() - this._x;
				item.marginRight = this.initWidth - item.get_objectX() - item.get_objectWidth() - this._x;
				if(item.rigidHorizontal && item.minWidth == null) {
					item.minWidth = item.get_objectWidth();
				}
				break;
			default:
			}
		}
	}
	,configureItems: function() {
		var _g = 0;
		var _g1 = this.items.length;
		while(_g < _g1) {
			var i = _g++;
			this.configureItem(this.items[i],this.itemConfigureVertical[i],this.itemConfigureHorizontal[i]);
		}
	}
	,initialize: function() {
		this.items = [];
		this.itemConfigureHorizontal = [];
		this.itemConfigureVertical = [];
		layout_LayoutItem.prototype.initialize.call(this);
	}
	,layoutItemGroup: function() {
		var minWidth = this.ifDefined(this.minWidth,0);
		var minHeight = this.ifDefined(this.minHeight,0);
		var minObjectHeight;
		var minObjectWidth;
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.layoutItem(this);
			if(item.rigidVertical) {
				minObjectHeight = item.marginTop + item.marginBottom;
				if(item.minHeight != null) {
					minObjectHeight += item.minHeight;
				} else {
					minObjectHeight += item.get_objectHeight();
				}
				if(minHeight < minObjectHeight) {
					minHeight = minObjectHeight;
				}
			}
			if(item.rigidHorizontal) {
				minObjectWidth = item.marginLeft + item.marginRight;
				if(item.minWidth != null) {
					minObjectWidth += item.minWidth;
				} else {
					minObjectWidth += item.get_objectWidth();
				}
				if(minWidth < minObjectWidth) {
					minWidth = minObjectWidth;
				}
			}
		}
		var newWidth = this.get_width();
		var newHeight = this.get_height();
		if(newWidth < minWidth) {
			newWidth = minWidth;
		}
		if(newHeight < minHeight) {
			newHeight = minHeight;
		}
		if(this.clampWidth && newWidth > this.initWidth) {
			newWidth = this.initWidth;
		}
		if(this.clampHeight && newHeight > this.initHeight) {
			newHeight = this.initHeight;
		}
		if(newWidth != this.get_width() || newHeight != this.get_height()) {
			if(!this.loop) {
				this.loop = true;
				this.resize(newWidth,newHeight);
				this.loop = false;
			}
		}
	}
	,refreshSize: function() {
		if(this.items.length > 0) {
			var beginningX = Infinity;
			var beginningY = Infinity;
			var endX = -Infinity;
			var endY = -Infinity;
			var _g = 0;
			var _g1 = this.items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				item.refreshSize();
				if(item.verticalLayout != layout_LayoutType.NONE) {
					if(item.get_objectY() < beginningY) {
						beginningY = item.get_objectY();
					}
					if(item.get_objectY() + item.get_objectHeight() > endY) {
						endY = item.get_objectY() + item.get_objectHeight();
					}
				}
				if(item.horizontalLayout != layout_LayoutType.NONE) {
					if(item.get_objectX() < beginningX) {
						beginningX = item.get_objectX();
					}
					if(item.get_objectX() + item.get_objectWidth() > endX) {
						endX = item.get_objectX() + item.get_objectWidth();
					}
				}
			}
			if(beginningX != Infinity && endX != -Infinity) {
				this._x = beginningX;
				this._width = this.initWidth = endX - beginningX;
			}
			if(beginningY != Infinity && endY != -Infinity) {
				this._y = beginningY;
				this._height = this.initHeight = endY - beginningY;
			}
		}
	}
	,resize: function(width,height) {
		this._width = width;
		this._height = height;
		if(this.items.length > 0) {
			this.layoutItemGroup();
		} else {
			this.initWidth = width;
			this.initHeight = height;
		}
	}
	,scale: function(scale) {
		this._pixelScale = scale;
		if(this.items.length > 0) {
			this.layoutItemGroup();
		} else {
			this.initScale = this._pixelScale;
		}
	}
	,setInitSize: function(width,height) {
		this.initWidth = width;
		this.initHeight = height;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this.resize(this._width,value);
		return this._height;
	}
	,get_pixelScale: function() {
		return this._pixelScale;
	}
	,set_pixelScale: function(value) {
		this.scale(value);
		return this._pixelScale;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this.resize(value,this._height);
		return this._width;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		this._x = value;
		this.layoutItemGroup();
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		this._y = value;
		this.layoutItemGroup();
		return this._y;
	}
	,__class__: layout_LayoutGroup
	,__properties__: $extend(layout_LayoutItem.prototype.__properties__,{set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_pixelScale:"set_pixelScale",get_pixelScale:"get_pixelScale",set_height:"set_height",get_height:"get_height"})
});
var layout_LayoutType = $hxEnums["layout.LayoutType"] = { __ename__ : "layout.LayoutType", __constructs__ : ["BOTTOM","CENTER","LEFT","NONE","RIGHT","STRETCH","TOP"]
	,BOTTOM: {_hx_index:0,__enum__:"layout.LayoutType",toString:$estr}
	,CENTER: {_hx_index:1,__enum__:"layout.LayoutType",toString:$estr}
	,LEFT: {_hx_index:2,__enum__:"layout.LayoutType",toString:$estr}
	,NONE: {_hx_index:3,__enum__:"layout.LayoutType",toString:$estr}
	,RIGHT: {_hx_index:4,__enum__:"layout.LayoutType",toString:$estr}
	,STRETCH: {_hx_index:5,__enum__:"layout.LayoutType",toString:$estr}
	,TOP: {_hx_index:6,__enum__:"layout.LayoutType",toString:$estr}
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var _this = this.parent.formData;
				var value = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g1 = 0;
		var _g11 = this.parent.headers;
		while(_g1 < _g11.length) {
			var header = _g11[_g1];
			++_g1;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style1 = this.div.style;
		style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style1.setProperty("transform","translate3D(0,0,0)",null);
		style1.position = "relative";
		style1.overflow = "hidden";
		style1.setProperty("-webkit-user-select","none",null);
		style1.setProperty("-moz-user-select","none",null);
		style1.setProperty("-ms-user-select","none",null);
		style1.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : true};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g1 = 0;
			var _g11 = image.height;
			while(_g1 < _g11) {
				var y = _g1++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g12 = image.width;
				while(_g2 < _g12) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g21 = 0;
				var _g3 = image.width * 3 % 4;
				while(_g21 < _g3) {
					var i1 = _g21++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g4 = 0;
			var _g13 = image.height;
			while(_g4 < _g13) {
				var y1 = _g4++;
				readPosition = (image.height - 1 - y1) * 4 * image.width;
				var _g5 = 0;
				var _g14 = image.width;
				while(_g5 < _g14) {
					var x1 = _g5++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g6 = 0;
			var _g15 = image.height;
			while(_g6 < _g15) {
				var y2 = _g6++;
				readPosition = (image.height - 1 - y2) * 4 * image.width;
				var _g7 = 0;
				var _g16 = image.width;
				while(_g7 < _g16) {
					var x2 = _g7++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = (pako.deflateRaw)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = (pako.inflateRaw)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = (pako.gzip)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = (pako.ungzip)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = (pako.deflate)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = (pako.inflate)(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g11 = sourceView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value1 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value2 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | result & 255 & 255;
	var value3 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value3 & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g11 = destView.width;
					while(_g2 < _g11) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g3 = 0;
				var _g12 = destView.height;
				while(_g3 < _g12) {
					var y1 = _g3++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g4 = 0;
				var _g13 = destView.height;
				while(_g4 < _g13) {
					var y2 = _g4++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g5 = 0;
					var _g14 = destView.width;
					while(_g5 < _g14) {
						var x1 = _g5++;
						var format3 = sourceFormat;
						var premultiplied3 = sourcePremultiplied;
						if(premultiplied3 == null) {
							premultiplied3 = false;
						}
						if(format3 == null) {
							format3 = 0;
						}
						switch(format3) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied3) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format4 = destFormat;
						var premultiplied4 = destPremultiplied;
						if(premultiplied4 == null) {
							premultiplied4 = false;
						}
						if(format4 == null) {
							format4 = 0;
						}
						if(premultiplied4) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format4) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g6 = 0;
				var _g15 = destView.height;
				while(_g6 < _g15) {
					var y3 = _g6++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g7 = 0;
					var _g16 = destView.width;
					while(_g7 < _g16) {
						var x2 = _g7++;
						var format5 = sourceFormat;
						var premultiplied5 = sourcePremultiplied;
						if(premultiplied5 == null) {
							premultiplied5 = false;
						}
						if(format5 == null) {
							format5 = 0;
						}
						switch(format5) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied5) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format6 = destFormat;
						var premultiplied6 = destPremultiplied;
						if(premultiplied6 == null) {
							premultiplied6 = false;
						}
						if(format6 == null) {
							format6 = 0;
						}
						switch(format6) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied6) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format7 = alphaFormat;
						var premultiplied7 = false;
						if(premultiplied7 == null) {
							premultiplied7 = false;
						}
						if(format7 == null) {
							format7 = 0;
						}
						switch(format7) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied7) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							var format8 = destFormat;
							var premultiplied8 = destPremultiplied;
							if(premultiplied8 == null) {
								premultiplied8 = false;
							}
							if(format8 == null) {
								format8 = 0;
							}
							if(premultiplied8) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format8) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g8 = 0;
				var _g17 = destView.height;
				while(_g8 < _g17) {
					var y4 = _g8++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g9 = 0;
					var _g18 = destView.width;
					while(_g9 < _g18) {
						var x3 = _g9++;
						var format9 = sourceFormat;
						var premultiplied9 = sourcePremultiplied;
						if(premultiplied9 == null) {
							premultiplied9 = false;
						}
						if(format9 == null) {
							format9 = 0;
						}
						switch(format9) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied9) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format10 = alphaFormat;
						var premultiplied10 = false;
						if(premultiplied10 == null) {
							premultiplied10 = false;
						}
						if(format10 == null) {
							format10 = 0;
						}
						switch(format10) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied10) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						var format11 = destFormat;
						var premultiplied11 = destPremultiplied;
						if(premultiplied11 == null) {
							premultiplied11 = false;
						}
						if(format11 == null) {
							format11 = 0;
						}
						if(premultiplied11) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format11) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var offset = row + x * 4;
			var format2 = format1;
			var premultiplied1 = false;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied1) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format2 = format1;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format2 == null) {
		format2 = 0;
	}
	switch(format2) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format3 = format1;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format3 == null) {
				format3 = 0;
			}
			switch(format3) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied2) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format4 = format1;
				var premultiplied3 = false;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				if(premultiplied3) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format4) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g11 = image.height;
		while(_g2 < _g11) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g21 = 0;
	var _g3 = image.width;
	while(_g21 < _g3) {
		var x1 = _g21++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g22 = 0;
		var _g31 = image.height;
		while(_g22 < _g31) {
			var y1 = _g22++;
			pixel = image.getPixel32(ix,y1,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g4 = 0;
	var _g5 = image.height;
	while(_g4 < _g5) {
		var y2 = _g4++;
		hit = false;
		var _g41 = 0;
		var _g51 = image.width;
		while(_g41 < _g51) {
			var x2 = _g41++;
			pixel = image.getPixel32(x2,y2,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) {
					top = y2;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g6 = 0;
	var _g7 = image.height;
	while(_g6 < _g7) {
		var y3 = _g6++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g61 = 0;
		var _g71 = image.width;
		while(_g61 < _g71) {
			var x3 = _g61++;
			pixel = image.getPixel32(x3,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g11 = newWidth;
		while(_g2 < _g11) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g11 = buffer.width;
		while(_g2 < _g11) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	var _g2 = length;
	while(_g1 < _g2) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format2 = image.buffer.format;
	var premultiplied1 = image.buffer.premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format2 == null) {
		format2 = 0;
	}
	if(premultiplied1) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format2) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format1) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format1 = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format2 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format3 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format3) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g11 = by1;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g21 = 0;
		var _g3 = by1 + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g4 = by1 + 1;
		var _g5 = h - by1;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g6 = h - by1;
		var _g7 = h;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr1 = 1 / (by1 + by1 + 1);
	var ws1 = w * 4;
	var ti1;
	var li1;
	var ri1;
	var fv1;
	var lv1;
	var val1;
	var _g8 = 0;
	var _g12 = w;
	while(_g8 < _g12) {
		var i1 = _g8++;
		ti1 = i1 * 4 + 1;
		li1 = ti1;
		ri1 = ti1 + by1 * ws1;
		fv1 = imgA[ti1];
		lv1 = imgA[ti1 + ws1 * (h - 1)];
		val1 = (by1 + 1) * fv1;
		var _g9 = 0;
		var _g13 = by1;
		while(_g9 < _g13) {
			var j4 = _g9++;
			val1 = val1 + imgA[ti1 + j4 * ws1];
		}
		var _g22 = 0;
		var _g31 = by1 + 1;
		while(_g22 < _g31) {
			var j5 = _g22++;
			val1 = val1 + (imgA[ri1] - fv1);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g41 = by1 + 1;
		var _g51 = h - by1;
		while(_g41 < _g51) {
			var j6 = _g41++;
			val1 = val1 + (imgA[ri1] - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g61 = h - by1;
		var _g71 = h;
		while(_g61 < _g71) {
			var j7 = _g61++;
			val1 = val1 + (lv1 - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ti1 += ws1;
		}
	}
	var iarr2 = 1 / (by1 + by1 + 1);
	var ws2 = w * 4;
	var ti2;
	var li2;
	var ri2;
	var fv2;
	var lv2;
	var val2;
	var _g10 = 0;
	var _g14 = w;
	while(_g10 < _g14) {
		var i2 = _g10++;
		ti2 = i2 * 4 + 2;
		li2 = ti2;
		ri2 = ti2 + by1 * ws2;
		fv2 = imgA[ti2];
		lv2 = imgA[ti2 + ws2 * (h - 1)];
		val2 = (by1 + 1) * fv2;
		var _g15 = 0;
		var _g16 = by1;
		while(_g15 < _g16) {
			var j8 = _g15++;
			val2 = val2 + imgA[ti2 + j8 * ws2];
		}
		var _g23 = 0;
		var _g32 = by1 + 1;
		while(_g23 < _g32) {
			var j9 = _g23++;
			val2 = val2 + (imgA[ri2] - fv2);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g42 = by1 + 1;
		var _g52 = h - by1;
		while(_g42 < _g52) {
			var j10 = _g42++;
			val2 = val2 + (imgA[ri2] - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g62 = h - by1;
		var _g72 = h;
		while(_g62 < _g72) {
			var j11 = _g62++;
			val2 = val2 + (lv2 - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ti2 += ws2;
		}
	}
	var iarr3 = 1 / (by1 + by1 + 1);
	var ws3 = w * 4;
	var ti3;
	var li3;
	var ri3;
	var fv3;
	var lv3;
	var val3;
	var _g17 = 0;
	var _g18 = w;
	while(_g17 < _g18) {
		var i3 = _g17++;
		ti3 = i3 * 4 + 3;
		li3 = ti3;
		ri3 = ti3 + by1 * ws3;
		fv3 = imgA[ti3];
		lv3 = imgA[ti3 + ws3 * (h - 1)];
		val3 = (by1 + 1) * fv3;
		var _g19 = 0;
		var _g110 = by1;
		while(_g19 < _g110) {
			var j12 = _g19++;
			val3 = val3 + imgA[ti3 + j12 * ws3];
		}
		var _g24 = 0;
		var _g33 = by1 + 1;
		while(_g24 < _g33) {
			var j13 = _g24++;
			val3 = val3 + (imgA[ri3] - fv3);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g43 = by1 + 1;
		var _g53 = h - by1;
		while(_g43 < _g53) {
			var j14 = _g43++;
			val3 = val3 + (imgA[ri3] - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g63 = h - by1;
		var _g73 = h;
		while(_g63 < _g73) {
			var j15 = _g63++;
			val3 = val3 + (lv3 - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ti3 += ws3;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g11 = r;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g21 = 0;
		var _g3 = r + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g4 = r + 1;
		var _g5 = w - r;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g6 = w - r;
		var _g7 = w;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g11 = r;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g21 = 0;
		var _g3 = r + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g4 = r + 1;
		var _g5 = h - r;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g6 = h - r;
		var _g7 = h;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = _$UInt_UInt_$Impl_$.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g2 = 1;
	var _g3 = divy;
	while(_g2 < _g3) {
		var i2 = _g2++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g4 = 1;
			var _g5 = rxp1;
			while(_g4 < _g5) {
				var i3 = _g4++;
				p = yi + ((w1 < i3 ? w1 : i3) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g6 = 0;
			var _g7 = w;
			while(_g6 < _g7) {
				var x1 = _g6++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x1 + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g41 = 0;
		var _g51 = w;
		while(_g41 < _g51) {
			var x2 = _g41++;
			yi = x2 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g42 = 0;
			var _g52 = ryp1;
			while(_g42 < _g52) {
				var i4 = _g42++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g61 = 1;
			var _g71 = radiusY + 1;
			while(_g61 < _g71) {
				var i5 = _g61++;
				yi = yp + x2 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i5 < h1) {
					yp += w;
				}
			}
			yi = x2;
			si = ssy;
			if(iterations > 0) {
				var _g8 = 0;
				var _g9 = h;
				while(_g8 < _g9) {
					var y1 = _g8++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x2 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g81 = 0;
				var _g91 = h;
				while(_g81 < _g91) {
					var y2 = _g81++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x2 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,n: null
	,__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.error = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 209, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : ((e) instanceof js__$Boot_HaxeError) ? e.val : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._CairoRenderContext.CairoRenderContext_Impl_"] = lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$;
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.__name__ = "lime.graphics._CairoRenderContext.CairoRenderContext_Impl_";
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_"] = lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$;
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.__name__ = "lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_";
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._DOMRenderContext.DOMRenderContext_Impl_"] = lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$;
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.__name__ = "lime.graphics._DOMRenderContext.DOMRenderContext_Impl_";
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._FlashRenderContext.FlashRenderContext_Impl_"] = lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$;
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.__name__ = "lime.graphics._FlashRenderContext.FlashRenderContext_Impl_";
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements1 = null;
			var array1 = null;
			var vector1 = null;
			var view1 = this.data;
			var buffer2 = null;
			var len1 = null;
			var this2;
			if(elements1 != null) {
				this2 = new Uint8Array(elements1);
			} else if(array1 != null) {
				this2 = new Uint8Array(array1);
			} else if(vector1 != null) {
				this2 = new Uint8Array(vector1.__array);
			} else if(view1 != null) {
				this2 = new Uint8Array(view1);
			} else if(buffer2 != null) {
				if(len1 == null) {
					this2 = new Uint8Array(buffer2,0);
				} else {
					this2 = new Uint8Array(buffer2,0,len1);
				}
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
var lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_"] = lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$;
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_";
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_"] = lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$;
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_";
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_"] = lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$;
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_";
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	attributes: null
	,cairo: null
	,canvas2D: null
	,dom: null
	,flash: null
	,gl: null
	,gles2: null
	,gles3: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_"] = lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$;
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.__name__ = "lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_";
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_"] = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.__name__ = "lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_";
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = "lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = "lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_";
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = "lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_";
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = "lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_";
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = "lime.graphics.cairo._CairoPattern.CairoPattern_Impl_";
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = "lime.graphics.cairo._CairoSurface.CairoSurface_Impl_";
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLProgram.GLProgram_Impl_"] = lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$;
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.__name__ = "lime.graphics.opengl._GLProgram.GLProgram_Impl_";
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl__$GLShader_GLShader_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLShader.GLShader_Impl_"] = lime_graphics_opengl__$GLShader_GLShader_$Impl_$;
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.__name__ = "lime.graphics.opengl._GLShader.GLShader_Impl_";
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 40, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = "lime.graphics.opengl.ext.KHR_debug";
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	DEBUG_OUTPUT_SYNCHRONOUS: null
	,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null
	,DEBUG_CALLBACK_FUNCTION: null
	,DEBUG_CALLBACK_USER_PARAM: null
	,DEBUG_SOURCE_API: null
	,DEBUG_SOURCE_WINDOW_SYSTEM: null
	,DEBUG_SOURCE_SHADER_COMPILER: null
	,DEBUG_SOURCE_THIRD_PARTY: null
	,DEBUG_SOURCE_APPLICATION: null
	,DEBUG_SOURCE_OTHER: null
	,DEBUG_TYPE_ERROR: null
	,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null
	,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null
	,DEBUG_TYPE_PORTABILITY: null
	,DEBUG_TYPE_PERFORMANCE: null
	,DEBUG_TYPE_OTHER: null
	,DEBUG_TYPE_MARKER: null
	,DEBUG_TYPE_PUSH_GROUP: null
	,DEBUG_TYPE_POP_GROUP: null
	,DEBUG_SEVERITY_NOTIFICATION: null
	,MAX_DEBUG_GROUP_STACK_DEPTH: null
	,DEBUG_GROUP_STACK_DEPTH: null
	,BUFFER: null
	,SHADER: null
	,PROGRAM: null
	,QUERY: null
	,SAMPLER: null
	,MAX_LABEL_LENGTH: null
	,MAX_DEBUG_MESSAGE_LENGTH: null
	,MAX_DEBUG_LOGGED_MESSAGES: null
	,DEBUG_LOGGED_MESSAGES: null
	,DEBUG_SEVERITY_HIGH: null
	,DEBUG_SEVERITY_MEDIUM: null
	,DEBUG_SEVERITY_LOW: null
	,DEBUG_OUTPUT: null
	,CONTEXT_FLAG_DEBUG_BIT: null
	,STACK_OVERFLOW: null
	,STACK_UNDERFLOW: null
	,__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math._ARGB.ARGB_Impl_"] = lime_math__$ARGB_ARGB_$Impl_$;
lime_math__$ARGB_ARGB_$Impl_$.__name__ = "lime.math._ARGB.ARGB_Impl_";
lime_math__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math._BGRA.BGRA_Impl_"] = lime_math__$BGRA_BGRA_$Impl_$;
lime_math__$BGRA_BGRA_$Impl_$.__name__ = "lime.math._BGRA.BGRA_Impl_";
lime_math__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = "lime.math._ColorMatrix.ColorMatrix_Impl_";
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = "lime.math._Matrix4.Matrix4_Impl_";
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.fromMatrix3 = function(matrix3) {
	var mat = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(result,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result1 = null;
	if(result1 == null) {
		result1 = new lime_math_Vector4();
	}
	result1.x = vup.x - dir2.x;
	result1.y = vup.y - dir2.y;
	result1.z = vup.z - dir2.z;
	vup = result1;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result2 = null;
	if(result2 == null) {
		result2 = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result2.x = vup.y * dir.z - vup.z * dir.y;
	result2.y = ya;
	result2.z = za;
	result2.w = 1;
	var right = result2;
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math._RGBA.RGBA_Impl_"] = lime_math__$RGBA_RGBA_$Impl_$;
lime_math__$RGBA_RGBA_$Impl_$.__name__ = "lime.math._RGBA.RGBA_Impl_";
lime_math__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g2 = bytes.b[2];
		var _g11 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g11 == 68) {
				if(_g2 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	custom: null
	,flash: null
	,html5: null
	,openal: null
	,type: null
	,web: null
	,__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = "lime.media.AudioSource";
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,__backend: null
	,dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,pause: function() {
		this.__backend.pause();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,get_length: function() {
		return this.__backend.getLength();
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,get_loops: function() {
		return this.__backend.getLoops();
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$ = {};
$hxClasses["lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_"] = lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$;
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$.__name__ = "lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_";
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = "lime.media.openal._ALBuffer.ALBuffer_Impl_";
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = "lime.media.openal._ALContext.ALContext_Impl_";
lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = "lime.media.openal._ALDevice.ALDevice_Impl_";
lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALEffect_ALEffect_$Impl_$ = {};
$hxClasses["lime.media.openal._ALEffect.ALEffect_Impl_"] = lime_media_openal__$ALEffect_ALEffect_$Impl_$;
lime_media_openal__$ALEffect_ALEffect_$Impl_$.__name__ = "lime.media.openal._ALEffect.ALEffect_Impl_";
lime_media_openal__$ALEffect_ALEffect_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALFilter_ALFilter_$Impl_$ = {};
$hxClasses["lime.media.openal._ALFilter.ALFilter_Impl_"] = lime_media_openal__$ALFilter_ALFilter_$Impl_$;
lime_media_openal__$ALFilter_ALFilter_$Impl_$.__name__ = "lime.media.openal._ALFilter.ALFilter_Impl_";
lime_media_openal__$ALFilter_ALFilter_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = "lime.media.openal._ALSource.ALSource_Impl_";
lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__backend: null
	,cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = "lime.system._CFFIPointer.CFFIPointer_Impl_";
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__ : "lime.system.Endian", __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"]
	,LITTLE_ENDIAN: {_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
var lime_system_JNI = function() { };
$hxClasses["lime.system.JNI"] = lime_system_JNI;
lime_system_JNI.__name__ = "lime.system.JNI";
lime_system_JNI.callMember = function(method,jobject,a) {
	switch(a.length) {
	case 0:
		return method(jobject);
	case 1:
		return method(jobject,a[0]);
	case 2:
		return method(jobject,a[0],a[1]);
	case 3:
		return method(jobject,a[0],a[1],a[2]);
	case 4:
		return method(jobject,a[0],a[1],a[2],a[3]);
	case 5:
		return method(jobject,a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.callStatic = function(method,a) {
	switch(a.length) {
	case 0:
		return method();
	case 1:
		return method(a[0]);
	case 2:
		return method(a[0],a[1]);
	case 3:
		return method(a[0],a[1],a[2]);
	case 4:
		return method(a[0],a[1],a[2],a[3]);
	case 5:
		return method(a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.createMemberField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createMemberMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.getEnv = function() {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.init = function() {
	if(!lime_system_JNI.initialized) {
		lime_system_JNI.initialized = true;
	}
};
lime_system_JNI.onCallback = function(object,method,args) {
	var field = Reflect.field(object,method);
	if(field != null) {
		if(args == null) {
			args = [];
		}
		return field.apply(object,args);
	}
	haxe_Log.trace("onCallback - unknown field " + method,{ fileName : "lime/system/JNI.hx", lineNumber : 173, className : "lime.system.JNI", methodName : "onCallback"});
	return null;
};
lime_system_JNI.postUICallback = function(callback) {
	callback();
};
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = "lime.system.JNIMemberField";
lime_system_JNIMemberField.prototype = {
	field: null
	,get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = "lime.system.JNIStaticField";
lime_system_JNIStaticField.prototype = {
	field: null
	,get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = "lime.system.JNIMethod";
lime_system_JNIMethod.prototype = {
	method: null
	,callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callMember);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callMember));
		}
	}
	,getStaticMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callStatic);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callStatic));
		}
	}
	,__class__: lime_system_JNIMethod
};
var lime_system__$Locale_Locale_$Impl_$ = {};
$hxClasses["lime.system._Locale.Locale_Impl_"] = lime_system__$Locale_Locale_$Impl_$;
lime_system__$Locale_Locale_$Impl_$.__name__ = "lime.system._Locale.Locale_Impl_";
lime_system__$Locale_Locale_$Impl_$.__properties__ = {get_region:"get_region",get_language:"get_language",get_systemLocale:"get_systemLocale",set_currentLocale:"set_currentLocale",get_currentLocale:"get_currentLocale"};
lime_system__$Locale_Locale_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.equals = function(a,b) {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(a);
	var region = lime_system__$Locale_Locale_$Impl_$.get_region(a);
	var language2 = lime_system__$Locale_Locale_$Impl_$.get_language(b);
	var region2 = lime_system__$Locale_Locale_$Impl_$.get_region(b);
	var languageMatch = language == language2;
	var regionMatch = region == region2;
	if(!languageMatch && language != null && language2 != null) {
		languageMatch = language.toLowerCase() == language2.toLowerCase();
	}
	if(!regionMatch && region != null && region2 != null) {
		regionMatch = region.toLowerCase() == region2.toLowerCase();
	}
	if(languageMatch) {
		return regionMatch;
	} else {
		return false;
	}
};
lime_system__$Locale_Locale_$Impl_$.__init = function() {
	if(lime_system__$Locale_Locale_$Impl_$.__systemLocale == null) {
		var locale = null;
		locale = navigator.language;
		if(locale != null) {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = locale;
		} else {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = "en-US";
		}
		lime_system__$Locale_Locale_$Impl_$.set_currentLocale(lime_system__$Locale_Locale_$Impl_$.__systemLocale);
	}
};
lime_system__$Locale_Locale_$Impl_$.get_language = function(this1) {
	if(this1 != null) {
		var index = this1.indexOf("_");
		if(index > -1) {
			var dashIndex = this1.indexOf("-");
			if(dashIndex > -1 && dashIndex < index) {
				index = dashIndex;
			}
			return this1.substring(0,index);
		}
		index = this1.indexOf("-");
		if(index > -1) {
			return this1.substring(0,index);
		}
	}
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.get_region = function(this1) {
	if(this1 != null) {
		var underscoreIndex = this1.indexOf("_");
		var dotIndex = this1.indexOf(".");
		var dashIndex = this1.indexOf("-");
		if(underscoreIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(underscoreIndex + 1,dotIndex);
			} else {
				return this1.substring(underscoreIndex + 1);
			}
		} else if(dashIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(dashIndex + 1,dotIndex);
			} else {
				return this1.substring(dashIndex + 1);
			}
		}
	}
	return null;
};
lime_system__$Locale_Locale_$Impl_$.get_currentLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale;
};
lime_system__$Locale_Locale_$Impl_$.set_currentLocale = function(value) {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale = value;
};
lime_system__$Locale_Locale_$Impl_$.get_systemLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.__systemLocale;
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	id: null
	,onUpdate: null
	,type: null
	,__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__ : "lime.system.SensorType", __constructs__ : ["ACCELEROMETER"]
	,ACCELEROMETER: {_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_platformVersion:"get_platformVersion",get_platformName:"get_platformName",get_platformLabel:"get_platformLabel",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_deviceVendor:"get_deviceVendor",get_deviceModel:"get_deviceModel",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		var _this1 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements1 = null;
		var array1 = null;
		var vector1 = null;
		var view1 = null;
		var len1 = null;
		var this2;
		if(elements1 != null) {
			this2 = new Uint16Array(elements1);
		} else if(array1 != null) {
			this2 = new Uint16Array(array1);
		} else if(vector1 != null) {
			this2 = new Uint16Array(vector1.__array);
		} else if(view1 != null) {
			this2 = new Uint16Array(view1);
		} else if(arrayBuffer != null) {
			if(len1 == null) {
				this2 = new Uint16Array(arrayBuffer,0);
			} else {
				this2 = new Uint16Array(arrayBuffer,0,len1);
			}
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : "lime.system._ThreadPool.ThreadPoolMessageType", __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"]
	,COMPLETE: {_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = "lime.text._Glyph.Glyph_Impl_";
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_harfbuzz_HB = function() { };
$hxClasses["lime.text.harfbuzz.HB"] = lime_text_harfbuzz_HB;
lime_text_harfbuzz_HB.__name__ = "lime.text.harfbuzz.HB";
lime_text_harfbuzz_HB.shape = function(font,buffer,features) {
};
var lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBBlob.HBBlob_Impl_"] = lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$;
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.__name__ = "lime.text.harfbuzz._HBBlob.HBBlob_Impl_";
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.__properties__ = {get_length:"get_length",get_immutable:"get_immutable",get_dataWritable:"get_dataWritable",get_data:"get_data",get_empty:"get_empty"};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$._new = function(data,length,memoryMode) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.createSubBlob = function(this1,offset,length) {
	return null;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.makeImmutable = function(this1) {
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_data = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_dataWritable = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_length = function(this1) {
	return 0;
};
var lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBBuffer.HBBuffer_Impl_"] = lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$;
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.__name__ = "lime.text.harfbuzz._HBBuffer.HBBuffer_Impl_";
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.__properties__ = {set_segmentProperties:"set_segmentProperties",get_segmentProperties:"get_segmentProperties",set_script:"set_script",get_script:"get_script",set_replacementCodepoint:"set_replacementCodepoint",get_replacementCodepoint:"get_replacementCodepoint",set_length:"set_length",get_length:"get_length",set_language:"set_language",get_language:"get_language",set_flags:"set_flags",get_flags:"get_flags",set_direction:"set_direction",get_direction:"get_direction",set_contentType:"set_contentType",get_contentType:"get_contentType",set_clusterLevel:"set_clusterLevel",get_clusterLevel:"get_clusterLevel",get_allocationSuccessful:"get_allocationSuccessful"};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.add = function(this1,codepoint,cluster) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addCodepoints = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF8 = function(this1,text,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF16 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF32 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.clearContents = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.getGlyphInfo = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.getGlyphPositions = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.guessSegmentProperties = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.normalizeGlyphs = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.preallocate = function(this1,size) {
	return false;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reset = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reverse = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reverseClusters = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_allocationSuccessful = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_clusterLevel = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_clusterLevel = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_contentType = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_contentType = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_direction = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_direction = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_flags = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_flags = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_language = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_language = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_length = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_length = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_replacementCodepoint = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_replacementCodepoint = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_script = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_script = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_segmentProperties = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_segmentProperties = function(this1,value) {
	return value;
};
var lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFTFont.HBFTFont_Impl_"] = lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$;
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.__name__ = "lime.text.harfbuzz._HBFTFont.HBFTFont_Impl_";
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.__properties__ = {set_loadFlags:"set_loadFlags",get_loadFlags:"get_loadFlags"};
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$._new = function(font) {
	var this1;
	if(font.src != null) {
		this1 = null;
	} else {
		this1 = null;
	}
	return this1;
};
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.get_loadFlags = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.set_loadFlags = function(this1,value) {
	return value;
};
var lime_text_harfbuzz__$HBFace_HBFace_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFace.HBFace_Impl_"] = lime_text_harfbuzz__$HBFace_HBFace_$Impl_$;
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.__name__ = "lime.text.harfbuzz._HBFace.HBFace_Impl_";
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.__properties__ = {set_upem:"set_upem",get_upem:"get_upem",set_index:"set_index",get_index:"get_index",get_immutable:"get_immutable",set_glyphCount:"set_glyphCount",get_glyphCount:"get_glyphCount",get_empty:"get_empty"};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$._new = function(blob,index) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_glyphCount = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_glyphCount = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_index = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_index = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_upem = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_upem = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFeature = function() {
};
$hxClasses["lime.text.harfbuzz.HBFeature"] = lime_text_harfbuzz_HBFeature;
lime_text_harfbuzz_HBFeature.__name__ = "lime.text.harfbuzz.HBFeature";
lime_text_harfbuzz_HBFeature.prototype = {
	__class__: lime_text_harfbuzz_HBFeature
};
var lime_text_harfbuzz__$HBFont_HBFont_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFont.HBFont_Impl_"] = lime_text_harfbuzz__$HBFont_HBFont_$Impl_$;
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.__name__ = "lime.text.harfbuzz._HBFont.HBFont_Impl_";
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_ppem:"set_ppem",get_ppem:"get_ppem",get_parent:"get_parent",get_immutable:"get_immutable",get_face:"get_face",get_empty:"get_empty"};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$._new = function(face) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.addGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.createSubFont = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphAdvanceForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphKerningForDirection = function(this1,glyph,firstGlyph,secondGlyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphOriginForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.glyphFromString = function(this1,s) {
	return 0;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.glyphToString = function(this1,codepoint) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.makeImmutable = function(this1) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.subtractGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_face = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_parent = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_ppem = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.set_ppem = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_scale = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.set_scale = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBGlyphInfo = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphInfo"] = lime_text_harfbuzz_HBGlyphInfo;
lime_text_harfbuzz_HBGlyphInfo.__name__ = "lime.text.harfbuzz.HBGlyphInfo";
lime_text_harfbuzz_HBGlyphInfo.prototype = {
	codepoint: null
	,mask: null
	,cluster: null
	,__class__: lime_text_harfbuzz_HBGlyphInfo
};
var lime_text_harfbuzz_HBGlyphPosition = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphPosition"] = lime_text_harfbuzz_HBGlyphPosition;
lime_text_harfbuzz_HBGlyphPosition.__name__ = "lime.text.harfbuzz.HBGlyphPosition";
lime_text_harfbuzz_HBGlyphPosition.prototype = {
	xAdvance: null
	,xOffset: null
	,yAdvance: null
	,yOffset: null
	,__class__: lime_text_harfbuzz_HBGlyphPosition
};
var lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_"] = lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$;
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.__name__ = "lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_";
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new = function(language) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.toString = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.fromString = function(value) {
	return lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new(value);
};
var lime_text_harfbuzz_HBSegmentProperties = function() {
};
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = "lime.text.harfbuzz.HBSegmentProperties";
lime_text_harfbuzz_HBSegmentProperties.prototype = {
	__class__: lime_text_harfbuzz_HBSegmentProperties
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = "lime.ui._GamepadAxis.GamepadAxis_Impl_";
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = "lime.ui._GamepadButton.GamepadButton_Impl_";
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = "lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_";
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = "lime.ui._KeyCode.KeyCode_Impl_";
lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = "lime.ui._KeyModifier.KeyModifier_Impl_";
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__ : "lime.ui.MouseCursor", __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"]
	,ARROW: {_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__ : "lime.ui.MouseWheelMode", __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"]
	,PIXELS: {_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
$hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = "lime.ui._ScanCode.ScanCode_Impl_";
lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	application: null
	,context: null
	,display: null
	,element: null
	,hidden: null
	,id: null
	,onActivate: null
	,onClose: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onExpose: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMaximize: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onRender: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,parameters: null
	,scale: null
	,stage: null
	,__attributes: null
	,__backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__hidden: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",set_textInputEnabled:"set_textInputEnabled",get_textInputEnabled:"get_textInputEnabled",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",get_hidden:"get_hidden",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_cursor:"set_cursor",get_cursor:"get_cursor",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__ : "lime.utils.TAError", __constructs__ : ["RangeError"]
	,RangeError: {_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils__$Bytes_Bytes_$Impl_$.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		} else {
			var key1 = entry.fileName;
			var value1 = entry.data;
			var _this1 = bundle.data;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	data: null
	,paths: null
	,__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 328858;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var _this = this.font;
			var value = asset;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,value);
			} else {
				_this.h[id] = value;
			}
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			var _this1 = this.image;
			var value1 = asset;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,value1);
			} else {
				_this1.h[id] = value1;
			}
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			var _this2 = this.audio;
			var value2 = asset;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,value2);
			} else {
				_this2.h[id] = value2;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	var _this = bundle.data;
	if(__map_reserved["library.json"] != null ? _this.existsReserved("library.json") : _this.h.hasOwnProperty("library.json")) {
		var _this1 = bundle.data;
		var manifest = lime_utils_AssetManifest.fromBytes(__map_reserved["library.json"] != null ? _this1.getReserved("library.json") : _this1.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library1 = new lime_utils_AssetLibrary();
		library1.__fromBundle(bundle);
		return library1;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.paths;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.pathGroups;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.pathGroups;
				return (__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id])[0];
			} else {
				return null;
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			var _this1 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id))) {
				var _this2 = this.cachedText;
				if(__map_reserved[id] != null) {
					return _this2.existsReserved(id);
				} else {
					return _this2.h.hasOwnProperty(id);
				}
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				var _this3 = this.cachedFonts;
				if(__map_reserved[id] != null) {
					return _this3.existsReserved(id);
				} else {
					return _this3.h.hasOwnProperty(id);
				}
				break;
			case "IMAGE":
				var _this4 = this.cachedImages;
				if(__map_reserved[id] != null) {
					return _this4.existsReserved(id);
				} else {
					return _this4.h.hasOwnProperty(id);
				}
				break;
			case "MUSIC":case "SOUND":
				var _this5 = this.cachedAudioBuffers;
				if(__map_reserved[id] != null) {
					return _this5.existsReserved(id);
				} else {
					return _this5.h.hasOwnProperty(id);
				}
				break;
			default:
				var _this6 = this.cachedBytes;
				if(!(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id))) {
					var _this7 = this.cachedText;
					if(__map_reserved[id] != null) {
						return _this7.existsReserved(id);
					} else {
						return _this7.h.hasOwnProperty(id);
					}
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.types.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _this2 = this.types;
				var _g = __map_reserved[id1] != null ? _this2.getReserved(id1) : _this2.h[id1];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(bytesLoaded,bytesTotal) {
								f[0](id2[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(message) {
								f1[0](id3[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(bytes) {
								f2[0](id4[0],bytes);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(bytesLoaded1,bytesTotal1) {
								f3[0](id5[0],bytesLoaded1,bytesTotal1);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(message1) {
								f4[0](id6[0],message1);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(font) {
								f5[0](id7[0],font);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(bytesLoaded2,bytesTotal2) {
								f6[0](id8[0],bytesLoaded2,bytesTotal2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(message2) {
								f7[0](id9[0],message2);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(image) {
								f8[0](id10[0],image);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(bytesLoaded3,bytesTotal3) {
								f9[0](id11[0],bytesLoaded3,bytesTotal3);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(message3) {
								f10[0](id12[0],message3);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(audioBuffer) {
								f11[0](id13[0],audioBuffer);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(bytesLoaded4,bytesTotal4) {
								f12[0](id14[0],bytesLoaded4,bytesTotal4);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(message4) {
								f13[0](id15[0],message4);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(text) {
								f14[0](id16[0],text);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.cachedBytes;
					return lime_graphics_Image.loadFromBytes(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]).then(function(image) {
						_gthis.cachedBytes.remove(id);
						var _this6 = _gthis.cachedImages;
						if(__map_reserved[id] != null) {
							_this6.setReserved(id,image);
						} else {
							_this6.h[id] = image;
						}
						return lime_app_Future.withValue(image);
					});
				} else {
					var _this7 = this.paths;
					return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				tmp = __map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id);
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size;
			var _this1 = this.sizes;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.sizes;
				size = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			} else {
				size = 0;
			}
			var _this3 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this4 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this5 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this5.setReserved(id,size);
			} else {
				_this5.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				var key = asset.path;
				var _this = bundle.data;
				data = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						var value = data != null ? Std.string(data) : null;
						var _this1 = this.cachedText;
						if(__map_reserved[id] != null) {
							_this1.setReserved(id,value);
						} else {
							_this1.h[id] = value;
						}
					} else {
						var _this2 = this.cachedBytes;
						if(__map_reserved[id] != null) {
							_this2.setReserved(id,data);
						} else {
							_this2.h[id] = data;
						}
					}
					var value1 = asset.type;
					var _this3 = this.types;
					if(__map_reserved[id] != null) {
						_this3.setReserved(id,value1);
					} else {
						_this3.h[id] = value1;
					}
				} else {
					var _this4 = this.cachedBytes;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,data);
					} else {
						_this4.h[id] = data;
					}
					var _this5 = this.types;
					var value2 = "BINARY";
					if(__map_reserved[id] != null) {
						_this5.setReserved(id,value2);
					} else {
						_this5.h[id] = value2;
					}
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = bundle.paths;
			while(_g2 < _g11.length) {
				var path = _g11[_g2];
				++_g2;
				var this1 = this.cachedBytes;
				var _this6 = bundle.data;
				var value3 = __map_reserved[path] != null ? _this6.getReserved(path) : _this6.h[path];
				var _this7 = this1;
				if(__map_reserved[path] != null) {
					_this7.setReserved(path,value3);
				} else {
					_this7.h[path] = value3;
				}
				var _this8 = this.types;
				var value4 = "BINARY";
				if(__map_reserved[path] != null) {
					_this8.setReserved(path,value4);
				} else {
					_this8.h[path] = value4;
				}
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g11 = pathGroup.length;
				while(_g2 < _g11) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this.preload;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g21 = 0;
		var _g3 = manifest.assets;
		while(_g21 < _g3.length) {
			var asset1 = _g3[_g21];
			++_g21;
			id = Object.prototype.hasOwnProperty.call(asset1,"id") ? asset1.id : asset1.path;
			var tmp;
			var tmp1;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				tmp1 = __map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id];
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var _this8 = this.sizes;
				tmp = __map_reserved[id] != null ? _this8.existsReserved(id) : _this8.h.hasOwnProperty(id);
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this9 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this9.getReserved(id) : _this9.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.existsReserved(name);
	} else {
		return _this.h.hasOwnProperty(name);
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.bundlePaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.bundlePaths;
		lime_utils_AssetBundle.loadFromFile(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library1 = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library1 == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				var _this2 = lime_utils_Assets.libraries;
				if(__map_reserved[id] != null) {
					_this2.setReserved(id,library1);
				} else {
					_this2.h[id] = library1;
				}
				library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				var tmp = library1.load();
				promise.completeWith(tmp);
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		var _this3 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id)) {
			var _this4 = lime_utils_Assets.libraryPaths;
			path = __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library2 = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library2 == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				var _this5 = lime_utils_Assets.libraries;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,library2);
				} else {
					_this5.h[id] = library2;
				}
				library2.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				var tmp1 = library2.load();
				promise.completeWith(tmp1);
			}
		}).onError(function(_1) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
$hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] = lime_utils__$BytePointer_BytePointer_$Impl_$;
lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = "lime.utils._BytePointer.BytePointer_Impl_";
lime_utils__$BytePointer_BytePointer_$Impl_$._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(vector != null) {
		this1 = new Uint8ClampedArray(vector.__array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(vector != null) {
		this1 = new Int8Array(vector.__array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(vector != null) {
		this1 = new Int16Array(vector.__array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(vector != null) {
		this1 = new Uint32Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(vector != null) {
		this1 = new Int32Array(vector.__array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(vector != null) {
		this1 = new Float64Array(vector.__array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = "lime.utils._Bytes.Bytes_Impl_";
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils__$Bytes_Bytes_$Impl_$.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__ : "lime.utils.CompressionAlgorithm", __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"]
	,DEFLATE: {_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = "lime.utils._DataPointer.DataPointer_Impl_";
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function(value) {
	return value;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function(buffer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function(bytesData) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function(path) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset = function(data,offset) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function(a,b) {
	return a > b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function(a,b) {
	return a < b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b | 0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-(b | 0));
};
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = "lime.utils._Float32Array.Float32Array_Impl_";
lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
$hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] = lime_utils__$Float64Array_Float64Array_$Impl_$;
lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = "lime.utils._Float64Array.Float64Array_Impl_";
lime_utils__$Float64Array_Float64Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = "lime.utils._Int16Array.Int16Array_Impl_";
lime_utils__$Int16Array_Int16Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = "lime.utils._Int32Array.Int32Array_Impl_";
lime_utils__$Int32Array_Int32Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
$hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] = lime_utils__$Int8Array_Int8Array_$Impl_$;
lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = "lime.utils._Int8Array.Int8Array_Impl_";
lime_utils__$Int8Array_Int8Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils__$LogLevel_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._LogLevel.LogLevel_Impl_"] = lime_utils__$LogLevel_LogLevel_$Impl_$;
lime_utils__$LogLevel_LogLevel_$Impl_$.__name__ = "lime.utils._LogLevel.LogLevel_Impl_";
lime_utils__$LogLevel_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g3 = this.libraries;
		while(_g2 < _g3.length) {
			var library1 = [_g3[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g4 = 0;
		var _g5 = this.libraryNames;
		while(_g4 < _g5.length) {
			var name = _g5[_g4];
			++_g4;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							total1 = __map_reserved[name2[0]] != null ? _this6.getReserved(name2[0]) : _this6.h[name2[0]];
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = "lime.utils._UInt16Array.UInt16Array_Impl_";
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = "lime.utils._UInt32Array.UInt32Array_Impl_";
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = "lime.utils._UInt8Array.UInt8Array_Impl_";
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
$hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] = lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = "lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_";
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function(_in) {
	var _out = _in | 0;
	_out = _out > 255 ? 255 : _out;
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = "motion.actuators.IGenericActuator";
motion_actuators_IGenericActuator.__isInterface__ = true;
motion_actuators_IGenericActuator.prototype = {
	autoVisible: null
	,delay: null
	,ease: null
	,onComplete: null
	,onRepeat: null
	,onUpdate: null
	,reflect: null
	,repeat: null
	,reverse: null
	,smartRotation: null
	,snapping: null
	,onPause: null
	,onResume: null
	,apply: null
	,move: null
	,pause: null
	,resume: null
	,stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = "motion.actuators.GenericActuator";
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = motion_actuators_SimpleActuator.getTime();
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = "motion.actuators.SimpleActuator";
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = motion_actuators_SimpleActuator.getTime();
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g = 0;
	var _g1 = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g < _g1) {
		var i = _g++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,apply: function() {
		motion_actuators_GenericActuator.prototype.apply.call(this);
		if(this.toggleVisible && Object.prototype.hasOwnProperty.call(this.properties,"alpha")) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			if(value != null) {
				var target1 = this.target;
				var value1 = Reflect.field(this.properties,"alpha") > 0;
				if(Object.prototype.hasOwnProperty.call(target1,"visible") && !(target1.__properties__ && target1.__properties__["set_" + "visible"])) {
					target1["visible"] = value1;
				} else {
					Reflect.setProperty(target1,"visible",value1);
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
					target["visible"] = value1;
				} else {
					Reflect.setProperty(target,"visible",value1);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && ((this.target) instanceof openfl_display_DisplayObject);
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				value1 = Reflect.getProperty(target1,"visible");
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			var value2 = true;
			if(Object.prototype.hasOwnProperty.call(target2,"visible") && !(target2.__properties__ && target2.__properties__["set_" + "visible"])) {
				target2["visible"] = value2;
			} else {
				Reflect.setProperty(target2,"visible",value2);
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = motion_actuators_SimpleActuator.getTime();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += motion_actuators_SimpleActuator.getTime() - this.pauseTime;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName) && !(target.__properties__ && target.__properties__["set_" + propertyName])) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.detailsLength;
				while(_g < _g1) {
					var i1 = _g++;
					details = this.propertyDetails[i1];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.detailsLength;
				while(_g2 < _g11) {
					var i2 = _g2++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						var value1 = endValue;
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					} else {
						var value2 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value2;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value2);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value3 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value3 = Reflect.field(target,"alpha");
						} else {
							value3 = Reflect.getProperty(target,"alpha");
						}
						tmp = value3 == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						var value4 = false;
						if(Object.prototype.hasOwnProperty.call(target1,"visible") && !(target1.__properties__ && target1.__properties__["set_" + "visible"])) {
							target1["visible"] = value4;
						} else {
							Reflect.setProperty(target1,"visible",value4);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = "motion.easing.IEasing";
motion_easing_IEasing.__isInterface__ = true;
motion_easing_IEasing.prototype = {
	calculate: null
	,ease: null
	,__class__: motion_easing_IEasing
};
var motion_easing__$Expo_ExpoEaseIn = function() {
};
$hxClasses["motion.easing._Expo.ExpoEaseIn"] = motion_easing__$Expo_ExpoEaseIn;
motion_easing__$Expo_ExpoEaseIn.__name__ = "motion.easing._Expo.ExpoEaseIn";
motion_easing__$Expo_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		} else {
			return Math.exp(6.931471805599453 * (k - 1));
		}
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		} else {
			return c * Math.exp(6.931471805599453 * (t / d - 1)) + b;
		}
	}
	,__class__: motion_easing__$Expo_ExpoEaseIn
};
var motion_easing__$Expo_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing._Expo.ExpoEaseInOut"] = motion_easing__$Expo_ExpoEaseInOut;
motion_easing__$Expo_ExpoEaseInOut.__name__ = "motion.easing._Expo.ExpoEaseInOut";
motion_easing__$Expo_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		if((k /= 0.5) < 1.0) {
			return 0.5 * Math.exp(6.931471805599453 * (k - 1));
		}
		return 0.5 * (2 - Math.exp(-6.931471805599453 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		if(t == d) {
			return b + c;
		}
		if((t /= d / 2.0) < 1.0) {
			return c / 2 * Math.exp(6.931471805599453 * (t - 1)) + b;
		}
		return c / 2 * (2 - Math.exp(-6.931471805599453 * --t)) + b;
	}
	,__class__: motion_easing__$Expo_ExpoEaseInOut
};
var motion_easing__$Expo_ExpoEaseOut = function() {
};
$hxClasses["motion.easing._Expo.ExpoEaseOut"] = motion_easing__$Expo_ExpoEaseOut;
motion_easing__$Expo_ExpoEaseOut.__name__ = "motion.easing._Expo.ExpoEaseOut";
motion_easing__$Expo_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.exp(-6.931471805599453 * k);
		}
	}
	,ease: function(t,b,c,d) {
		if(t == d) {
			return b + c;
		} else {
			return c * (1 - Math.exp(-6.931471805599453 * t / d)) + b;
		}
	}
	,__class__: motion_easing__$Expo_ExpoEaseOut
};
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = "motion.easing.Expo";
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = "motion.Actuate";
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__implements(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var i = library1.length - 1;
		while(i >= 0) {
			library1[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__implements(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__implements(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if(((properties) instanceof Array)) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(duration == null) {
		duration = 0;
	}
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = "motion._Actuate.EffectsOptions";
motion__$Actuate_EffectsOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = "motion._Actuate.TransformOptions";
motion__$Actuate_TransformOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,color: function(value,strength,alpha) {
		if(strength == null) {
			strength = 1;
		}
		if(value == null) {
			value = 0;
		}
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) {
			properties.colorAlpha = alpha;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) {
			properties.soundVolume = volume;
		}
		if(pan != null) {
			properties.soundPan = pan;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = "motion._Actuate.TweenTimer";
motion__$Actuate_TweenTimer.prototype = {
	progress: null
	,__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion__$MotionPath_ComponentPath();
	this._y = new motion__$MotionPath_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = "motion.MotionPath";
motion_MotionPath.prototype = {
	_rotation: null
	,_x: null
	,_y: null
	,bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		return this.bezierN(x,y,[controlX],[controlY],strength);
	}
	,bezierN: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion__$MotionPath_BezierPath(x,controlX,strength));
		this._y.addPath(new motion__$MotionPath_BezierPath(y,controlY,strength));
		return this;
	}
	,bezierSpline: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion__$MotionPath_BezierSplinePath(x,strength));
		this._y.addPath(new motion__$MotionPath_BezierSplinePath(y,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		return this.bezierN(x,y,[],[],strength);
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = new motion__$MotionPath_RotationPath(this._x,this._y);
		}
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = "motion.IComponentPath";
motion_IComponentPath.__isInterface__ = true;
motion_IComponentPath.prototype = {
	get_start: null
	,set_start: null
	,get_end: null
	,end: null
	,strength: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
var motion__$MotionPath_ComponentPath = function() {
	this.paths = [];
	this.strength = 0;
};
$hxClasses["motion._MotionPath.ComponentPath"] = motion__$MotionPath_ComponentPath;
motion__$MotionPath_ComponentPath.__name__ = "motion._MotionPath.ComponentPath";
motion__$MotionPath_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_ComponentPath.prototype = {
	strength: null
	,paths: null
	,addPath: function(path) {
		if(this.paths.length > 0) {
			path.set_start(this.paths[this.paths.length - 1].get_end());
		}
		this.paths.push(path);
		this.strength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(k);
		} else {
			var ratio = k * this.strength;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
				} else {
					return path.calculate(ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_start: function() {
		if(this.paths.length > 0) {
			return this.paths[0].get_start();
		} else {
			return 0;
		}
	}
	,set_start: function(value) {
		if(this.paths.length > 0) {
			return this.paths[0].set_start(value);
		} else {
			return 0;
		}
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.get_end();
		} else {
			return this.get_start();
		}
	}
	,__class__: motion__$MotionPath_ComponentPath
	,__properties__: {get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
var motion__$MotionPath_BezierPath = function(end,control,strength) {
	this._end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion._MotionPath.BezierPath"] = motion__$MotionPath_BezierPath;
motion__$MotionPath_BezierPath.__name__ = "motion._MotionPath.BezierPath";
motion__$MotionPath_BezierPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_BezierPath.prototype = {
	control: null
	,end: null
	,strength: null
	,_start: null
	,_end: null
	,calculate: function(k) {
		var l = 1 - k;
		switch(this.control.length) {
		case 0:
			return l * this._start + k * this._end;
		case 1:
			return l * l * this._start + 2 * l * k * this.control[0] + k * k * this._end;
		case 2:
			return l * l * l * this._start + 3 * l * l * k * this.control[0] + 3 * l * k * k * this.control[1] + k * k * k * this._end;
		default:
			if(l < 1e-7) {
				return this._end;
			}
			var r = k / l;
			var n = this.control.length + 1;
			var coeff = Math.pow(l,n);
			var res = coeff * this._start;
			var _g = 1;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				coeff *= r * (n + 1 - i) / i;
				res += coeff * this.control[i - 1];
			}
			coeff *= r / n;
			return res + coeff * this._end;
		}
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		return this._start = value;
	}
	,get_end: function() {
		return this._end;
	}
	,__class__: motion__$MotionPath_BezierPath
	,__properties__: {get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
var motion__$MotionPath_BezierSplinePath = function(through,strength) {
	motion__$MotionPath_ComponentPath.call(this);
	this.through = through;
	this.strength = strength;
};
$hxClasses["motion._MotionPath.BezierSplinePath"] = motion__$MotionPath_BezierSplinePath;
motion__$MotionPath_BezierSplinePath.__name__ = "motion._MotionPath.BezierSplinePath";
motion__$MotionPath_BezierSplinePath.__super__ = motion__$MotionPath_ComponentPath;
motion__$MotionPath_BezierSplinePath.prototype = $extend(motion__$MotionPath_ComponentPath.prototype,{
	through: null
	,computeControlPoints: function(start) {
		var K = [start].concat(this.through);
		var n = K.length;
		var _g = [];
		var _g1 = 0;
		var _g2 = n;
		while(_g1 < _g2) {
			var _ = _g1++;
			_g.push([0.0,0.0]);
		}
		var control = _g;
		var a = [];
		var b = [];
		var c = [];
		var r = [];
		a[0] = 0;
		b[0] = 2;
		c[0] = 1;
		r[0] = K[0] + 2 * K[1];
		var _g3 = 1;
		var _g4 = n - 1;
		while(_g3 < _g4) {
			var i = _g3++;
			a[i] = 1;
			b[i] = 4;
			c[i] = 1;
			r[i] = 4 * K[i] + 2 * K[i + 1];
		}
		a[n - 1] = 1;
		b[n - 1] = 2;
		c[n - 1] = 0;
		r[n - 1] = 3 * K[n - 1];
		var _g5 = 1;
		var _g6 = n;
		while(_g5 < _g6) {
			var i1 = _g5++;
			var m = a[i1] / b[i1 - 1];
			b[i1] -= m * c[i1 - 1];
			r[i1] -= m * r[i1 - 1];
		}
		control[n - 1][0] = r[n - 1] / b[n - 1];
		var i2 = n - 2;
		while(i2 >= 0) {
			control[i2][0] = (r[i2] - c[i2] * control[i2 + 1][0]) / b[i2];
			--i2;
		}
		var _g7 = 0;
		var _g8 = n - 1;
		while(_g7 < _g8) {
			var i3 = _g7++;
			control[i3][1] = 2 * K[i3 + 1] - control[i3 + 1][0];
		}
		control[n - 1][1] = 0.5 * (K[n] + control[n - 1][0]);
		control.pop();
		return control;
	}
	,set_start: function(value) {
		if(this.paths.length == 0 || Math.abs(value - this.get_start()) > 1e-7) {
			var control = this.computeControlPoints(value);
			var pathStrength = this.strength / control.length;
			this.strength = 0;
			this.paths.splice(0,this.paths.length);
			var _g = 0;
			var _g1 = control.length;
			while(_g < _g1) {
				var i = _g++;
				this.addPath(new motion__$MotionPath_BezierPath(this.through[i],control[i],pathStrength));
			}
		}
		return motion__$MotionPath_ComponentPath.prototype.set_start.call(this,value);
	}
	,get_end: function() {
		return this.through[this.through.length - 1];
	}
	,__class__: motion__$MotionPath_BezierSplinePath
});
var motion__$MotionPath_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.set_start(this.calculate(0.0));
};
$hxClasses["motion._MotionPath.RotationPath"] = motion__$MotionPath_RotationPath;
motion__$MotionPath_RotationPath.__name__ = "motion._MotionPath.RotationPath";
motion__$MotionPath_RotationPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_RotationPath.prototype = {
	offset: null
	,strength: null
	,_start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		return this._start;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion__$MotionPath_RotationPath
	,__properties__: {set_start:"set_start",get_start:"get_start",get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = "motion.actuators.FilterActuator";
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				Reflect.setProperty(this.filter,propertyName,Reflect.field(this.properties,propertyName));
			}
		}
		this.setFilter();
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				var target = this.filter;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
					value = Reflect.field(target,propertyName);
				} else {
					value = Reflect.getProperty(target,propertyName);
				}
				start = value;
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start,Object.prototype.hasOwnProperty.call(this.filter,"set_" + propertyName));
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,setFilter: function() {
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.filterIndex] = this.filter;
		} else {
			var _g = 0;
			var _g1 = filters.length;
			while(_g < _g1) {
				var i = _g++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		var target = this.target;
		var value = filters;
		if(Object.prototype.hasOwnProperty.call(target,"filters") && !(target.__properties__ && target.__properties__["set_" + "filters"])) {
			target["filters"] = value;
		} else {
			Reflect.setProperty(target,"filters",value);
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		this.setFilter();
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g = 0;
	var _g1 = this.properties.start.length;
	while(_g < _g1) {
		var i = _g++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = "motion.actuators.MethodActuator";
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g = 0;
			var _g1 = this.properties.start.length;
			while(_g < _g1) {
				var i = _g++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = "motion.actuators.MotionPathActuator";
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.set_start(Reflect.field(this.target,propertyName));
				} else {
					isField = false;
					path.set_start(Reflect.getProperty(this.target,propertyName));
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						var value1 = false;
						if(Object.prototype.hasOwnProperty.call(target1,"visible") && !(target1.__properties__ && target1.__properties__["set_" + "visible"])) {
							target1["visible"] = value1;
						} else {
							Reflect.setProperty(target1,"visible",value1);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = "motion.actuators.PropertyDetails";
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = "motion.actuators.PropertyPathDetails";
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = "motion.actuators.TransformActuator";
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				value = Reflect.getProperty(target,"transform");
			}
			var transform = value;
			var value1 = this.endColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform") && !(transform.__properties__ && transform.__properties__["set_" + "colorTransform"])) {
				transform["colorTransform"] = value1;
			} else {
				Reflect.setProperty(transform,"colorTransform",value1);
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.endSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform") && !(target1.__properties__ && target1.__properties__["set_" + "soundTransform"])) {
				target1["soundTransform"] = value2;
			} else {
				Reflect.setProperty(target1,"soundTransform",value2);
			}
		}
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && ((this.target) instanceof openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
				value = Reflect.field(target,"alpha");
			} else {
				value = Reflect.getProperty(target,"alpha");
			}
			this.endColorTransform.alphaMultiplier = value;
		}
		var target1 = this.target;
		var value1 = null;
		if(Object.prototype.hasOwnProperty.call(target1,"transform")) {
			value1 = Reflect.field(target1,"transform");
		} else {
			value1 = Reflect.getProperty(target1,"transform");
		}
		var transform = value1;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
			value2 = Reflect.field(transform,"colorTransform");
		} else {
			value2 = Reflect.getProperty(transform,"colorTransform");
		}
		var begin = value2;
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			var value3 = null;
			if(Object.prototype.hasOwnProperty.call(begin,propertyName)) {
				value3 = Reflect.field(begin,propertyName);
			} else {
				value3 = Reflect.getProperty(begin,propertyName);
			}
			start = value3;
			var details1 = this.tweenColorTransform;
			var target2 = this.endColorTransform;
			var value4 = null;
			if(Object.prototype.hasOwnProperty.call(target2,propertyName)) {
				value4 = Reflect.field(target2,propertyName);
			} else {
				value4 = Reflect.getProperty(target2,propertyName);
			}
			details = new motion_actuators_PropertyDetails(details1,propertyName,start,value4 - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			value = Reflect.getProperty(target,"soundTransform");
		}
		if(value == null) {
			var target1 = this.target;
			var value1 = new openfl_media_SoundTransform();
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform") && !(target1.__properties__ && target1.__properties__["set_" + "soundTransform"])) {
				target1["soundTransform"] = value1;
			} else {
				Reflect.setProperty(target1,"soundTransform",value1);
			}
		}
		var target2 = this.target;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(target2,"soundTransform")) {
			value2 = Reflect.field(target2,"soundTransform");
		} else {
			value2 = Reflect.getProperty(target2,"soundTransform");
		}
		var start = value2;
		var target3 = this.target;
		var value3 = null;
		if(Object.prototype.hasOwnProperty.call(target3,"soundTransform")) {
			value3 = Reflect.field(target3,"soundTransform");
		} else {
			value3 = Reflect.getProperty(target3,"soundTransform");
		}
		this.endSoundTransform = value3;
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				value = Reflect.getProperty(target,"transform");
			}
			var transform = value;
			var value1 = this.tweenColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform") && !(transform.__properties__ && transform.__properties__["set_" + "colorTransform"])) {
				transform["colorTransform"] = value1;
			} else {
				Reflect.setProperty(transform,"colorTransform",value1);
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.tweenSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform") && !(target1.__properties__ && target1.__properties__["set_" + "soundTransform"])) {
				target1["soundTransform"] = value2;
			} else {
				Reflect.setProperty(target1,"soundTransform",value2);
			}
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var old_Core = function() {
	this.mSystemList = [];
};
$hxClasses["old.Core"] = old_Core;
old_Core.__name__ = "old.Core";
old_Core.__properties__ = {get_instance:"get_instance"};
old_Core.get_instance = function() {
	if(old_Core.mInstance == null) {
		old_Core.mInstance = new old_Core();
	}
	return old_Core.mInstance;
};
old_Core.prototype = {
	mSystemList: null
	,init: function() {
	}
	,addSystem: function(sys) {
		if(this.containsSystem(this.mSystemList,sys) < 0) {
			this.mSystemList.push(sys);
		} else {
			throw new js__$Boot_HaxeError("Can't add! System already in the list!");
		}
	}
	,removeSystem: function(sys) {
		var lIndex = this.containsSystem(this.mSystemList,sys);
		if(lIndex >= 0) {
			sys._destroy();
			this.mSystemList.splice(lIndex,1);
		} else {
			throw new js__$Boot_HaxeError("Can't remove! System not in the list!");
		}
	}
	,pause: function() {
		var _g = 0;
		var _g1 = this.mSystemList;
		while(_g < _g1.length) {
			var lSystem = _g1[_g];
			++_g;
			lSystem.pause();
		}
	}
	,resume: function() {
		var _g = 0;
		var _g1 = this.mSystemList;
		while(_g < _g1.length) {
			var lSystem = _g1[_g];
			++_g;
			lSystem.resume();
		}
	}
	,update: function(time_step) {
		var _g = 0;
		var _g1 = this.mSystemList;
		while(_g < _g1.length) {
			var lSystem = _g1[_g];
			++_g;
			lSystem._update(time_step);
		}
	}
	,destroy: function() {
		while(this.mSystemList.length > 0) this.removeSystem(this.mSystemList[0]);
	}
	,containsSystem: function(array,sys) {
		var lLnegth = array.length;
		var _g = 0;
		var _g1 = lLnegth;
		while(_g < _g1) {
			var i = _g++;
			if(array[i] == sys) {
				return i;
			}
		}
		return -1;
	}
	,__class__: old_Core
};
var old_MainOld = function() {
	this.muiSystem = null;
	this.mCore = null;
	this.mInputSystem = null;
	this.mGameSystem = null;
	this.mPlayer = null;
	this.context = null;
	this.builder = null;
	this.container = null;
	if(old_MainOld.instance_ != null) {
		throw new js__$Boot_HaxeError("Singleton MainOld must be only one");
	}
	old_MainOld.instance_ = this;
};
$hxClasses["old.MainOld"] = old_MainOld;
old_MainOld.__name__ = "old.MainOld";
old_MainOld.getInstance = function() {
	if(old_MainOld.instance_ == null) {
		new old_MainOld();
	}
	return old_MainOld.instance_;
};
old_MainOld.prototype = {
	container: null
	,builder: null
	,mUIContainer: null
	,context: null
	,mPlayer: null
	,get_Player: function() {
		return this.mPlayer;
	}
	,mGameSystem: null
	,get_gameSystem: function() {
		return this.mGameSystem;
	}
	,mInputSystem: null
	,get_inputSystem: function() {
		return this.mInputSystem;
	}
	,mCore: null
	,get_core: function() {
		return this.mCore;
	}
	,get_uiSystem: function() {
		return this.muiSystem;
	}
	,muiSystem: null
	,mWorld: null
	,init: function() {
		this.mCore = old_Core.get_instance();
		this.mCore.init();
		this.mInputSystem = new old_systems_InputEventRedirect();
		this.mCore.addSystem(this.mInputSystem);
		this.mPlayer = new old_entities_Player();
		this.mGameSystem = new old_systems_GameSystem(this.mPlayer);
		this.mUIContainer = this.builder.createSprite();
		this.container.addChild(this.mUIContainer);
		this.muiSystem = new old_systems_uI_UISystem(this.mUIContainer,this.mGameSystem);
		this.mCore.addSystem(this.muiSystem);
		this.mWorld = old_singleton_GameWorld.get_instance();
		this.mCore.addSystem(this.mGameSystem);
	}
	,update: function(time_step) {
		this.mCore.update(time_step);
	}
	,__class__: old_MainOld
	,__properties__: {get_uiSystem:"get_uiSystem",get_core:"get_core",get_inputSystem:"get_inputSystem",get_gameSystem:"get_gameSystem",get_Player:"get_Player"}
};
var old_entities_Entity = function(name) {
	this.mName = name;
};
$hxClasses["old.entities.Entity"] = old_entities_Entity;
old_entities_Entity.__name__ = "old.entities.Entity";
old_entities_Entity.prototype = {
	mName: null
	,mGraphics: null
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(n) {
		this.mName = n;
		return n;
	}
	,get_graphics: function() {
		return this.mGraphics;
	}
	,set_graphics: function(g) {
		this.mGraphics = g;
		return g;
	}
	,__class__: old_entities_Entity
	,__properties__: {set_graphics:"set_graphics",get_graphics:"get_graphics",set_name:"set_name",get_name:"get_name"}
};
var old_entities_Player = function() {
	this.mMap = null;
	this.mSurvivorRepairingValue = 0;
	this.mSurvivors = null;
	this.mSlot2HudImg = null;
	this.mSlot1HudImg = null;
	this.mWeaponHud = null;
	this.mDamageModifier = 1;
	this.mDifficulty = 0;
	this.mDead = false;
	this.mRoundLifeLost = 0;
	this.mLifeLabel = null;
	this.mMaxLife = 0;
	this.mLife = 0;
	this.mMoneyLabel = null;
	this.mRoundMoney = 0;
	this.mMoney = 0;
	this.mAimY = 0;
	this.mAimX = 0;
	this.mRecoilValue = 0;
	this.mLastUsedGun = null;
	this.mCurGun = null;
	this.mGunSlot2 = null;
	this.mGunSlot1 = null;
	this.mInventory = null;
	this.mFirstLevelSinceGameLaunch = true;
	this.mLastStartedLevelNumber = -1;
	this.mLastLevelNumber = -1;
	this.mLevelNumber = 0;
	this.mMainGraphics = null;
	this.mTutorialShown = false;
	this.mFriendliesSystem = null;
	this.mPlayerControls = null;
	this.mBulletSystem = null;
	this.mMoneyLabel = new old_systems_uI_UILabel("0$",195,21,"Ampersand",18,13421772,true,false,"left",-1);
	this.mMoneyLabel.set_text(Std.string(this.mMoney));
	this.mLifeLabel = new old_systems_uI_UILabel("0$",425,21,"Ampersand",18,13421772,true,false,"right",1);
	this.mLifeLabel.set_text(this.get_life() + "%");
	this.mLifeLabel.set_fontSize(18);
	this.mWeaponHud = old_MainOld.getInstance().builder.createSprite();
	this.mSlot1HudImg = null;
	this.mSlot2HudImg = null;
	this.mSurvivors = new old_entities_survivors_Survivors();
	this.mMap = new old_entities_map_Map(this);
	this.load();
	old_events_EventManager.get_instance().addEventListener(old_events_GunEvent.PUT_AWAY,$bind(this,this.swapFinish));
	old_events_EventManager.get_instance().addEventListener(old_events_EnemyEvent.ENEMY_FIRING,$bind(this,this.onEnemyShotFired));
};
$hxClasses["old.entities.Player"] = old_entities_Player;
old_entities_Player.__name__ = "old.entities.Player";
old_entities_Player.prototype = {
	mBulletSystem: null
	,mPlayerControls: null
	,mFriendliesSystem: null
	,mTutorialShown: null
	,mMainGraphics: null
	,mLevelNumber: null
	,mLastLevelNumber: null
	,mLastStartedLevelNumber: null
	,mFirstLevelSinceGameLaunch: null
	,mInventory: null
	,mGunSlot1: null
	,mGunSlot2: null
	,mCurGun: null
	,mLastUsedGun: null
	,mRecoilValue: null
	,mAimX: null
	,mAimY: null
	,mMoney: null
	,mRoundMoney: null
	,mMoneyLabel: null
	,mLife: null
	,mMaxLife: null
	,mLifeLabel: null
	,mRoundLifeLost: null
	,mDead: null
	,mScore: null
	,mRoundScore: null
	,mKills: null
	,mRoundKills: null
	,mDifficulty: null
	,mDamageModifier: null
	,mWeaponHud: null
	,mSlot1HudImg: null
	,mSlot2HudImg: null
	,mSurvivors: null
	,mSurvivorRepairingValue: null
	,mMap: null
	,get_tutorialShown: function() {
		return this.mTutorialShown;
	}
	,set_tutorialShown: function(value) {
		this.mTutorialShown = value;
		return value;
	}
	,get_bulletSystem: function() {
		return this.mBulletSystem;
	}
	,set_bulletSystem: function(value) {
		this.mBulletSystem = value;
		return value;
	}
	,get_playeControlSystem: function() {
		return this.mPlayerControls;
	}
	,set_playeControlSystem: function(value) {
		this.mPlayerControls = value;
		return value;
	}
	,get_friendliesSystem: function() {
		return this.mFriendliesSystem;
	}
	,set_friendliesSystem: function(value) {
		this.mFriendliesSystem = value;
		return value;
	}
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_weaponHud: function() {
		return this.mWeaponHud;
	}
	,get_levelNumber: function() {
		return this.mLevelNumber;
	}
	,set_levelNumber: function(value) {
		haxe_Log.trace("Player set_levelNumber " + value,{ fileName : "src/old/entities/Player.hx", lineNumber : 198, className : "old.entities.Player", methodName : "set_levelNumber"});
		this.mLevelNumber = value;
		return value;
	}
	,get_lastLevelNumber: function() {
		return this.mLastLevelNumber;
	}
	,set_lastLevelNumber: function(value) {
		this.mLastLevelNumber = value;
		return value;
	}
	,get_lastStartedLevelNumber: function() {
		return this.mLastStartedLevelNumber;
	}
	,set_lastStartedLevelNumber: function(value) {
		this.mLastStartedLevelNumber = value;
		return value;
	}
	,get_firstLevelSinceGameLaunch: function() {
		return this.mFirstLevelSinceGameLaunch;
	}
	,set_firstLevelSinceGameLaunch: function(value) {
		this.mFirstLevelSinceGameLaunch = value;
		return value;
	}
	,get_prevTimeOfDay: function() {
		return (this.mLevelNumber - 1) % 3 | 0;
	}
	,get_timeOfDay: function() {
		return this.mLevelNumber % 3 | 0;
	}
	,get_inventory: function() {
		return this.mInventory;
	}
	,get_slot1: function() {
		return this.mGunSlot1;
	}
	,get_slot2: function() {
		return this.mGunSlot2;
	}
	,get_curGun: function() {
		return this.mCurGun;
	}
	,get_money: function() {
		return this.mMoney;
	}
	,get_moneyLabel: function() {
		return this.mMoneyLabel;
	}
	,get_roundMoney: function() {
		return this.mRoundMoney;
	}
	,get_maxLife: function() {
		return this.mMaxLife;
	}
	,get_life: function() {
		return Math.ceil(this.mLife / this.mMaxLife * 100.0);
	}
	,set_life: function(value) {
		this.mLife = value;
		return value;
	}
	,get_damage: function() {
		return this.mMaxLife - this.mLife | 0;
	}
	,get_roundLifeLost: function() {
		return this.mRoundLifeLost;
	}
	,get_lifeLabel: function() {
		return this.mLifeLabel;
	}
	,get_score: function() {
		return this.mScore;
	}
	,get_roundScore: function() {
		return this.mRoundScore;
	}
	,get_kills: function() {
		return this.mKills;
	}
	,get_roundKills: function() {
		return this.mRoundKills;
	}
	,get_recoil: function() {
		return this.mRecoilValue;
	}
	,set_recoil: function(value) {
		this.mRecoilValue = value;
		return value;
	}
	,get_aimX: function() {
		return this.mAimX;
	}
	,set_aimX: function(value) {
		this.mAimX = value;
		return value;
	}
	,get_aimY: function() {
		return this.mAimY;
	}
	,set_aimY: function(value) {
		this.mAimY = value;
		return value;
	}
	,get_difficulty: function() {
		return this.mDifficulty;
	}
	,set_difficulty: function(value) {
		this.mDifficulty = value;
		if(this.mDifficulty == 0) {
			this.mDamageModifier = 0.27;
		} else if(this.mDifficulty == 1) {
			this.mDamageModifier = 0.32;
		}
		return value;
	}
	,get_damageModifier: function() {
		return this.mDamageModifier;
	}
	,get_survivors: function() {
		return this.mSurvivors;
	}
	,get_map: function() {
		return this.mMap;
	}
	,addToInventory: function(item,buy) {
		if(buy == null) {
			buy = false;
		}
		if(buy) {
			if(this.mMoney >= item.get_price()) {
				this.mInventory.push(item);
				this.mMoney -= item.get_price();
				this.mMoneyLabel.set_text(Std.string(this.mMoney));
			}
		} else {
			this.mInventory.push(item);
		}
	}
	,getFromInventoryByModel: function(model) {
		if(model == null) {
			model = 0;
		}
		var lInventoryItem = null;
		var i = this.mInventory.length - 1 | 0;
		while(i >= 0) {
			lInventoryItem = this.mInventory[i];
			if(lInventoryItem.get_model() == model) {
				return lInventoryItem;
			}
			--i;
		}
		return null;
	}
	,removeFromInventory: function(item,sell) {
		if(sell == null) {
			sell = false;
		}
		if(this.mCurGun == item) {
			this.mCurGun = null;
		} else if(this.mGunSlot1 == item) {
			this.mGunSlot1 = null;
		} else if(this.mGunSlot2 == item) {
			this.mGunSlot2 = null;
		}
		var index = Lambda.indexOf(this.mInventory,item);
		if(index >= 0) {
			this.mInventory.splice(index,1);
			if(sell) {
				this.mMoney += item.get_price() / 2;
				this.mMoneyLabel.set_text(Std.string(this.mMoney));
			}
		}
	}
	,equipSlot1: function(item) {
		if(item == null) {
			if(this.mGunSlot1 != null) {
				this.mGunSlot1.set_equipped(false);
				this.mGunSlot1 = null;
			}
		} else {
			var index = Lambda.indexOf(this.mInventory,item);
			if(index >= 0) {
				if(!item.get_equipped() && (item.get_type() == 1 || item.get_type() == 1)) {
					if(this.mGunSlot1 != null) {
						this.mGunSlot1.set_equipped(false);
						this.mGunSlot1 = null;
					}
					var tmp;
					try {
						tmp = js_Boot.__cast(item , old_entities_equipment_Gun);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						tmp = null;
					}
					this.mGunSlot1 = tmp;
					this.mGunSlot1.set_equipped(true);
					this.mGunSlot1.initGraphics();
				}
			}
		}
	}
	,equipSlot1ByModel: function(model) {
		if(model == null) {
			model = 0;
		}
		var lInventoryItem = null;
		var i = this.mInventory.length - 1 | 0;
		while(i >= 0) {
			lInventoryItem = this.mInventory[i];
			if(lInventoryItem.get_model() == model) {
				this.equipSlot1(lInventoryItem);
			}
			--i;
		}
	}
	,equipSlot2: function(item) {
		if(item == null) {
			if(this.mGunSlot2 != null) {
				this.mGunSlot2.set_equipped(false);
				this.mGunSlot2 = null;
			}
		} else {
			var index = Lambda.indexOf(this.mInventory,item);
			if(index >= 0) {
				if(!item.get_equipped() && (item.get_type() == 1 || item.get_type() == 1)) {
					if(this.mGunSlot2 != null) {
						this.mGunSlot2.set_equipped(false);
						this.mGunSlot2 = null;
					}
					var tmp;
					try {
						tmp = js_Boot.__cast(item , old_entities_equipment_Gun);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						tmp = null;
					}
					this.mGunSlot2 = tmp;
					this.mGunSlot2.set_equipped(true);
					this.mGunSlot2.initGraphics();
				}
			}
		}
	}
	,equipSlot2ByModel: function(model) {
		if(model == null) {
			model = 0;
		}
		var lInventoryItem = null;
		var i = this.mInventory.length - 1 | 0;
		while(i >= 0) {
			lInventoryItem = this.mInventory[i];
			if(lInventoryItem.get_model() == model) {
				this.equipSlot2(lInventoryItem);
			}
			--i;
		}
	}
	,atlassGuns: function() {
		haxe_Log.trace("atlassGuns",{ fileName : "src/old/entities/Player.hx", lineNumber : 527, className : "old.entities.Player", methodName : "atlassGuns"});
		if(this.mGunSlot2 == null) {
			return [this.mGunSlot1.get_mainImg(),"bg" + this.get_timeOfDay()];
		} else {
			return [this.mGunSlot1.get_mainImg(),this.mGunSlot2.get_mainImg(),"bg" + this.get_timeOfDay()];
		}
	}
	,swapToGun1: function() {
		if(this.mGunSlot1 != null && this.mGunSlot1 != this.mCurGun) {
			if(this.mCurGun != null) {
				if(this.mCurGun.get_takenOut() && this.mCurGun.get_readyToShoot()) {
					this.mLastUsedGun = this.mCurGun;
					this.mCurGun.putAway();
					this.mCurGun = this.mGunSlot1;
					this.mCurGun.initGraphics();
					this.mCurGun.set_player(this);
					if(this.mSlot1HudImg != null) {
						this.mSlot1HudImg.gotoFrame(2);
						this.mSlot1HudImg.stop();
					}
					if(this.mSlot2HudImg != null) {
						this.mSlot2HudImg.gotoFrame(1);
						this.mSlot2HudImg.stop();
					}
				}
			} else {
				this.mCurGun = this.mGunSlot1;
				this.mCurGun.initGraphics();
				this.mCurGun.set_player(this);
				this.mMainGraphics.addChild(this.mCurGun.get_mainGraphics());
				this.mCurGun.takeOut(true);
				if(this.mSlot1HudImg != null) {
					this.mSlot1HudImg.gotoFrame(2);
					this.mSlot1HudImg.stop();
				}
				if(this.mSlot2HudImg != null) {
					this.mSlot2HudImg.gotoFrame(1);
					this.mSlot2HudImg.stop();
				}
			}
		}
	}
	,swapToGun2: function() {
		if(this.mGunSlot2 != null && this.mGunSlot2 != this.mCurGun) {
			if(this.mCurGun != null) {
				if(this.mCurGun.get_takenOut() && this.mCurGun.get_readyToShoot()) {
					this.mLastUsedGun = this.mCurGun;
					this.mCurGun.putAway();
					this.mCurGun = this.mGunSlot2;
					this.mCurGun.initGraphics();
					this.mCurGun.set_player(this);
					if(this.mSlot1HudImg != null) {
						this.mSlot1HudImg.gotoFrame(1);
					}
					if(this.mSlot2HudImg != null) {
						this.mSlot2HudImg.gotoFrame(2);
					}
				}
			} else {
				this.mCurGun = this.mGunSlot2;
				this.mCurGun.initGraphics();
				this.mCurGun.set_player(this);
				this.mMainGraphics.addChild(this.mCurGun.get_mainGraphics());
				this.mCurGun.takeOut(true);
				if(this.mSlot1HudImg != null) {
					this.mSlot1HudImg.gotoFrame(1);
				}
				if(this.mSlot2HudImg != null) {
					this.mSlot2HudImg.gotoFrame(2);
				}
			}
		}
	}
	,swapToLastUsed: function() {
		if(this.mCurGun != null) {
			if(this.mLastUsedGun == null) {
				if(this.mCurGun == this.mGunSlot1 && this.mGunSlot2 != null) {
					this.swapToGun2();
				} else if(this.mCurGun == this.mGunSlot2 && this.mGunSlot1 != null) {
					this.swapToGun1();
				}
			} else if(this.mLastUsedGun == this.mGunSlot1) {
				this.swapToGun1();
			} else if(this.mLastUsedGun == this.mGunSlot2) {
				this.swapToGun2();
			}
		}
	}
	,swapFinish: function(e) {
		this.mMainGraphics.removeChild(e.gun.get_mainGraphics());
		this.mMainGraphics.addChild(this.mCurGun.get_mainGraphics());
		this.mCurGun.takeOut(true);
	}
	,reload: function() {
		if(this.mCurGun != null) {
			this.mCurGun.reload();
		}
	}
	,changeFireMode: function() {
		if(this.mCurGun != null) {
			this.mCurGun.changeFireMode();
		}
	}
	,pullTrigger: function() {
		if(this.mCurGun != null) {
			this.mCurGun.pullTrigger();
		}
	}
	,releaseTrigger: function() {
		if(this.mCurGun != null) {
			this.mCurGun.releaseTrigger();
		}
	}
	,changeMoney: function(value) {
		this.mMoney += value;
		this.mMoneyLabel.set_text(Std.string(this.mMoney));
	}
	,addScore: function(value) {
		this.mRoundScore += value;
		this.mScore += value;
		this.mRoundMoney += value;
		this.mMoney += value;
		this.mMoneyLabel.set_text(Std.string(this.mMoney));
	}
	,addKills: function(value) {
		this.mRoundKills += value;
		this.mKills += value;
	}
	,doDamage: function(value) {
		value *= this.mDamageModifier;
		value *= this.mSurvivorRepairingValue;
		this.mRoundLifeLost += value | 0;
		this.mLife -= value | 0;
		if(this.mLife <= 0) {
			this.mLife = 0;
		}
		if(this.get_life() < 25) {
			this.mLifeLabel.set_text("<font color=\"" + "#ffffff" + "\">" + this.get_life() + "%</font>");
		} else {
			this.mLifeLabel.set_text(this.get_life() + "%");
		}
		this.mLifeLabel.set_fontSize(18);
	}
	,reinforce: function(value) {
		var lFlag = true;
		if(this.mLife >= this.mMaxLife) {
			this.mLife = this.mMaxLife;
			lFlag = false;
		} else {
			this.mLife += value;
			if(this.mLife >= this.mMaxLife) {
				this.mLife = this.mMaxLife;
			}
		}
		if(this.get_life() < 25) {
			this.mLifeLabel.set_text("<font color=\"" + "#ffffff" + "\">" + this.get_life() + "%</font>");
		} else {
			this.mLifeLabel.set_text(this.get_life() + "%");
		}
		this.mLifeLabel.set_fontSize(18);
		return lFlag;
	}
	,startWave: function() {
		this.mLastUsedGun = null;
		this.mRoundMoney = 0;
		this.mRoundKills = 0;
		this.mRoundScore = 0;
		this.mRoundLifeLost = 0;
		this.mDead = false;
		this.mCurGun = null;
		while(this.mMainGraphics.get_numChildren() > 0) this.mMainGraphics.removeChildAt(0);
		var lGunSelected = false;
		if(this.mGunSlot1 != null) {
			this.mGunSlot1.restock();
			if(!lGunSelected) {
				this.swapToGun1();
				lGunSelected = true;
			}
		}
		if(this.mGunSlot2 != null) {
			this.mGunSlot2.restock();
			if(!lGunSelected) {
				this.swapToGun2();
				lGunSelected = true;
			}
		}
		if(!lGunSelected) {
			if(this.mInventory.length > 0) {
				var _g = 0;
				var _g1 = this.mInventory;
				while(_g < _g1.length) {
					var lGun = _g1[_g];
					++_g;
					if(lGun != null) {
						if(lGun.type == 1 || lGun.type == 1) {
							this.equipSlot1(lGun);
							this.mGunSlot1.restock();
							this.swapToGun1();
							lGunSelected = true;
						}
					}
				}
			}
		}
		while(this.mWeaponHud.get_numChildren() > 0) this.mWeaponHud.removeChildAt(0);
		if(this.mGunSlot1 != null) {
			this.mSlot1HudImg = this.mGunSlot1.get_hudGraphics();
			this.mSlot1HudImg.set_scaleX(this.mSlot1HudImg.set_scaleY(0.5));
		} else {
			this.mSlot1HudImg = old_MainOld.getInstance().builder.createAnimation("UIWeaponNoPrimary");
			this.mSlot1HudImg.set_scaleX(this.mSlot1HudImg.set_scaleY(1));
		}
		this.mSlot1HudImg.set_x(0);
		this.mWeaponHud.addChild(this.mSlot1HudImg);
		if(this.mGunSlot2 != null) {
			this.mSlot2HudImg = this.mGunSlot2.get_hudGraphics();
			this.mSlot2HudImg.set_scaleX(this.mSlot2HudImg.set_scaleY(0.5));
		} else {
			this.mSlot2HudImg = old_MainOld.getInstance().builder.createAnimation("UIWeaponNoPrimary");
			this.mSlot2HudImg.set_scaleX(this.mSlot2HudImg.set_scaleY(1));
		}
		this.mSlot2HudImg.set_x(60);
		this.mWeaponHud.addChild(this.mSlot2HudImg);
		if(this.mCurGun == this.mGunSlot1) {
			this.mSlot1HudImg.gotoFrame(5);
		} else {
			this.mSlot1HudImg.gotoFrame(1);
		}
		if(this.mCurGun == this.mGunSlot2) {
			this.mSlot2HudImg.gotoFrame(5);
		} else {
			this.mSlot2HudImg.gotoFrame(1);
		}
		while(old_singleton_GameWorld.get_instance().get_crosshairContainer0().get_numChildren() > 0) old_singleton_GameWorld.get_instance().get_crosshairContainer0().removeChildAt(0);
		var lCrosshair0 = old_MainOld.getInstance().builder.createAnimation("CrosshairImg");
		lCrosshair0.gotoFrame(1);
		lCrosshair0.stop();
		old_singleton_GameWorld.get_instance().get_crosshairContainer0().addChild(lCrosshair0);
		while(old_singleton_GameWorld.get_instance().get_crosshairContainer1().get_numChildren() > 0) old_singleton_GameWorld.get_instance().get_crosshairContainer1().removeChildAt(0);
		var lCrosshair1 = old_MainOld.getInstance().builder.createAnimation("CrosshairImg");
		lCrosshair1.gotoFrame(2);
		lCrosshair1.stop();
		lCrosshair1.set_alpha(0.35);
		old_singleton_GameWorld.get_instance().get_crosshairContainer1().addChild(lCrosshair1);
		this.mSurvivorRepairingValue = (100 - this.mSurvivors.getTotalRepairSkill(2) * 2) * 0.01;
	}
	,reset: function() {
		this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
		this.mInventory = [];
		this.mGunSlot1 = null;
		this.mGunSlot2 = null;
		this.mCurGun = null;
		this.mMoney = 30;
		this.mRoundMoney = 0;
		this.mKills = 0;
		this.mRoundKills = 0;
		this.mScore = 0;
		this.mRoundScore = 0;
		this.mMaxLife = 10000;
		this.mLife = this.mMaxLife;
		this.mDead = false;
		this.mLevelNumber = 0;
		this.mLastLevelNumber = -1;
		this.mLastStartedLevelNumber = -1;
		this.mMoneyLabel.set_text(Std.string(this.mMoney));
		if(this.get_life() < 25) {
			this.mLifeLabel.set_text("<font color=\"" + "#ffffff" + "\">" + this.get_life() + "%</font>");
		} else {
			this.mLifeLabel.set_text(this.get_life() + "%");
		}
		this.mLifeLabel.set_fontSize(18);
		var mStartingGun;
		if(this.mDifficulty == 0) {
			mStartingGun = new old_entities_equipment_Gun();
			old_entities_equipment_ItemDescription.GetMeAn(8,mStartingGun);
			this.addToInventory(mStartingGun);
			this.equipSlot1(mStartingGun);
		} else if(this.mDifficulty == 1) {
			mStartingGun = new old_entities_equipment_Gun();
			old_entities_equipment_ItemDescription.GetMeAn(8,mStartingGun);
			this.addToInventory(mStartingGun);
			this.equipSlot1(mStartingGun);
		}
		this.swapToGun1();
		this.mSurvivors.reset();
		this.mMap.reset();
		this.save();
	}
	,load: function() {
		this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
		this.mInventory = [];
		var lTempType = 0;
		var lTempGun = null;
		var arrayOfItems;
		try {
			arrayOfItems = js_Boot.__cast(old_singleton_LocalStorage.get_instance().get_inventory() , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			arrayOfItems = null;
		}
		var lLength = arrayOfItems.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lTempType = arrayOfItems[i];
			haxe_Log.trace("LOAD lTempType " + lTempType,{ fileName : "src/old/entities/Player.hx", lineNumber : 948, className : "old.entities.Player", methodName : "load"});
			switch(lTempType) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
				lTempGun = new old_entities_equipment_Gun();
				old_entities_equipment_ItemDescription.GetMeAn(lTempType,lTempGun);
				this.addToInventory(lTempGun);
				break;
			}
		}
		lTempGun = null;
		var lTempIndex = -1;
		lTempIndex = old_singleton_LocalStorage.get_instance().get_slot1() | 0;
		if(lTempIndex >= 0) {
			var tmp;
			try {
				tmp = js_Boot.__cast(this.mInventory[lTempIndex] , old_entities_equipment_Gun);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				tmp = null;
			}
			this.equipSlot1(tmp);
		}
		lTempIndex = old_singleton_LocalStorage.get_instance().get_slot2() | 0;
		if(lTempIndex >= 0) {
			var tmp1;
			try {
				tmp1 = js_Boot.__cast(this.mInventory[lTempIndex] , old_entities_equipment_Gun);
			} catch( e4 ) {
				haxe_CallStack.lastException = e4;
				var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
				tmp1 = null;
			}
			this.equipSlot2(tmp1);
		}
		this.mCurGun = null;
		this.mMoney = old_singleton_LocalStorage.get_instance().get_money() | 0;
		this.mRoundMoney = 0;
		this.mKills = old_singleton_LocalStorage.get_instance().get_kills() | 0;
		this.mRoundKills = 0;
		this.mScore = old_singleton_LocalStorage.get_instance().get_score() | 0;
		this.mRoundScore = 0;
		this.mMaxLife = 10000;
		this.mLife = old_singleton_LocalStorage.get_instance().get_life() | 0;
		this.mLevelNumber = old_singleton_LocalStorage.get_instance().get_levelNumber();
		this.set_difficulty(old_singleton_LocalStorage.get_instance().get_difficulty());
		this.mSurvivors.load();
		this.mMap.load();
		this.mMoneyLabel.set_text(Std.string(this.mMoney));
		if(this.get_life() < 25) {
			this.mLifeLabel.set_text("<font color=\"" + "#ffffff" + "\">" + this.get_life() + "%</font>");
		} else {
			this.mLifeLabel.set_text(this.get_life() + "%");
		}
		this.mLifeLabel.set_fontSize(18);
	}
	,save: function() {
		old_singleton_LocalStorage.get_instance().set_life(this.mLife);
		old_singleton_LocalStorage.get_instance().set_money(this.mMoney | 0);
		old_singleton_LocalStorage.get_instance().set_score(this.mScore);
		old_singleton_LocalStorage.get_instance().set_kills(this.mKills);
		old_singleton_LocalStorage.get_instance().set_levelNumber(this.mLevelNumber);
		old_singleton_LocalStorage.get_instance().set_difficulty(this.mDifficulty);
		var arrayOfItems = [];
		var lLength = this.mInventory.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			var tmp;
			try {
				tmp = js_Boot.__cast(this.mInventory[i] , old_entities_equipment_InventoryItem);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				tmp = null;
			}
			arrayOfItems.push(tmp.get_model());
		}
		old_singleton_LocalStorage.get_instance().set_inventory(arrayOfItems);
		if(this.mGunSlot1 != null) {
			old_singleton_LocalStorage.get_instance().set_slot1(Lambda.indexOf(this.mInventory,this.mGunSlot1));
		} else {
			old_singleton_LocalStorage.get_instance().set_slot1(-1);
		}
		if(this.mGunSlot2 != null) {
			old_singleton_LocalStorage.get_instance().set_slot2(Lambda.indexOf(this.mInventory,this.mGunSlot2));
		} else {
			old_singleton_LocalStorage.get_instance().set_slot2(-1);
		}
		this.mSurvivors.save();
		this.mMap.save();
		old_singleton_LocalStorage.get_instance().flush();
	}
	,shotFired: function() {
		haxe_Log.trace("shotFired",{ fileName : "src/old/entities/Player.hx", lineNumber : 1043, className : "old.entities.Player", methodName : "shotFired"});
		this.mRecoilValue += this.mCurGun.get_recoil();
		this.mBulletSystem.shotFired(this.mCurGun);
		this.mPlayerControls.shotFired();
	}
	,onEnemyShotFired: function(e) {
		if(this.mDead) {
			return;
		}
		this.doDamage(e.enemy.get_damage());
		if(this.mLife <= 0) {
			this.mDead = true;
			old_events_EventManager.get_instance().dispatchEvent(new old_events_LevelEvent("LevelPlayerFailed"));
		}
	}
	,checkIfHasAllWeapons: function() {
		var lWeaponFlags = [0,1,2,4,3];
		var lTotalItems = lWeaponFlags.length;
		var lLength = this.mInventory.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g11 = lTotalItems;
			while(_g2 < _g11) {
				var j = _g2++;
				var tmp;
				try {
					tmp = js_Boot.__cast(this.mInventory[i] , old_entities_equipment_InventoryItem);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					tmp = null;
				}
				if(tmp.get_model() == lWeaponFlags[j]) {
					lWeaponFlags[j] = -1;
				}
			}
		}
		var _g21 = 0;
		var _g3 = lTotalItems;
		while(_g21 < _g3) {
			var j1 = _g21++;
			if(lWeaponFlags[j1] >= 0) {
				return false;
			}
		}
		return true;
	}
	,__class__: old_entities_Player
	,__properties__: {get_map:"get_map",get_survivors:"get_survivors",get_damageModifier:"get_damageModifier",set_difficulty:"set_difficulty",get_difficulty:"get_difficulty",set_aimY:"set_aimY",get_aimY:"get_aimY",set_aimX:"set_aimX",get_aimX:"get_aimX",set_recoil:"set_recoil",get_recoil:"get_recoil",get_roundKills:"get_roundKills",get_kills:"get_kills",get_roundScore:"get_roundScore",get_score:"get_score",get_lifeLabel:"get_lifeLabel",get_roundLifeLost:"get_roundLifeLost",get_damage:"get_damage",set_life:"set_life",get_life:"get_life",get_maxLife:"get_maxLife",get_roundMoney:"get_roundMoney",get_moneyLabel:"get_moneyLabel",get_money:"get_money",get_curGun:"get_curGun",get_slot2:"get_slot2",get_slot1:"get_slot1",get_inventory:"get_inventory",get_timeOfDay:"get_timeOfDay",get_prevTimeOfDay:"get_prevTimeOfDay",set_firstLevelSinceGameLaunch:"set_firstLevelSinceGameLaunch",get_firstLevelSinceGameLaunch:"get_firstLevelSinceGameLaunch",set_lastStartedLevelNumber:"set_lastStartedLevelNumber",get_lastStartedLevelNumber:"get_lastStartedLevelNumber",set_lastLevelNumber:"set_lastLevelNumber",get_lastLevelNumber:"get_lastLevelNumber",set_levelNumber:"set_levelNumber",get_levelNumber:"get_levelNumber",get_weaponHud:"get_weaponHud",get_mainGraphics:"get_mainGraphics",set_friendliesSystem:"set_friendliesSystem",get_friendliesSystem:"get_friendliesSystem",set_playeControlSystem:"set_playeControlSystem",get_playeControlSystem:"get_playeControlSystem",set_bulletSystem:"set_bulletSystem",get_bulletSystem:"get_bulletSystem",set_tutorialShown:"set_tutorialShown",get_tutorialShown:"get_tutorialShown"}
};
var old_entities_effects_Effect = function() {
	this.mEnabled = false;
	this.mMainGraphics = null;
};
$hxClasses["old.entities.effects.Effect"] = old_entities_effects_Effect;
old_entities_effects_Effect.__name__ = "old.entities.effects.Effect";
old_entities_effects_Effect.prototype = {
	mMainGraphics: null
	,mEnabled: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_enabled: function() {
		return this.mEnabled;
	}
	,reset: function(frame,x,y,direction,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		this.mEnabled = true;
		this.mMainGraphics = old_MainOld.getInstance().builder.createAnimation("ImpactAnim" + frame);
		this.mMainGraphics.start(1,1);
		this.mMainGraphics.play();
		this.mMainGraphics.set_x(x);
		this.mMainGraphics.set_y(y);
		this.mMainGraphics.set_rotation(direction * Math.PI / 180);
		this.mMainGraphics.set_alpha(alpha);
		var lSizeRatio = y / 480;
		if(frame == 5) {
			this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(lSizeRatio));
		} else {
			this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(lSizeRatio / 3));
		}
		if(lSizeRatio < 1) {
			this.mMainGraphics.set_alpha(lSizeRatio);
		} else {
			this.mMainGraphics.set_alpha(1);
		}
	}
	,update: function(dt) {
		if(this.mMainGraphics.get_currentFrame() >= this.mMainGraphics.get_totalFrames()) {
			this.mEnabled = false;
		}
	}
	,pause: function() {
	}
	,resume: function() {
	}
	,destroy: function() {
	}
	,__class__: old_entities_effects_Effect
	,__properties__: {get_enabled:"get_enabled",get_mainGraphics:"get_mainGraphics"}
};
var old_entities_enemies_Enemy = function(_mainGraphics,x,y,distanceToMove,speedX,speedY,depth,damage) {
	this.mAnimating = false;
	this.mDamage = 10;
	this.mSpeedX = 0;
	this.mSpeedY = 1;
	this.mDistanceToMove = 0;
	this.mDepth = 0;
	this.mY = 0;
	this.mX = 0;
	this.mGlobalState = 0;
	this.mMainGraphics = null;
	this.mMainGraphics = new old_entities_enemies_EnemyGraphics();
	this.mMainGraphics.set_frameContent(old_MainOld.getInstance().builder.createAnimation(_mainGraphics));
	this.mX = x;
	this.mY = y;
	this.mDistanceToMove = distanceToMove;
	this.mSpeedX = speedX;
	this.mSpeedY = speedY;
	this.mDepth = depth;
	this.mDamage = damage;
	this.mAnimationTimer = new openfl_utils_Timer(1,1);
	this.mAnimationTimer.addEventListener("timerComplete",$bind(this,this.onAnimationTimer));
	this.get_mainGraphics().set_x(this.mX);
	this.get_mainGraphics().set_y(this.mY);
	this.mGlobalState = 0;
};
$hxClasses["old.entities.enemies.Enemy"] = old_entities_enemies_Enemy;
old_entities_enemies_Enemy.__name__ = "old.entities.enemies.Enemy";
old_entities_enemies_Enemy.prototype = {
	mMainGraphics: null
	,mGlobalState: null
	,mX: null
	,mY: null
	,mDepth: null
	,mDistanceToMove: null
	,mSpeedY: null
	,mSpeedX: null
	,mDamage: null
	,mAnimating: null
	,mAnimationTimer: null
	,get_mainGraphics: function() {
		return this.mMainGraphics.container;
	}
	,get_globalState: function() {
		return this.mGlobalState;
	}
	,set_globalState: function(value) {
		this.mGlobalState = value;
		return value;
	}
	,get_depth: function() {
		return this.mDepth | 0;
	}
	,get_damage: function() {
		return this.mDamage;
	}
	,get_moving: function() {
		return false;
	}
	,get_x: function() {
		return this.mX;
	}
	,get_y: function() {
		return this.mY;
	}
	,get_alive: function() {
		if(this.mGlobalState == 0) {
			return true;
		} else {
			return false;
		}
	}
	,update: function(dt) {
	}
	,takeDamage: function(stageCoords,bulletX,bulletY,caliber,velocity,gun) {
		return true;
	}
	,takeDamageFromExplosion: function(damage,gun) {
		return true;
	}
	,instaKill: function(damageModifier) {
	}
	,onAnimationTimer: function(e) {
	}
	,pause: function() {
		this.mAnimationTimer.stop();
	}
	,resume: function() {
		if(this.mAnimating) {
			this.mAnimationTimer.start();
		}
	}
	,destroy: function() {
		this.mAnimationTimer.stop();
		this.mAnimationTimer.removeEventListener("timerComplete",$bind(this,this.onAnimationTimer));
	}
	,__class__: old_entities_enemies_Enemy
	,__properties__: {get_alive:"get_alive",get_y:"get_y",get_x:"get_x",get_moving:"get_moving",get_damage:"get_damage",get_depth:"get_depth",set_globalState:"set_globalState",get_globalState:"get_globalState",get_mainGraphics:"get_mainGraphics"}
};
var old_entities_enemies_Enemy1 = function(_mainGraphics,skin,timeOfDay,life,x,y,distanceToMove,speedX,speedY,depth,damage) {
	this.mLastHitZone = 0;
	this.mSlowdown = 0;
	this.mScale = 0;
	this.mScaleCoefficient = 0;
	this.mScaleToGo = 0.7;
	this.mDistanceToGo = 100;
	this.mEndingY = 100;
	this.mStartingY = 0;
	this.mStartingScale = 0.3;
	this.mLife = 300;
	this.mSkin = 0;
	this.mState = 0;
	old_entities_enemies_Enemy.call(this,_mainGraphics,x,y,distanceToMove,speedX,speedY,depth,damage);
	this.mSkin = skin;
	this.mLife = life;
	this.mStartingY = y;
	this.mEndingY = 770;
	this.mDistanceToGo = this.mEndingY - this.mStartingY;
	this.mStartingScale = 0.3;
	this.mScaleToGo = 1 - this.mStartingScale;
	this.mScaleCoefficient = this.mScaleToGo / this.mDistanceToGo;
	this.get_mainGraphics().set_alpha(0);
	this.mScale = (this.mY - this.mStartingY) * this.mScaleCoefficient + this.mStartingScale;
	this.get_mainGraphics().set_scaleX(this.get_mainGraphics().set_scaleY(this.mScale));
};
$hxClasses["old.entities.enemies.Enemy1"] = old_entities_enemies_Enemy1;
old_entities_enemies_Enemy1.__name__ = "old.entities.enemies.Enemy1";
old_entities_enemies_Enemy1.__super__ = old_entities_enemies_Enemy;
old_entities_enemies_Enemy1.prototype = $extend(old_entities_enemies_Enemy.prototype,{
	mState: null
	,mSkin: null
	,mLife: null
	,mStartingScale: null
	,mStartingY: null
	,mEndingY: null
	,mDistanceToGo: null
	,mScaleToGo: null
	,mScaleCoefficient: null
	,mScale: null
	,mSlowdown: null
	,mLastHitZone: null
	,ready: function() {
		old_singleton_GameWorld.get_instance().addObject(this.get_mainGraphics());
		this.mState = 1;
		var lRandomFrame = old_helper_UsefulStuff.rnd(1,25);
		this.mMainGraphics.get_frameContent().gotoFrame(lRandomFrame);
		this.mMainGraphics.get_frameContent().play();
	}
	,update: function(dt) {
		old_entities_enemies_Enemy.prototype.update.call(this,dt);
		var lSpeedX = 0;
		var lSpeedY = 0;
		switch(this.mState) {
		case 0:
			this.mDistanceToMove -= dt;
			if(this.mDistanceToMove <= 0) {
				this.ready();
			}
			break;
		case 1:
			this.mY -= dt;
			this.get_mainGraphics().set_y(this.mY);
			var _g = this.get_mainGraphics();
			_g.set_alpha(_g.get_alpha() + dt);
			if(this.get_mainGraphics().get_alpha() >= 1) {
				this.get_mainGraphics().set_alpha(1);
				this.mState = 2;
			}
			break;
		case 2:
			if(this.get_mainGraphics().get_alpha() < 1) {
				haxe_Log.trace("ALERT",{ fileName : "src/old/entities/enemies/Enemy1.hx", lineNumber : 131, className : "old.entities.enemies.Enemy1", methodName : "update"});
			}
			this.mScale = (this.mY - this.mStartingY) * this.mScaleCoefficient + this.mStartingScale;
			this.get_mainGraphics().set_scaleX(this.get_mainGraphics().set_scaleY(this.mScale));
			lSpeedX = this.mSpeedX * (1 + this.mScale);
			lSpeedY = this.mSpeedY * (1 + this.mScale);
			this.mX += dt * lSpeedX;
			this.mY += dt * lSpeedY;
			this.get_mainGraphics().set_x(this.mX);
			this.get_mainGraphics().set_y(this.mY);
			if(this.mY > 800) {
				this.makeDamage();
			}
			break;
		case 3:
			this.mScale = (this.mY - this.mStartingY) * this.mScaleCoefficient + this.mStartingScale;
			this.get_mainGraphics().set_scaleX(this.get_mainGraphics().set_scaleY(this.mScale));
			lSpeedX = this.mSpeedX * (1 + this.mScale) * (1 - this.mSlowdown);
			lSpeedY = this.mSpeedY * (1 + this.mScale) * (1 - this.mSlowdown);
			this.mSlowdown -= dt;
			this.mX += dt * lSpeedX;
			this.mY += dt * lSpeedY;
			this.get_mainGraphics().set_x(this.mX);
			this.get_mainGraphics().set_y(this.mY);
			break;
		case 50:
			var _g1 = this.get_mainGraphics();
			_g1.set_alpha(_g1.get_alpha() - dt);
			if(this.get_mainGraphics().get_alpha() <= 0) {
				this.mState = 60;
				this.mGlobalState = 3;
			}
			break;
		}
	}
	,onAnimationTimer: function(e) {
		this.mAnimating = false;
		switch(this.mState) {
		case 3:
			this.mState = 2;
			break;
		case 5:
			this.mState = 6;
			if(old_singleton_LocalStorage.get_instance().get_decals()) {
				old_singleton_GameWorld.get_instance().blitMovieClipToBackground(this.mMainGraphics.container,this.mMainGraphics.container.get_x(),this.mMainGraphics.container.get_y());
				this.mState = 60;
				this.mGlobalState = 3;
			} else {
				this.mState = 50;
				this.mGlobalState = 2;
			}
			break;
		}
	}
	,makeDamage: function() {
		old_events_EventManager.get_instance().dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_FIRING,this));
		this.mState = 60;
		this.mGlobalState = 3;
	}
	,takeDamage: function(stageCoords,bulletX,bulletY,caliber,velocity,gun) {
		var fr = this.mMainGraphics.get_frameContent().get_currentFrame();
		var nm = (fr > 9 ? "" : "0") + fr;
		this.mMainGraphics.hitRegionMask = openfl_utils_Assets.getBitmapData("bitmaps/Enemies_Enemy" + this.mSkin + "_Hit00" + nm + ".png");
		var lColor = old_helper_UsefulStuff.getPixelValue(this.mMainGraphics,stageCoords);
		if(lColor == 0) {
			haxe_Log.trace("MISSED!!!",{ fileName : "src/old/entities/enemies/Enemy1.hx", lineNumber : 221, className : "old.entities.enemies.Enemy1", methodName : "takeDamage"});
			return true;
		}
		haxe_Log.trace("SHOT!!!",{ fileName : "src/old/entities/enemies/Enemy1.hx", lineNumber : 224, className : "old.entities.enemies.Enemy1", methodName : "takeDamage"});
		var lDamage = 0;
		var lHeadshotDamage = 0;
		if(caliber == 1270) {
			lDamage = old_helper_UsefulStuff.rnd(250,400);
			lHeadshotDamage = old_helper_UsefulStuff.rnd(700,1000);
		} else if(caliber == 1145) {
			lDamage = old_helper_UsefulStuff.rnd(200,300);
			lHeadshotDamage = old_helper_UsefulStuff.rnd(500,800);
		}
		if(caliber == 762) {
			lDamage = old_helper_UsefulStuff.rnd(150,250);
			lHeadshotDamage = old_helper_UsefulStuff.rnd(500,1000);
		} else if(caliber == 545 || caliber == 556) {
			lDamage = old_helper_UsefulStuff.rnd(75,150);
			lHeadshotDamage = old_helper_UsefulStuff.rnd(400,700);
		} else if(caliber == 900) {
			lDamage = old_helper_UsefulStuff.rnd(25,75);
			lHeadshotDamage = old_helper_UsefulStuff.rnd(250,350);
		}
		var mBloodDecal = old_MainOld.getInstance().builder.createAnimation("BloodDecal");
		mBloodDecal.gotoFrame(old_helper_UsefulStuff.rnd(1,10));
		mBloodDecal.stop();
		if(lColor == 16711680) {
			this.mLastHitZone = 0;
			this.mLife -= lHeadshotDamage;
		} else if(lColor == 16777215) {
			this.mLastHitZone = 1;
			this.mLife -= lDamage;
		} else if(lColor == 65280) {
			this.mLastHitZone = 2;
			this.mLife -= lDamage;
		} else {
			this.mLastHitZone = 3;
			this.mLife -= lDamage;
		}
		old_events_EventManager.get_instance().dispatchEvent(new old_events_EffectEvent("EffectEffect",bulletX,bulletY,old_helper_UsefulStuff.rnd(180,360),1,2,this.get_mainGraphics().get_y()));
		mBloodDecal.set_scaleX(mBloodDecal.set_scaleY(this.mScale));
		mBloodDecal.set_alpha(this.mScale + 0.5);
		if(old_singleton_LocalStorage.get_instance().get_decals()) {
			old_singleton_GameWorld.get_instance().blitMovieClipToBackground(mBloodDecal,bulletX - mBloodDecal.get_width() * 0.25,bulletY - mBloodDecal.get_height() * 0.25);
		}
		old_events_EventManager.get_instance().dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_SOLDIER_HIT,this,gun,this.mLastHitZone));
		if(this.mLife <= 0) {
			old_events_EventManager.get_instance().dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_SOLDIER_KILLED,this,gun,this.mLastHitZone));
			this.die();
		} else if(this.mState == 2) {
			this.hit();
		}
		return false;
	}
	,takeDamageFromExplosion: function(damage,gun) {
		if(this.mState == 0) {
			return false;
		}
		var mBloodDecal = old_MainOld.getInstance().builder.createAnimation("BloodDecal");
		mBloodDecal.gotoFrame(old_helper_UsefulStuff.rnd(1,10));
		mBloodDecal.stop();
		this.mLastHitZone = -1;
		this.mLife -= damage | 0;
		old_events_EventManager.get_instance().dispatchEvent(new old_events_EffectEvent("EffectEffect",this.get_mainGraphics().get_x(),this.get_mainGraphics().get_y(),old_helper_UsefulStuff.rnd(180,360),1,2,this.get_mainGraphics().get_y()));
		mBloodDecal.set_scaleX(mBloodDecal.set_scaleY(this.mScale));
		if(old_singleton_LocalStorage.get_instance().get_decals()) {
			old_singleton_GameWorld.get_instance().blitMovieClipToBackground(mBloodDecal,this.mMainGraphics.container.get_x() - mBloodDecal.get_width() / 2,this.mMainGraphics.container.get_y());
		}
		if(this.mLife <= 0) {
			old_events_EventManager.get_instance().dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_SOLDIER_KILLED,this,gun,this.mLastHitZone));
			this.die();
			return true;
		}
		return false;
	}
	,instaKill: function(damageModifier) {
		var mBloodDecal = old_MainOld.getInstance().builder.createAnimation("BloodDecal");
		mBloodDecal.gotoFrame(old_helper_UsefulStuff.rnd(1,10));
		mBloodDecal.stop();
		this.mLastHitZone = 0;
		this.mLife -= old_helper_UsefulStuff.rnd(75,125) * damageModifier | 0;
		var lHeight = old_helper_UsefulStuff.rnd(0,this.get_mainGraphics().get_height() * 0.6);
		old_events_EventManager.get_instance().dispatchEvent(new old_events_EffectEvent("EffectEffect",this.get_mainGraphics().get_x(),this.get_mainGraphics().get_y() - lHeight,old_helper_UsefulStuff.rnd(180,360),1,2,this.get_mainGraphics().get_y()));
		old_singleton_SoundPlayer.get_instance().impact(0);
		mBloodDecal.set_scaleX(mBloodDecal.set_scaleY(this.mScale));
		if(old_singleton_LocalStorage.get_instance().get_decals()) {
			old_singleton_GameWorld.get_instance().blitMovieClipToBackground(mBloodDecal,this.mMainGraphics.container.get_x() - mBloodDecal.get_width() / 2,this.mMainGraphics.container.get_y() - lHeight);
		}
		if(this.mLife <= 0) {
			this.die();
			old_events_EventManager.get_instance().dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_SOLDIER_KILLED,this,null,this.mLastHitZone,false,true));
		}
	}
	,hit: function() {
		this.mSlowdown = 0.8;
		this.mState = 3;
		this.mAnimationTimer.reset();
		this.mMainGraphics.get_frameContent().gotoFrame(1);
		this.mMainGraphics.get_frameContent().play();
		this.mAnimationTimer.set_delay(1000);
		this.mAnimationTimer.start();
		this.mAnimating = true;
	}
	,die: function() {
		var frame = 1;
		switch(this.mState) {
		case 2:case 3:
			frame = old_helper_UsefulStuff.rnd(1,2);
			var nm = "Enemies_Enemy" + this.mSkin + "_Dead" + frame;
			this.mMainGraphics.set_dead(old_MainOld.getInstance().builder.createAnimation(nm));
			this.mMainGraphics.get_dead().start(1,1);
			this.mMainGraphics.get_dead().gotoFrame(1);
			this.mMainGraphics.get_dead().play();
			break;
		default:
			haxe_Log.trace("NOT MOVING: " + this.mState,{ fileName : "src/old/entities/enemies/Enemy1.hx", lineNumber : 389, className : "old.entities.enemies.Enemy1", methodName : "die"});
			return;
		}
		old_singleton_SoundPlayer.get_instance().enemyDeath(-1);
		this.mState = 5;
		this.mGlobalState = 1;
		this.mAnimationTimer.reset();
		this.mAnimationTimer.start();
		this.mAnimating = true;
	}
	,__class__: old_entities_enemies_Enemy1
});
var old_entities_enemies_EnemyGraphics = function() {
	this._dead = null;
	this._frameContent = null;
	this.hitRegionMask = null;
	this.container = null;
	this.container = old_MainOld.getInstance().builder.createSprite();
};
$hxClasses["old.entities.enemies.EnemyGraphics"] = old_entities_enemies_EnemyGraphics;
old_entities_enemies_EnemyGraphics.__name__ = "old.entities.enemies.EnemyGraphics";
old_entities_enemies_EnemyGraphics.prototype = {
	container: null
	,hitRegionMask: null
	,_frameContent: null
	,_dead: null
	,get_frameContent: function() {
		return this._frameContent;
	}
	,set_frameContent: function(value) {
		if(this._frameContent != null) {
			this.container.removeChild(this._frameContent);
			this._frameContent.dispose();
		}
		this._frameContent = value;
		this.container.addChild(this._frameContent);
		return this._frameContent;
	}
	,get_dead: function() {
		return this._dead;
	}
	,set_dead: function(value) {
		if(this._dead != null) {
			this.container.removeChild(this._dead);
			this._dead.dispose();
		}
		this._dead = value;
		this.container.addChild(this._dead);
		this.get_frameContent().set_visible(false);
		return this._dead;
	}
	,__class__: old_entities_enemies_EnemyGraphics
	,__properties__: {set_dead:"set_dead",get_dead:"get_dead",set_frameContent:"set_frameContent",get_frameContent:"get_frameContent"}
};
var old_entities_equipment_InventoryItem = function() {
	this.mEquipped = false;
	this.mWeight = 0;
	this.mPrice = 0;
	this.mModel = 0;
	this.mType = 0;
	this.mDescriptionStatValue = null;
	this.mDescriptionStatName = null;
	this.mDescriptionTitle = null;
	this.mDescription = null;
	this.mHudGraphics = null;
	this.mInventoryGraphics = null;
};
$hxClasses["old.entities.equipment.InventoryItem"] = old_entities_equipment_InventoryItem;
old_entities_equipment_InventoryItem.__name__ = "old.entities.equipment.InventoryItem";
old_entities_equipment_InventoryItem.prototype = {
	mInventoryGraphics: null
	,mHudGraphics: null
	,mDescription: null
	,mDescriptionTitle: null
	,mDescriptionStatName: null
	,mDescriptionStatValue: null
	,mType: null
	,mModel: null
	,mPrice: null
	,mWeight: null
	,mEquipped: null
	,get_inventoryGraphics: function() {
		return this.mInventoryGraphics;
	}
	,set_inventoryGraphics: function(value) {
		this.mInventoryGraphics = value;
		return value;
	}
	,get_hudGraphics: function() {
		return this.mHudGraphics;
	}
	,set_hudGraphics: function(value) {
		this.mHudGraphics = value;
		return value;
	}
	,get_description: function() {
		return this.mDescription;
	}
	,get_descriptionTitle: function() {
		return this.mDescriptionTitle;
	}
	,get_descriptionStatName: function() {
		return this.mDescriptionStatName;
	}
	,get_descriptionStatValue: function() {
		return this.mDescriptionStatValue;
	}
	,get_type: function() {
		return this.mType;
	}
	,set_type: function(value) {
		this.mType = value;
		return value;
	}
	,get_model: function() {
		return this.mModel;
	}
	,set_model: function(value) {
		this.mModel = value;
		return value;
	}
	,get_price: function() {
		return this.mPrice;
	}
	,set_price: function(value) {
		this.mPrice = value;
		return value;
	}
	,get_weight: function() {
		return this.mWeight;
	}
	,set_weight: function(value) {
		this.mWeight = value;
		return value;
	}
	,get_equipped: function() {
		return this.mEquipped;
	}
	,set_equipped: function(value) {
		this.mEquipped = value;
		return value;
	}
	,__class__: old_entities_equipment_InventoryItem
	,__properties__: {set_equipped:"set_equipped",get_equipped:"get_equipped",set_weight:"set_weight",get_weight:"get_weight",set_price:"set_price",get_price:"get_price",set_model:"set_model",get_model:"get_model",set_type:"set_type",get_type:"get_type",get_descriptionStatValue:"get_descriptionStatValue",get_descriptionStatName:"get_descriptionStatName",get_descriptionTitle:"get_descriptionTitle",get_description:"get_description",set_hudGraphics:"set_hudGraphics",get_hudGraphics:"get_hudGraphics",set_inventoryGraphics:"set_inventoryGraphics",get_inventoryGraphics:"get_inventoryGraphics"}
};
var old_entities_equipment_Gun = function() {
	this._mainImg = "";
	this.mTakeOutPhase = -1;
	this.mAutoReloadCounter = 0;
	this.mStatTakeOutFrames = 5;
	this.mStatTakeOutTime = 1;
	this.mStatReloadTimeEmpty = 1;
	this.mStatReloadTimeChambered = 1;
	this.mStatMagazineCount = 1;
	this.mStatMagazineCapacity = 1;
	this.mStatAvailableFireModes = 1;
	this.mStatFireDelay = 1;
	this.mStatRateOfFire = 1;
	this.mStatRecoil = 5;
	this.mStatMuzzleVelocity = 1;
	this.mStatBulletCaliber = 762;
	this.mMainGraphics3 = null;
	this.mMainGraphics2 = null;
	this.mMainGraphics1 = null;
	this.mMainGraphics = null;
	this.mPlayer = null;
	old_entities_equipment_InventoryItem.call(this);
};
$hxClasses["old.entities.equipment.Gun"] = old_entities_equipment_Gun;
old_entities_equipment_Gun.__name__ = "old.entities.equipment.Gun";
old_entities_equipment_Gun.__super__ = old_entities_equipment_InventoryItem;
old_entities_equipment_Gun.prototype = $extend(old_entities_equipment_InventoryItem.prototype,{
	mPlayer: null
	,mMainGraphics: null
	,mMainGraphics1: null
	,mMainGraphics2: null
	,mMainGraphics3: null
	,mStatBulletCaliber: null
	,mStatMuzzleVelocity: null
	,mStatRecoil: null
	,mStatRateOfFire: null
	,mStatFireDelay: null
	,mStatAvailableFireModes: null
	,mStatMagazineCapacity: null
	,mStatMagazineCount: null
	,mStatReloadTimeChambered: null
	,mStatReloadTimeEmpty: null
	,mStatTakeOutTime: null
	,mStatTakeOutFrames: null
	,mTakenOut: null
	,mActiveFireMode: null
	,mReadyToShoot: null
	,mTriggerPulled: null
	,mRoundsLeft: null
	,mMagazinesLeft: null
	,mBurstCurLength: null
	,mReloadingPhase: null
	,mAutoReloadCounter: null
	,mReloadTimer: null
	,mShootTimer: null
	,mTakeOutTimer: null
	,mTakeOutPhase: null
	,mPutAway: null
	,get_mainImg: function() {
		return this._mainImg;
	}
	,_mainImg: null
	,get_player: function() {
		return this.mPlayer;
	}
	,set_player: function(value) {
		this.mPlayer = value;
		return value;
	}
	,get_recoil: function() {
		return this.mStatRecoil;
	}
	,get_velocity: function() {
		return this.mStatMuzzleVelocity;
	}
	,get_caliber: function() {
		return this.mStatBulletCaliber;
	}
	,get_takenOut: function() {
		return this.mTakenOut;
	}
	,get_readyToShoot: function() {
		return this.mReadyToShoot;
	}
	,get_fireMode: function() {
		return this.mActiveFireMode;
	}
	,get_roundsLeft: function() {
		return this.mRoundsLeft;
	}
	,get_magazinesLeft: function() {
		return this.mMagazinesLeft;
	}
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,set_mainGraphics: function(value) {
		this.mMainGraphics = value;
		return value;
	}
	,gotoFrame: function(fr) {
		switch(fr) {
		case 1:
			this.mMainGraphics1.start(1,1);
			this.mMainGraphics1.play();
			this.mMainGraphics1.set_visible(true);
			this.mMainGraphics2.set_visible(false);
			this.mMainGraphics3.set_visible(false);
			break;
		case 2:
			this.mMainGraphics2.start(1,1);
			this.mMainGraphics2.play();
			this.mMainGraphics2.set_visible(true);
			this.mMainGraphics1.set_visible(false);
			this.mMainGraphics3.set_visible(false);
			break;
		case 3:
			this.mMainGraphics3.start(1,1);
			this.mMainGraphics3.play();
			this.mMainGraphics3.set_visible(true);
			this.mMainGraphics2.set_visible(false);
			this.mMainGraphics1.set_visible(false);
			break;
		}
	}
	,initGraphics: function() {
		if(this.mMainGraphics1 != null) {
			this.mMainGraphics1.dispose();
			this.mMainGraphics2.dispose();
			this.mMainGraphics3.dispose();
		}
		this.mMainGraphics1 = old_MainOld.getInstance().builder.createAnimation(this._mainImg + 1);
		this.mMainGraphics2 = old_MainOld.getInstance().builder.createAnimation(this._mainImg + 2);
		this.mMainGraphics3 = old_MainOld.getInstance().builder.createAnimation(this._mainImg + 3);
		this.mMainGraphics.addChild(this.mMainGraphics1);
		this.mMainGraphics.addChild(this.mMainGraphics2);
		this.mMainGraphics.addChild(this.mMainGraphics3);
		this.mMainGraphics.set_x(old_entities_equipment_Gun.GUN_OFFSET_X);
		this.mMainGraphics.set_y(old_entities_equipment_Gun.GUN_OFFSET_Y);
		this.gotoFrame(1);
	}
	,defineWeapon: function(type,model,price,mainImg,inventoryImg,hudImg,weight,bulletCaliber,muzzleVelocity,rateOfFire,recoil,availableFireModes,magazineCapacity,magazineCount,reloadTimeChambered,reloadTimeEmpty,takeOutTime) {
		this.mType = type;
		this.mWeight = weight;
		this._mainImg = mainImg;
		this.mModel = model;
		this.mPrice = price;
		this.mStatBulletCaliber = bulletCaliber;
		this.mStatMuzzleVelocity = muzzleVelocity;
		this.mStatRateOfFire = rateOfFire;
		this.mStatRecoil = recoil;
		this.mStatAvailableFireModes = availableFireModes | 0;
		this.mStatMagazineCapacity = magazineCapacity;
		this.mStatMagazineCount = magazineCount;
		this.mStatReloadTimeChambered = reloadTimeChambered;
		this.mStatReloadTimeEmpty = reloadTimeEmpty;
		this.mStatTakeOutTime = takeOutTime;
		this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
		this.mInventoryGraphics = old_MainOld.getInstance().builder.createAnimation(inventoryImg);
		this.mHudGraphics = old_MainOld.getInstance().builder.createAnimation(hudImg);
		this.mHudGraphics.gotoFrame(5);
		this.mHudGraphics.stop();
		var lName = "";
		if(model == 0) {
			lName = "AK74";
		} else if(model == 1) {
			lName = "M4";
		} else if(model == 2) {
			lName = "SCARH";
		} else if(model == 3) {
			lName = "PKM";
		} else if(model == 4) {
			lName = "M9";
		} else if(model == 5) {
			lName = "Ingram";
		} else if(model == 6) {
			lName = "M79";
		} else if(model == 7) {
			lName = "MP5";
		} else if(model == 8) {
			lName = "Springfield";
		} else if(model == 9) {
			lName = "Remington";
		}
		var lDamage = "";
		if(bulletCaliber == 900) {
			lDamage = "Low";
		} else if(bulletCaliber == 556 || bulletCaliber == 545) {
			lDamage = "Medium";
		} else if(bulletCaliber == 762) {
			lDamage = "High";
		} else if(bulletCaliber == 1270) {
			lDamage = "Very high";
		} else if(bulletCaliber == 1145) {
			lDamage = "High";
		} else if(bulletCaliber == 4000) {
			lDamage = "Explosive";
		}
		var lRecoil = "";
		if(model == 0) {
			lRecoil = "Moderate";
		} else if(model == 1) {
			lRecoil = "Low";
		} else if(model == 2) {
			lRecoil = "High";
		} else if(model == 3) {
			lRecoil = "Very high";
		} else if(model == 4) {
			lRecoil = "Moderate";
		} else if(model == 5) {
			lRecoil = "High";
		} else if(model == 6) {
			lRecoil = "Low";
		} else if(model == 7) {
			lRecoil = "Low";
		} else if(model == 8) {
			lRecoil = "Moderate";
		} else if(model == 9) {
			lRecoil = "Moderate";
		}
		var lFireModes = "";
		if(model == 0) {
			lFireModes = "Full auto / Semi";
		} else if(model == 1) {
			lFireModes = "3 round burst / Semi";
		} else if(model == 2) {
			lFireModes = "Full auto / Semi";
		} else if(model == 3) {
			lFireModes = "Full auto";
		} else if(model == 4) {
			lFireModes = "Semi";
		} else if(model == 5) {
			lFireModes = "Full auto";
		} else if(model == 6) {
			lFireModes = "Single round";
		} else if(model == 7) {
			lFireModes = "Full auto / Semi";
		} else if(model == 8) {
			lFireModes = "Bolt action";
		} else if(model == 9) {
			lFireModes = "Bolt action";
		}
		if(openfl_ui_Multitouch.get_supportsTouchEvents() && lFireModes == "Full auto / Semi") {
			lFireModes = "Full auto";
		}
		this.mDescription = "Name: <font color=\"#661111\">" + lName + "</font>\nDamage: <font color=\"#661111\">" + lDamage + "</font>\nMagazine capacity: <font color=\"#661111\">" + this.mStatMagazineCapacity + "</font>\nRecoil: <font color=\"#661111\">" + lRecoil + "</font>\nFire modes: <font color=\"#661111\">" + lFireModes + "</font>";
		if(this.mStatRateOfFire == 1) {
			this.mStatFireDelay = 100;
		} else {
			this.mStatFireDelay = 60.0 / this.mStatRateOfFire * 1000;
		}
		this.mReloadTimer = new openfl_utils_Timer(this.mStatReloadTimeEmpty * 1000,1);
		this.mShootTimer = new openfl_utils_Timer(this.mStatFireDelay,1);
		this.mTakeOutTimer = new openfl_utils_Timer(this.mStatTakeOutTime * 1000,1);
		this.mPutAway = new openfl_utils_Timer(this.mStatTakeOutTime * 1000 / 2,1);
		this.mTakenOut = false;
		if((this.mStatAvailableFireModes & 1) != 0) {
			this.mActiveFireMode = 1;
		} else if((this.mStatAvailableFireModes & 2) != 0) {
			this.mActiveFireMode = 2;
		} else {
			this.mActiveFireMode = 4;
		}
		this.mReadyToShoot = false;
		this.mTriggerPulled = false;
		this.mRoundsLeft = this.mStatMagazineCapacity;
		this.mMagazinesLeft = this.mStatMagazineCount;
		this.mBurstCurLength = -1;
		this.mReloadingPhase = 0;
		this.mReloadTimer.addEventListener("timer",$bind(this,this.onReloadTimer));
		this.mShootTimer.addEventListener("timer",$bind(this,this.onShootTimer));
		this.mTakeOutTimer.addEventListener("timer",$bind(this,this.onTakeOutTimer));
		this.mPutAway.addEventListener("timer",$bind(this,this.onPutAwayTimer));
	}
	,restock: function() {
		this.mTakenOut = false;
		if((this.mStatAvailableFireModes & 1) != 0) {
			this.mActiveFireMode = 1;
		} else if((this.mStatAvailableFireModes & 2) != 0) {
			this.mActiveFireMode = 2;
		} else {
			this.mActiveFireMode = 4;
		}
		this.mReadyToShoot = false;
		this.mTriggerPulled = false;
		this.mRoundsLeft = this.mStatMagazineCapacity;
		this.mMagazinesLeft = this.mStatMagazineCount;
		this.mBurstCurLength = -1;
		if(this.mMainGraphics1 != null) {
			this.gotoFrame(3);
		}
	}
	,reload: function() {
		if(this.mReadyToShoot) {
			if(this.mMagazinesLeft > 0) {
				this.mTakenOut = false;
				this.mReadyToShoot = false;
				this.mReloadingPhase = 1;
				this.mReloadTimer.reset();
				this.mReloadTimer.set_delay(this.mStatTakeOutTime);
				this.mReloadTimer.start();
				old_singleton_SoundPlayer.get_instance().reload(1);
				this.gotoFrame(3);
			}
		}
	}
	,pullTrigger: function() {
		if(!this.mTriggerPulled) {
			this.mTriggerPulled = true;
			if(!openfl_ui_Multitouch.get_supportsTouchEvents()) {
				old_singleton_SoundPlayer.get_instance().pullTrigger(true);
			}
			if(this.mReadyToShoot) {
				if(this.mActiveFireMode == 2 && this.mBurstCurLength < 0) {
					this.mBurstCurLength = 1;
				}
				if(this.mRoundsLeft > 0) {
					old_singleton_SoundPlayer.get_instance().shoot(this.mModel);
					this.mReadyToShoot = false;
					this.mRoundsLeft--;
					this.mShootTimer.start();
					this.mPlayer.shotFired();
					this.gotoFrame(2);
				} else {
					this.mAutoReloadCounter++;
					if(this.mAutoReloadCounter == 2) {
						this.mAutoReloadCounter = 0;
						this.reload();
					}
				}
			}
		} else if(this.mReadyToShoot) {
			if(this.mActiveFireMode == 1) {
				if(this.mRoundsLeft > 0) {
					old_singleton_SoundPlayer.get_instance().shoot(this.mModel);
					this.mReadyToShoot = false;
					this.mRoundsLeft--;
					this.mShootTimer.start();
					this.mPlayer.shotFired();
					this.gotoFrame(2);
				}
			}
		}
	}
	,releaseTrigger: function() {
		this.mTriggerPulled = false;
		if(!openfl_ui_Multitouch.get_supportsTouchEvents()) {
			old_singleton_SoundPlayer.get_instance().pullTrigger(false);
		}
	}
	,changeFireMode: function() {
		if(this.mReadyToShoot) {
			var switched = true;
			if(this.mActiveFireMode == 1) {
				if((this.mStatAvailableFireModes & 2) != 0) {
					this.mActiveFireMode = 2;
				} else if((this.mStatAvailableFireModes & 4) != 0) {
					this.mActiveFireMode = 4;
				} else {
					switched = false;
				}
			} else if(this.mActiveFireMode == 2) {
				if((this.mStatAvailableFireModes & 4) != 0) {
					this.mActiveFireMode = 4;
				} else if((this.mStatAvailableFireModes & 1) != 0) {
					this.mActiveFireMode = 1;
				} else {
					switched = false;
				}
			} else if(this.mActiveFireMode == 4) {
				if((this.mStatAvailableFireModes & 1) != 0) {
					this.mActiveFireMode = 1;
				} else if((this.mStatAvailableFireModes & 2) != 0) {
					this.mActiveFireMode = 2;
				} else {
					switched = false;
				}
			}
			if(switched) {
				old_singleton_SoundPlayer.get_instance().switchFiremode();
			}
		}
	}
	,takeOut: function(force) {
		if(force == null) {
			force = false;
		}
		this.mTakeOutPhase = 0;
		if(!force) {
			this.mTakeOutTimer.reset();
			this.mTakeOutTimer.set_delay(this.mStatTakeOutTime * 1000 - this.mStatTakeOutFrames * 33.333);
			this.mTakeOutTimer.start();
		} else {
			this.mTakeOutPhase = 1;
			this.onTakeOutTimer(null);
		}
	}
	,putAway: function() {
		if(this.mReadyToShoot) {
			this.mTriggerPulled = false;
			this.mReadyToShoot = false;
			this.mPutAway.reset();
			this.mPutAway.start();
			old_singleton_SoundPlayer.get_instance().reload(1);
			this.gotoFrame(3);
		}
	}
	,onReloadTimer: function(e) {
		if(this.mReloadingPhase == 1) {
			this.mReloadingPhase = 2;
			this.mReloadTimer.reset();
			if(this.mRoundsLeft > 0) {
				this.mReloadTimer.set_delay((this.mStatReloadTimeChambered - 1.5) * 1000);
			} else {
				this.mReloadTimer.set_delay((this.mStatReloadTimeEmpty - 1) * 1000);
			}
			this.mReloadTimer.start();
			old_singleton_SoundPlayer.get_instance().reload(2);
		} else if(this.mReloadingPhase == 2) {
			this.mReloadingPhase = 3;
			this.mReloadTimer.reset();
			this.gotoFrame(1);
			this.mReloadTimer.set_delay(this.mStatTakeOutTime);
			this.mReloadTimer.start();
			old_singleton_SoundPlayer.get_instance().reload(3);
		} else if(this.mReloadingPhase == 3) {
			this.mReloadingPhase = 0;
			this.mTakenOut = true;
			this.mReadyToShoot = true;
			this.mRoundsLeft = this.mStatMagazineCapacity;
			old_events_EventManager.get_instance().dispatchEvent(new old_events_GunEvent(old_events_GunEvent.RELOADED,this));
		}
	}
	,onShootTimer: function(e) {
		this.mReadyToShoot = true;
		if(this.mActiveFireMode == 2 && this.mBurstCurLength < 3) {
			if(this.mRoundsLeft > 0) {
				old_singleton_SoundPlayer.get_instance().shoot(this.mModel);
				this.mReadyToShoot = false;
				this.mRoundsLeft--;
				this.mShootTimer.reset();
				this.mShootTimer.start();
				this.mPlayer.shotFired();
				this.mBurstCurLength++;
				this.gotoFrame(2);
			} else {
				this.mBurstCurLength = -1;
			}
		} else if(this.mActiveFireMode == 2 && this.mBurstCurLength > 2) {
			this.mBurstCurLength = -1;
		}
	}
	,onTakeOutTimer: function(e) {
		if(this.mTakeOutPhase == 0) {
			this.gotoFrame(1);
			this.mTakeOutPhase = 1;
			this.mTakeOutTimer.reset();
			this.mTakeOutTimer.set_delay(this.mStatTakeOutFrames * 33.333);
			this.mTakeOutTimer.start();
		} else if(this.mTakeOutPhase == 1) {
			this.mTakeOutPhase = -1;
			this.mTakenOut = true;
			this.mReadyToShoot = true;
			old_events_EventManager.get_instance().dispatchEvent(new old_events_GunEvent(old_events_GunEvent.TAKEN_OUT,this));
		}
	}
	,onPutAwayTimer: function(e) {
		this.mTakenOut = false;
		old_events_EventManager.get_instance().dispatchEvent(new old_events_GunEvent(old_events_GunEvent.PUT_AWAY,this));
	}
	,__class__: old_entities_equipment_Gun
	,__properties__: $extend(old_entities_equipment_InventoryItem.prototype.__properties__,{get_mainImg:"get_mainImg",set_mainGraphics:"set_mainGraphics",get_mainGraphics:"get_mainGraphics",get_magazinesLeft:"get_magazinesLeft",get_roundsLeft:"get_roundsLeft",get_fireMode:"get_fireMode",get_readyToShoot:"get_readyToShoot",get_takenOut:"get_takenOut",get_caliber:"get_caliber",get_velocity:"get_velocity",get_recoil:"get_recoil",set_player:"set_player",get_player:"get_player"})
});
var old_entities_equipment_ItemDescription = function() {
};
$hxClasses["old.entities.equipment.ItemDescription"] = old_entities_equipment_ItemDescription;
old_entities_equipment_ItemDescription.__name__ = "old.entities.equipment.ItemDescription";
old_entities_equipment_ItemDescription.GetMeAn = function(model,item) {
	var lGun = item;
	switch(model) {
	case 0:
		lGun.defineWeapon(1,0,800,"WeaponAK74Anim","Inventory_Ak74","UIWeaponAk74",3.0,545,-1,650,20,5,30,6,2.5,2.5,1);
		break;
	case 1:
		lGun.defineWeapon(1,1,1200,"WeaponM4Anim","Inventory_M4","UIWeaponM4",3.5,556,-1,800,20,6,30,6,2.5,2.5,1);
		break;
	case 2:
		lGun.defineWeapon(1,2,2000,"WeaponSCARHAnim","Inventory_SCARH","UIWeaponSCARH",3.5,762,-1,625,30,5,20,6,2.5,2.5,1);
		break;
	case 3:
		lGun.defineWeapon(1,3,4000,"WeaponPKMAnim","Inventory_PKM","UIWeaponPKM",7.5,762,-1,650,27,1,100,6,4.5,4.5,1);
		break;
	case 4:
		lGun.defineWeapon(1,4,200,"WeaponM9Anim","Inventory_M9","UIWeaponM9",0.95,900,-1,480,30,4,15,5,2,2,0.5);
		break;
	case 5:
		lGun.defineWeapon(1,5,400,"WeaponIngramAnim","Inventory_Ingram","UIWeaponIngram",1,900,-1,1090,25,1,32,6,2,2,1);
		break;
	case 6:
		lGun.defineWeapon(1,6,2500,"WeaponM79Anim","Inventory_M79","UIWeaponM79",1,4000,176,1,30,4,1,10,2.5,2.5,1);
		break;
	case 7:
		lGun.defineWeapon(1,7,500,"WeaponMP5Anim","Inventory_MP5","UIWeaponMP5",1,900,-1,800,25,5,32,10,2,2,1);
		break;
	case 8:
		lGun.defineWeapon(1,8,700,"WeaponSpringfieldAnim","Inventory_Springfield","UIWeaponSpringfield",1,1145,-1,50,50,4,5,10,2.5,2.5,1);
		break;
	case 9:
		lGun.defineWeapon(1,9,700,"WeaponRemingtonAnim","Inventory_Remington","UIWeaponRemington",1,1270,-1,50,50,4,5,10,2.5,2.5,1);
		break;
	}
};
old_entities_equipment_ItemDescription.getInventoryGraphics = function(model) {
	switch(model) {
	case 0:
		return "Inventory_Ak74";
	case 1:
		return "Inventory_M4";
	case 2:
		return "Inventory_SCARH";
	case 3:
		return "Inventory_PKM";
	case 4:
		return "Inventory_M9";
	case 5:
		return "Inventory_Ingram";
	case 6:
		return "Inventory_M79";
	case 7:
		return "Inventory_MP5";
	case 8:
		return "Inventory_Springfield";
	case 9:
		return "Inventory_Remington";
	default:
		return "";
	}
};
old_entities_equipment_ItemDescription.prototype = {
	__class__: old_entities_equipment_ItemDescription
};
var old_entities_friendlies_Friendly = function(fightSkill,player,enemySystem) {
	this.mActionTimer = null;
	this.mActionDelay = 2000;
	this.mAnimationTimer = null;
	this.mAnimating = false;
	this.mState = 0;
	this.mFightSkill = 0;
	this.mEnemySystem = null;
	this.mPlayer = null;
	this.mFightSkill = fightSkill;
	this.mPlayer = player;
	this.mEnemySystem = enemySystem;
	if(this.mFightSkill > 0) {
		this.mActionDelay = 21000 / this.mFightSkill + old_helper_UsefulStuff.rnd(-2000,2000);
	} else {
		this.mActionDelay = 21000 + old_helper_UsefulStuff.rnd(-2000,2000);
	}
	this.mAnimationTimer = new openfl_utils_Timer(1,1);
	this.mAnimationTimer.addEventListener("timerComplete",$bind(this,this.onAnimationTimer));
	this.mActionTimer = new openfl_utils_Timer(this.mActionDelay,0);
	this.mActionTimer.addEventListener("timer",$bind(this,this.onActionTimer));
	this.mState = 0;
};
$hxClasses["old.entities.friendlies.Friendly"] = old_entities_friendlies_Friendly;
old_entities_friendlies_Friendly.__name__ = "old.entities.friendlies.Friendly";
old_entities_friendlies_Friendly.prototype = {
	mPlayer: null
	,mEnemySystem: null
	,mFightSkill: null
	,mState: null
	,mAnimating: null
	,mAnimationTimer: null
	,mActionDelay: null
	,mActionTimer: null
	,mEnemyTarget: null
	,get_state: function() {
		return this.mState;
	}
	,set_state: function(value) {
		this.mState = value;
		return value;
	}
	,wakeUp: function() {
		this.mAnimationTimer.set_delay(old_helper_UsefulStuff.rnd(0,2000));
		this.mAnimationTimer.start();
	}
	,update: function(dt) {
	}
	,onAnimationTimer: function(e) {
		if(this.mState == 0) {
			this.mState = 1;
			this.mActionTimer.start();
		} else if(this.mState == 2) {
			this.mState = 3;
		} else if(this.mState == 1) {
			this.mEnemyTarget.instaKill(this.mFightSkill);
		}
	}
	,onActionTimer: function(e) {
		var lEnemy = null;
		lEnemy = this.mEnemySystem.findTargetForSniper();
		if(lEnemy != null) {
			this.mEnemyTarget = lEnemy;
			old_singleton_SoundPlayer.get_instance().friendlyShoot();
			old_events_EventManager.get_instance().dispatchEvent(new old_events_FriendlyEvent(old_events_FriendlyEvent.FRIENDLY_FIRING,this,0,0,0,lEnemy.get_mainGraphics().get_x() - 40,lEnemy.get_mainGraphics().get_y(),0,lEnemy));
			this.mAnimationTimer.set_delay(200);
			this.mAnimationTimer.start();
		}
	}
	,pause: function() {
		this.mAnimationTimer.stop();
		this.mActionTimer.stop();
	}
	,resume: function() {
		if(this.mAnimating) {
			this.mAnimationTimer.start();
		}
		if(this.mState == 1) {
			this.mActionTimer.start();
		}
	}
	,destroy: function() {
		this.mAnimationTimer.stop();
		this.mAnimationTimer.removeEventListener("timerComplete",$bind(this,this.onAnimationTimer));
		this.mActionTimer.stop();
		this.mActionTimer.removeEventListener("timer",$bind(this,this.onActionTimer));
	}
	,__class__: old_entities_friendlies_Friendly
	,__properties__: {set_state:"set_state",get_state:"get_state"}
};
var old_entities_friendlies_SurvGraphics = function() {
	this._btn = null;
	this._frameContent = null;
	this.cross = null;
	this.container = null;
	this.initGraphics();
};
$hxClasses["old.entities.friendlies.SurvGraphics"] = old_entities_friendlies_SurvGraphics;
old_entities_friendlies_SurvGraphics.__name__ = "old.entities.friendlies.SurvGraphics";
old_entities_friendlies_SurvGraphics.prototype = {
	container: null
	,cross: null
	,_frameContent: null
	,_btn: null
	,initGraphics: function() {
		this.container = old_MainOld.getInstance().builder.createSprite();
		this.cross = old_MainOld.getInstance().builder.createAnimation("UISurvivorsButtonCross");
		this.set_frameContent(old_MainOld.getInstance().builder.createAnimation("UISurvivorsButtonFaces"));
		this.cross.set_visible(false);
		this.cross.set_x(-24);
		this.container.addChild(this.cross);
	}
	,get_frameContent: function() {
		return this._frameContent;
	}
	,set_frameContent: function(value) {
		if(this._frameContent != null) {
			this.container.removeChild(this._frameContent);
		}
		this._frameContent = value;
		this._frameContent.set_x(-24);
		this.container.addChild(this._frameContent);
		this.container.addChild(this.cross);
		return this._frameContent;
	}
	,get_btn: function() {
		return this._btn;
	}
	,set_btn: function(value) {
		if(this._btn != null) {
			this.container.removeChild(this._btn.get_mainGraphics());
		}
		this._btn = value;
		this._btn.set_x(-24);
		this.container.addChildAt(this._btn.get_mainGraphics(),0);
		this.container.addChild(this.cross);
		return this._btn;
	}
	,disable: function(reduceAlpha) {
		if(reduceAlpha == null) {
			reduceAlpha = -1;
		}
		this.get_btn().disable();
		this.container.set_alpha(0);
	}
	,enable: function(restoreAlpha) {
		if(restoreAlpha == null) {
			restoreAlpha = -1;
		}
		this.get_btn().enable(restoreAlpha);
		this.container.set_alpha(1);
	}
	,__class__: old_entities_friendlies_SurvGraphics
	,__properties__: {set_btn:"set_btn",get_btn:"get_btn",set_frameContent:"set_frameContent",get_frameContent:"get_frameContent"}
};
var old_entities_impact_Bullet = function() {
	this.mMaxRadius = 100;
	this.mMinRadius = 50;
	this.mVelocity = 0;
	this.mCaliber = 0;
	this.mGun = null;
	this.mActive = false;
	this.mTimer = null;
	this.mY = 0;
	this.mX = 0;
	this.mTimer = new openfl_utils_Timer(1000,1);
};
$hxClasses["old.entities.impact.Bullet"] = old_entities_impact_Bullet;
old_entities_impact_Bullet.__name__ = "old.entities.impact.Bullet";
old_entities_impact_Bullet.prototype = {
	mX: null
	,mY: null
	,mTimer: null
	,mActive: null
	,mGun: null
	,mCaliber: null
	,mVelocity: null
	,mMinRadius: null
	,mMaxRadius: null
	,get_x: function() {
		return this.mX;
	}
	,get_y: function() {
		return this.mY;
	}
	,get_gun: function() {
		return this.mGun;
	}
	,get_caliber: function() {
		return this.mCaliber;
	}
	,get_velocity: function() {
		return this.mVelocity;
	}
	,get_minRadius: function() {
		return this.mMinRadius;
	}
	,get_maxRadius: function() {
		return this.mMaxRadius;
	}
	,get_active: function() {
		return this.mActive;
	}
	,set_x: function(value) {
		this.mX = this.get_x();
		return value;
	}
	,set_y: function(value) {
		this.mY = this.get_y();
		return value;
	}
	,set_active: function(value) {
		if(!value) {
			this.mTimer.stop();
		}
		this.mActive = value;
		return value;
	}
	,reset: function(x,y,gun,caliber,velocity,time) {
		this.mX = x;
		this.mY = y;
		this.mActive = true;
		this.mGun = gun;
		this.mCaliber = caliber;
		this.mVelocity = velocity;
		if(this.mCaliber == 4000) {
			var lScale = this.mY / 960;
			this.mMinRadius = 50 * lScale;
			this.mMaxRadius = 150 * lScale;
		}
		if(time >= 0) {
			this.mTimer.addEventListener("timerComplete",$bind(this,this.onTimeOut));
			this.mTimer.reset();
			this.mTimer.set_delay(time * 1000);
			this.mTimer.start();
		}
	}
	,onTimeOut: function(e) {
		if(this.mCaliber == 4000) {
			old_events_EventManager.get_instance().dispatchEvent(new old_events_BulletEvent(old_events_BulletEvent.GRENADE_ARRIVED,this));
		} else {
			old_events_EventManager.get_instance().dispatchEvent(new old_events_BulletEvent(old_events_BulletEvent.BULLET_ARRIVED,this));
		}
	}
	,pause: function() {
		this.mTimer.stop();
	}
	,resume: function() {
		this.mTimer.start();
	}
	,destroy: function() {
		this.mTimer.stop();
		this.mTimer.removeEventListener("timerComplete",$bind(this,this.onTimeOut));
	}
	,__class__: old_entities_impact_Bullet
	,__properties__: {set_active:"set_active",get_active:"get_active",get_maxRadius:"get_maxRadius",get_minRadius:"get_minRadius",get_velocity:"get_velocity",get_caliber:"get_caliber",get_gun:"get_gun",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var old_entities_map_Area = function(id,allWeaponList,allSurvivorList) {
	this.mLocations = null;
	this.mMainGraphics = null;
	this.mId = 0;
	this.mId = id;
	this.populateArea(this.mId,allWeaponList,allSurvivorList);
};
$hxClasses["old.entities.map.Area"] = old_entities_map_Area;
old_entities_map_Area.__name__ = "old.entities.map.Area";
old_entities_map_Area.prototype = {
	mId: null
	,mMainGraphics: null
	,mLocations: null
	,get_id: function() {
		return this.mId;
	}
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_locations: function() {
		return this.mLocations;
	}
	,get_cleared: function() {
		var _g = 0;
		var _g1 = this.mLocations;
		while(_g < _g1.length) {
			var lLocation = _g1[_g];
			++_g;
			if(!lLocation.get_searched()) {
				return false;
			}
		}
		return true;
	}
	,reset: function() {
	}
	,populateArea: function(id,allWeaponList,allSurvivorList) {
		this.mId = id;
		this.mLocations = [];
		var lLocation = null;
		this.mMainGraphics = old_MainOld.getInstance().builder.createAnimation("UIAreaImg");
		this.mMainGraphics.gotoFrame(this.mId + 1);
		this.mMainGraphics.stop();
		switch(this.mId) {
		case 0:
			lLocation = new old_entities_map_Location(15,131,316);
			lLocation.addWeapon(allWeaponList[4],-1);
			lLocation.addSurvivor(allSurvivorList[1],-1);
			lLocation.addSurvivor(allSurvivorList[0]);
			lLocation.set_description("Pistol and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(25,188,336);
			lLocation.addWeapon(allWeaponList[4],1);
			lLocation.addSurvivor(allSurvivorList[3]);
			lLocation.set_description("Pistol and Survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(30,168,273);
			lLocation.addWeapon(allWeaponList[5],-3);
			lLocation.addWeapon(allWeaponList[4],1);
			lLocation.addSurvivor(allSurvivorList[11],-2);
			lLocation.addSurvivor(allSurvivorList[1],5);
			lLocation.set_description("Submachine gun and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(60,257,195);
			lLocation.addWeapon(allWeaponList[5],-3);
			lLocation.addWeapon(allWeaponList[4]);
			lLocation.set_description("Submachine gun");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(70,306,196);
			lLocation.addWeapon(allWeaponList[5],6);
			lLocation.addSurvivor(allSurvivorList[5],2);
			lLocation.addSurvivor(allSurvivorList[12],-2);
			lLocation.set_description("Submachine gun and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(90,351,166);
			lLocation.addWeapon(allWeaponList[4],1);
			lLocation.addWeapon(allWeaponList[7],-2);
			lLocation.set_description("MP5 submachine gun");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(100,311,124);
			lLocation.addSurvivor(allSurvivorList[14],-3);
			lLocation.addSurvivor(allSurvivorList[7],4);
			lLocation.addSurvivor(allSurvivorList[6],1);
			lLocation.set_description("Survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(180,170,154);
			lLocation.addWeapon(allWeaponList[7],-1);
			lLocation.addSurvivor(allSurvivorList[14],-2);
			lLocation.addSurvivor(allSurvivorList[7],0);
			lLocation.set_description("MP5 submachine gun and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(190,240,92);
			lLocation.addWeapon(allWeaponList[5],2);
			lLocation.addWeapon(allWeaponList[4]);
			lLocation.addWeapon(allWeaponList[9],-8);
			lLocation.set_description("Hunting rifle, submachine gun or a pistol");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(210,176,81);
			lLocation.addWeapon(allWeaponList[7]);
			lLocation.addWeapon(allWeaponList[9],-7);
			lLocation.addWeapon(allWeaponList[5],0);
			lLocation.addSurvivor(allSurvivorList[3],-3);
			lLocation.addSurvivor(allSurvivorList[8],3);
			lLocation.set_description("Hunting rifle, submachine gun and survivors");
			this.mLocations.push(lLocation);
			break;
		case 1:
			lLocation = new old_entities_map_Location(230,340,240);
			lLocation.addWeapon(allWeaponList[9],-1);
			lLocation.addWeapon(allWeaponList[0],-5);
			lLocation.addSurvivor(allSurvivorList[2],-3);
			lLocation.set_description("Hunting rifle");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(250,295,220);
			lLocation.addWeapon(allWeaponList[9],-1);
			lLocation.addSurvivor(allSurvivorList[3],-2);
			lLocation.addSurvivor(allSurvivorList[5],-3);
			lLocation.set_description("Hunting rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(290,292,157);
			lLocation.addWeapon(allWeaponList[0],-3);
			lLocation.addSurvivor(allSurvivorList[10],-2);
			lLocation.addSurvivor(allSurvivorList[11],4);
			lLocation.set_description("Assault rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(310,211,260);
			lLocation.addWeapon(allWeaponList[9],5);
			lLocation.addSurvivor(allSurvivorList[14],-2);
			lLocation.addSurvivor(allSurvivorList[3]);
			lLocation.set_description("Hunting rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(330,172,310);
			lLocation.addWeapon(allWeaponList[0]);
			lLocation.addSurvivor(allSurvivorList[15],-1);
			lLocation.addSurvivor(allSurvivorList[2],-3);
			lLocation.addSurvivor(allSurvivorList[9],-2);
			lLocation.set_description("Assault rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(370,120,291);
			lLocation.addWeapon(allWeaponList[9],0);
			lLocation.addWeapon(allWeaponList[2],-5);
			lLocation.addSurvivor(allSurvivorList[12],-2);
			lLocation.addSurvivor(allSurvivorList[15],5);
			lLocation.set_description("Assault rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(410,174,127);
			lLocation.addWeapon(allWeaponList[0]);
			lLocation.addSurvivor(allSurvivorList[16]);
			lLocation.set_description("Assault rifle");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(450,129,156);
			lLocation.addWeapon(allWeaponList[2],-3);
			lLocation.addWeapon(allWeaponList[6],-8);
			lLocation.addSurvivor(allSurvivorList[17],-1);
			lLocation.set_description("Grenade launcher and assault rifle");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(470,87,136);
			lLocation.addWeapon(allWeaponList[9],-2);
			lLocation.addWeapon(allWeaponList[0],2);
			lLocation.addSurvivor(allSurvivorList[3],-2);
			lLocation.addSurvivor(allSurvivorList[16]);
			lLocation.set_description("Assault rifle and survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(500,220,63);
			lLocation.addWeapon(allWeaponList[9],-2);
			lLocation.addWeapon(allWeaponList[0],-1);
			lLocation.addWeapon(allWeaponList[2],-1);
			lLocation.addSurvivor(allSurvivorList[15],-2);
			lLocation.addSurvivor(allSurvivorList[19],-1);
			lLocation.set_description("Assault rifles and survivors");
			this.mLocations.push(lLocation);
			break;
		case 2:
			lLocation = new old_entities_map_Location(600,179,94);
			lLocation.addWeapon(allWeaponList[6],-1);
			lLocation.addWeapon(allWeaponList[1],-3);
			lLocation.addSurvivor(allSurvivorList[2],-3);
			lLocation.addSurvivor(allSurvivorList[19],-2);
			lLocation.set_description("Grenade launcher, assault rifle");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(640,100,142);
			lLocation.addSurvivor(allSurvivorList[7]);
			lLocation.addSurvivor(allSurvivorList[18],-2);
			lLocation.addSurvivor(allSurvivorList[16],5);
			lLocation.set_description("Survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(650,86,241);
			lLocation.addWeapon(allWeaponList[6],-1);
			lLocation.addSurvivor(allSurvivorList[18]);
			lLocation.set_description("Grenade launcher");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(660,248,156);
			lLocation.addWeapon(allWeaponList[1]);
			lLocation.addWeapon(allWeaponList[3],-4);
			lLocation.addSurvivor(allSurvivorList[16]);
			lLocation.addSurvivor(allSurvivorList[5],-2);
			lLocation.set_description("Machine gun, assault rifle");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(700,290,198);
			lLocation.addWeapon(allWeaponList[3],-3);
			lLocation.addWeapon(allWeaponList[6]);
			lLocation.addSurvivor(allSurvivorList[10],-2);
			lLocation.addSurvivor(allSurvivorList[17],-1);
			lLocation.set_description("Grenade launcher, survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(710,350,191);
			lLocation.addWeapon(allWeaponList[3]);
			lLocation.addSurvivor(allSurvivorList[18]);
			lLocation.set_description("Machine gun");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(730,245,295);
			lLocation.addWeapon(allWeaponList[3],-1);
			lLocation.addWeapon(allWeaponList[6]);
			lLocation.addSurvivor(allSurvivorList[16],-1);
			lLocation.addSurvivor(allSurvivorList[18],-2);
			lLocation.set_description("Machine gun, survivors");
			this.mLocations.push(lLocation);
			lLocation = new old_entities_map_Location(750,334,288);
			lLocation.addWeapon(allWeaponList[1],5);
			lLocation.addSurvivor(allSurvivorList[19]);
			lLocation.set_description("Assault rifle");
			this.mLocations.push(lLocation);
			break;
		}
	}
	,searchLocation: function(location,randomFactor,searchSkill,threshold) {
		if(location >= 0 && location < this.mLocations.length - 1) {
			var tmp;
			try {
				tmp = js_Boot.__cast(this.mLocations[location] , old_entities_map_Location);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				tmp = null;
			}
			return tmp.search(searchSkill);
		}
		return null;
	}
	,__class__: old_entities_map_Area
	,__properties__: {get_cleared:"get_cleared",get_locations:"get_locations",get_mainGraphics:"get_mainGraphics",get_id:"get_id"}
};
var old_entities_map_Location = function(difficulty,x,y) {
	this.mSearched = false;
	this.mDescription = null;
	this.mWeaponListModifiers = null;
	this.mSurvivorListModifiers = null;
	this.mWeaponList = null;
	this.mSurvivorList = null;
	this.mDifficulty = 0;
	this.mY = 0;
	this.mX = 0;
	this.mX = x;
	this.mY = y;
	this.mDifficulty = difficulty;
	this.mSurvivorList = [];
	this.mWeaponList = [];
	this.mSurvivorListModifiers = [];
	this.mWeaponListModifiers = [];
};
$hxClasses["old.entities.map.Location"] = old_entities_map_Location;
old_entities_map_Location.__name__ = "old.entities.map.Location";
old_entities_map_Location.prototype = {
	mX: null
	,mY: null
	,mDifficulty: null
	,mSurvivorList: null
	,mWeaponList: null
	,mSurvivorListModifiers: null
	,mWeaponListModifiers: null
	,mDescription: null
	,mSearched: null
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		return value;
	}
	,get_difficulty: function() {
		return this.mDifficulty;
	}
	,set_difficulty: function(value) {
		this.mDifficulty = value;
		return value;
	}
	,get_survivorList: function() {
		return this.mSurvivorList;
	}
	,get_weaponList: function() {
		return this.mWeaponList;
	}
	,get_description: function() {
		return this.mDescription;
	}
	,set_description: function(value) {
		this.mDescription = value;
		return value;
	}
	,get_searched: function() {
		return this.mSearched;
	}
	,set_searched: function(value) {
		this.mSearched = value;
		return value;
	}
	,markForSearching: function() {
	}
	,addWeapon: function(weapon,modifier) {
		if(modifier == null) {
			modifier = 0;
		}
		weapon.addLocation(this);
		if(modifier >= 100) {
			weapon.set_guaranteed(true);
		} else {
			weapon.set_guaranteed(false);
		}
		this.mWeaponList.push(weapon);
		this.mWeaponListModifiers.push(modifier);
	}
	,removeWeapon: function(weapon) {
		var lIndex = Lambda.indexOf(this.mWeaponList,weapon);
		if(lIndex >= 0) {
			weapon.removeLocation(this);
			this.mWeaponList.splice(lIndex,1);
			this.mWeaponListModifiers.splice(lIndex,1);
		}
	}
	,addSurvivor: function(survivor,modifier) {
		if(modifier == null) {
			modifier = 0;
		}
		survivor.addLocation(this);
		if(modifier >= 100) {
			survivor.set_guaranteed(true);
		} else {
			survivor.set_guaranteed(false);
		}
		this.mSurvivorList.push(survivor);
		this.mSurvivorListModifiers.push(modifier);
	}
	,removeSurvivor: function(survivor) {
		var lIndex = Lambda.indexOf(this.mSurvivorList,survivor);
		if(lIndex >= 0) {
			survivor.removeLocation(this);
			this.mSurvivorList.splice(lIndex,1);
			this.mSurvivorListModifiers.splice(lIndex,1);
		}
	}
	,search: function(searchSkill) {
		this.mSearched = true;
		var lArray = [];
		var lSurvivorsFound = [];
		var lWeaponsFound = [];
		lArray.push(lSurvivorsFound);
		lArray.push(lWeaponsFound);
		var lLength = this.mWeaponList.length;
		var lWeapon = null;
		var lSurvivor = null;
		var lModifier = 0;
		var i = lLength - 1 | 0;
		while(i >= 0) {
			lWeapon = this.mWeaponList[i];
			lModifier = this.mWeaponListModifiers[i];
			if(!lWeapon.get_found() && (lWeapon.get_guaranteed() || old_helper_UsefulStuff.skillCheck(searchSkill + 1 + lModifier,1))) {
				lWeaponsFound.push(lWeapon.get_id());
				lWeapon.set_found(true);
				this.removeWeapon(lWeapon);
				break;
			}
			--i;
		}
		lLength = this.mSurvivorList.length;
		i = lLength - 1;
		while(i >= 0) {
			lSurvivor = this.mSurvivorList[i];
			lModifier = this.mSurvivorListModifiers[i];
			if(!lSurvivor.get_found() && (lSurvivor.get_guaranteed() || old_helper_UsefulStuff.skillCheck(searchSkill + 1 + lModifier,1))) {
				if(lSurvivor.get_found()) {
					haxe_Log.trace("FOUND",{ fileName : "src/old/entities/map/Location.hx", lineNumber : 202, className : "old.entities.map.Location", methodName : "search"});
				}
				lSurvivorsFound.push(lSurvivor);
				lSurvivor.set_found(true);
				this.removeSurvivor(lSurvivor);
			}
			--i;
		}
		return lArray;
	}
	,__class__: old_entities_map_Location
	,__properties__: {set_searched:"set_searched",get_searched:"get_searched",set_description:"set_description",get_description:"get_description",get_weaponList:"get_weaponList",get_survivorList:"get_survivorList",set_difficulty:"set_difficulty",get_difficulty:"get_difficulty",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var old_entities_map_Map = function(player) {
	this.mAdditionalSurvivorList = null;
	this.mAdditionalAvailableSurvivors = null;
	this.mAllSurvivorList = null;
	this.mAvailableSurvivors = null;
	this.mAllWeaponList = null;
	this.mWeaponFound = 0;
	this.mAdditionalSurvivors = null;
	this.mSurvivorsLost = null;
	this.mSearchResults = null;
	this.mCurAreaCleared = false;
	this.mCurAreaId = 0;
	this.mCurArea = null;
	this.mAreas = null;
	this.mWasReset = true;
	this.mPlayer = null;
	this.mPlayer = player;
	this.mAllWeaponList = [];
	this.mAllWeaponList.push(new old_entities_map_Weapon(0));
	this.mAllWeaponList.push(new old_entities_map_Weapon(1));
	this.mAllWeaponList.push(new old_entities_map_Weapon(2));
	this.mAllWeaponList.push(new old_entities_map_Weapon(3));
	this.mAllWeaponList.push(new old_entities_map_Weapon(4));
	this.mAllWeaponList.push(new old_entities_map_Weapon(5));
	this.mAllWeaponList.push(new old_entities_map_Weapon(6));
	this.mAllWeaponList.push(new old_entities_map_Weapon(7));
	this.mAllWeaponList.push(new old_entities_map_Weapon(8));
	this.mAllWeaponList.push(new old_entities_map_Weapon(9));
};
$hxClasses["old.entities.map.Map"] = old_entities_map_Map;
old_entities_map_Map.__name__ = "old.entities.map.Map";
old_entities_map_Map.prototype = {
	mPlayer: null
	,mWasReset: null
	,mAreas: null
	,mCurArea: null
	,mCurAreaId: null
	,mCurAreaCleared: null
	,mSearchResults: null
	,mSurvivorsLost: null
	,mAdditionalSurvivors: null
	,mWeaponFound: null
	,mAllWeaponList: null
	,mAvailableSurvivors: null
	,mAllSurvivorList: null
	,mAdditionalAvailableSurvivors: null
	,mAdditionalSurvivorList: null
	,get_curAreaId: function() {
		return this.mCurAreaId;
	}
	,get_curArea: function() {
		return this.mCurArea;
	}
	,get_areas: function() {
		return this.mAreas;
	}
	,get_searchResults: function() {
		return this.mSearchResults;
	}
	,set_searchResults: function(value) {
		this.mSearchResults = value;
		return value;
	}
	,get_survivorsLost: function() {
		return this.mSurvivorsLost;
	}
	,set_survivorsLost: function(value) {
		this.mSurvivorsLost = value;
		return value;
	}
	,get_additionalSurvivors: function() {
		return this.mAdditionalSurvivors;
	}
	,set_additionalSurvivors: function(value) {
		this.mAdditionalSurvivors = value;
		return value;
	}
	,get_wasReset: function() {
		return this.mWasReset;
	}
	,set_wasReset: function(value) {
		this.mWasReset = value;
		return value;
	}
	,get_weaponFound: function() {
		return this.mWeaponFound;
	}
	,set_weaponFound: function(value) {
		this.mWeaponFound = value;
		return value;
	}
	,get_curAreaCleared: function() {
		return this.mCurArea.get_cleared();
	}
	,reset: function() {
		this.mWasReset = true;
		this.mAvailableSurvivors = [];
		this.mAvailableSurvivors.push(1);
		this.mAvailableSurvivors.push(2);
		this.mAvailableSurvivors.push(3);
		this.mAvailableSurvivors.push(4);
		this.mAvailableSurvivors.push(5);
		this.mAvailableSurvivors.push(6);
		this.mAvailableSurvivors.push(7);
		this.mAvailableSurvivors.push(8);
		this.mAvailableSurvivors.push(9);
		this.mAvailableSurvivors.push(10);
		this.mAvailableSurvivors.push(11);
		this.mAvailableSurvivors.push(12);
		this.mAvailableSurvivors.push(13);
		this.mAvailableSurvivors.push(14);
		this.mAvailableSurvivors.push(15);
		this.mAvailableSurvivors.push(16);
		this.mAvailableSurvivors.push(17);
		this.mAvailableSurvivors.push(18);
		this.mAvailableSurvivors.push(19);
		this.mAvailableSurvivors.push(20);
		this.mAvailableSurvivors.push(21);
		this.mAvailableSurvivors.push(22);
		this.mAvailableSurvivors.push(23);
		this.mAvailableSurvivors.push(24);
		this.mAvailableSurvivors.push(25);
		this.mAvailableSurvivors.push(26);
		this.mAvailableSurvivors.push(27);
		this.mAvailableSurvivors.push(28);
		this.mAvailableSurvivors.push(29);
		this.mAvailableSurvivors.push(30);
		this.mAdditionalAvailableSurvivors = [];
		while(this.mAvailableSurvivors.length > 20) {
			var lRandomIndex = old_helper_UsefulStuff.rnd(0,this.mAvailableSurvivors.length - 1);
			this.mAdditionalAvailableSurvivors.push(this.mAvailableSurvivors[lRandomIndex]);
			this.mAvailableSurvivors.splice(lRandomIndex,1);
		}
		old_helper_UsefulStuff.shuffleObject(this.mAvailableSurvivors);
		this.mAllSurvivorList = [];
		var lSurvivor = null;
		var _g = 0;
		var _g1 = this.mAvailableSurvivors;
		while(_g < _g1.length) {
			var lAvailableSurvivor = _g1[_g];
			++_g;
			lSurvivor = new old_entities_survivors_Survivor();
			old_entities_survivors_SurvivorDescription.defineASurvivor(lAvailableSurvivor,lSurvivor);
			this.mAllSurvivorList.push(lSurvivor);
		}
		lSurvivor = null;
		this.mAdditionalSurvivorList = [];
		lSurvivor = null;
		var _g2 = 0;
		var _g3 = this.mAdditionalAvailableSurvivors;
		while(_g2 < _g3.length) {
			var lAdditionalSurvivor = _g3[_g2];
			++_g2;
			lSurvivor = new old_entities_survivors_Survivor();
			old_entities_survivors_SurvivorDescription.defineASurvivor(lAdditionalSurvivor,lSurvivor);
			this.mAdditionalSurvivorList.push(lSurvivor);
		}
		lSurvivor = null;
		var _g4 = 0;
		while(_g4 < 20) {
			var q = _g4++;
			try {
				lSurvivor = js_Boot.__cast(this.mAllSurvivorList[q] , old_entities_survivors_Survivor);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				lSurvivor = null;
			}
			if(lSurvivor.get_skillFighting() == 2 && lSurvivor.get_skillSearching() >= 1) {
				lSurvivor.set_found(true);
				this.mPlayer.get_survivors().takeSurvivor(lSurvivor,3);
				break;
			}
		}
		var lLength = this.mAllWeaponList.length;
		var lWeapon = null;
		var _g5 = 0;
		var _g6 = lLength;
		while(_g5 < _g6) {
			var j = _g5++;
			lWeapon = this.mAllWeaponList[j];
			lWeapon.set_found(false);
		}
		lWeapon = null;
		this.mAreas = [];
		var lArea = null;
		lArea = new old_entities_map_Area(0,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		lArea = new old_entities_map_Area(1,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		lArea = new old_entities_map_Area(2,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		this.mCurAreaId = 0;
		this.mCurArea = this.mAreas[this.mCurAreaId];
		this.mSearchResults = null;
		this.mSurvivorsLost = null;
		this.mWeaponFound = 0;
	}
	,load: function() {
		this.mWasReset = true;
		this.mAvailableSurvivors = old_singleton_LocalStorage.get_instance().get_survivorsAvailable();
		this.mAdditionalAvailableSurvivors = old_singleton_LocalStorage.get_instance().get_additionalSurvivorsAvailable();
		if(this.mAvailableSurvivors.length == 0) {
			haxe_Log.trace("NEW",{ fileName : "src/old/entities/map/Map.hx", lineNumber : 228, className : "old.entities.map.Map", methodName : "load"});
			this.mAvailableSurvivors = [];
			this.mAvailableSurvivors.push(1);
			this.mAvailableSurvivors.push(2);
			this.mAvailableSurvivors.push(3);
			this.mAvailableSurvivors.push(4);
			this.mAvailableSurvivors.push(5);
			this.mAvailableSurvivors.push(6);
			this.mAvailableSurvivors.push(7);
			this.mAvailableSurvivors.push(8);
			this.mAvailableSurvivors.push(9);
			this.mAvailableSurvivors.push(10);
			this.mAvailableSurvivors.push(11);
			this.mAvailableSurvivors.push(12);
			this.mAvailableSurvivors.push(13);
			this.mAvailableSurvivors.push(14);
			this.mAvailableSurvivors.push(15);
			this.mAvailableSurvivors.push(16);
			this.mAvailableSurvivors.push(17);
			this.mAvailableSurvivors.push(18);
			this.mAvailableSurvivors.push(19);
			this.mAvailableSurvivors.push(20);
			this.mAvailableSurvivors.push(21);
			this.mAvailableSurvivors.push(22);
			this.mAvailableSurvivors.push(23);
			this.mAvailableSurvivors.push(24);
			this.mAvailableSurvivors.push(25);
			this.mAvailableSurvivors.push(26);
			this.mAvailableSurvivors.push(27);
			this.mAvailableSurvivors.push(28);
			this.mAvailableSurvivors.push(29);
			this.mAvailableSurvivors.push(30);
			this.mAdditionalAvailableSurvivors = [];
			while(this.mAvailableSurvivors.length > 20) {
				var lRandomIndex = old_helper_UsefulStuff.rnd(0,this.mAvailableSurvivors.length - 1);
				this.mAdditionalAvailableSurvivors.push(this.mAvailableSurvivors[lRandomIndex]);
				this.mAvailableSurvivors.splice(lRandomIndex,1);
			}
			old_singleton_LocalStorage.get_instance().set_survivorsAvailable(this.mAvailableSurvivors);
		}
		this.mAllSurvivorList = [];
		var lSurvivor = null;
		var _g = 0;
		var _g1 = this.mAvailableSurvivors;
		while(_g < _g1.length) {
			var lAvailableSurvivor = _g1[_g];
			++_g;
			lSurvivor = new old_entities_survivors_Survivor();
			old_entities_survivors_SurvivorDescription.defineASurvivor(lAvailableSurvivor,lSurvivor);
			this.mAllSurvivorList.push(lSurvivor);
		}
		lSurvivor = null;
		this.mAdditionalSurvivorList = [];
		lSurvivor = null;
		var _g2 = 0;
		var _g3 = this.mAdditionalAvailableSurvivors;
		while(_g2 < _g3.length) {
			var lAdditionalSurvivor = _g3[_g2];
			++_g2;
			lSurvivor = new old_entities_survivors_Survivor();
			old_entities_survivors_SurvivorDescription.defineASurvivor(lAdditionalSurvivor,lSurvivor);
			this.mAdditionalSurvivorList.push(lSurvivor);
		}
		lSurvivor = null;
		var lSurvivorsFound = old_singleton_LocalStorage.get_instance().get_survivorsFound();
		var lLength = lSurvivorsFound.length;
		lSurvivor = null;
		var _g4 = 0;
		var _g5 = lLength;
		while(_g4 < _g5) {
			var i = _g4++;
			lSurvivor = this.mAllSurvivorList[i];
			var tmp;
			try {
				tmp = js_Boot.__cast(lSurvivorsFound[i] , Bool);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				tmp = null;
			}
			lSurvivor.set_found(tmp);
		}
		lSurvivor = null;
		var lWeaponsFound = old_singleton_LocalStorage.get_instance().get_weaponsFound();
		lLength = lWeaponsFound.length;
		var lWeapon = null;
		var _g6 = 0;
		var _g7 = lLength;
		while(_g6 < _g7) {
			var j = _g6++;
			lWeapon = this.mAllWeaponList[j];
			lWeapon.set_found(lWeaponsFound[j]);
		}
		lWeapon = null;
		var lAdditionalSurvivorsFound = old_singleton_LocalStorage.get_instance().get_additionalSurvivorsFound();
		lLength = lAdditionalSurvivorsFound.length;
		lSurvivor = null;
		var _g8 = 0;
		var _g9 = lLength;
		while(_g8 < _g9) {
			var i1 = _g8++;
			lSurvivor = this.mAdditionalSurvivorList[i1];
			var tmp1;
			try {
				tmp1 = js_Boot.__cast(lAdditionalSurvivorsFound[i1] , Bool);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				tmp1 = null;
			}
			lSurvivor.set_found(tmp1);
		}
		lSurvivor = null;
		this.mAreas = [];
		var lArea = null;
		lArea = new old_entities_map_Area(0,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		lArea = new old_entities_map_Area(1,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		lArea = new old_entities_map_Area(2,this.mAllWeaponList,this.mAllSurvivorList);
		this.mAreas.push(lArea);
		this.mCurAreaId = old_singleton_LocalStorage.get_instance().get_curArea();
		this.mCurArea = this.mAreas[this.mCurAreaId];
		var lLocationsSearched = old_singleton_LocalStorage.get_instance().get_locationsSearched();
		var lAreaSearched = null;
		var lLength1 = lLocationsSearched.length;
		var lLength2 = 0;
		var lLocation = null;
		lArea = null;
		var _g10 = 0;
		var _g11 = lLength1;
		while(_g10 < _g11) {
			var k = _g10++;
			lArea = this.mAreas[k];
			lAreaSearched = lLocationsSearched[k];
			lLength2 = lAreaSearched.length;
			var _g101 = 0;
			var _g111 = lLength2;
			while(_g101 < _g111) {
				var l = _g101++;
				lLocation = lArea.get_locations()[l];
				lLocation.set_searched(lAreaSearched[l]);
			}
		}
		this.mSearchResults = null;
		this.mSurvivorsLost = null;
		this.mWeaponFound = 0;
	}
	,save: function() {
		var lSurvivorsFound = [];
		var _g = 0;
		var _g1 = this.mAllSurvivorList;
		while(_g < _g1.length) {
			var lSurvivor = _g1[_g];
			++_g;
			lSurvivorsFound.push(lSurvivor.found);
		}
		var lWeaponsFound = [];
		var _g2 = 0;
		var _g3 = this.mAllWeaponList;
		while(_g2 < _g3.length) {
			var lWeapon = _g3[_g2];
			++_g2;
			lWeaponsFound.push(lWeapon.found);
		}
		var lAdditionalSurvivorsFound = [];
		var _g4 = 0;
		var _g5 = this.mAdditionalSurvivorList;
		while(_g4 < _g5.length) {
			var lSurvivor1 = _g5[_g4];
			++_g4;
			lAdditionalSurvivorsFound.push(lSurvivor1.found);
		}
		var lLocationsSearched = [];
		var lAreaSearched = null;
		var _g6 = 0;
		var _g7 = this.mAreas.length;
		while(_g6 < _g7) {
			var i = _g6++;
			lAreaSearched = [];
			var _g61 = 0;
			var _g71 = this.mAreas[i].get_locations().length;
			while(_g61 < _g71) {
				var j = _g61++;
				lAreaSearched.push(this.mAreas[i].get_locations()[j].get_searched());
			}
			lLocationsSearched.push(lAreaSearched);
		}
		old_singleton_LocalStorage.get_instance().set_survivorsAvailable(this.mAvailableSurvivors);
		old_singleton_LocalStorage.get_instance().set_survivorsFound(lSurvivorsFound);
		old_singleton_LocalStorage.get_instance().set_weaponsFound(lWeaponsFound);
		old_singleton_LocalStorage.get_instance().set_additionalSurvivorsAvailable(this.mAdditionalAvailableSurvivors);
		old_singleton_LocalStorage.get_instance().set_additionalSurvivorsFound(lAdditionalSurvivorsFound);
		old_singleton_LocalStorage.get_instance().set_curArea(this.mCurAreaId);
		old_singleton_LocalStorage.get_instance().set_locationsSearched(lLocationsSearched);
	}
	,searchLocation: function(location) {
		this.mSearchResults = null;
		this.mSurvivorsLost = null;
		if(location != null) {
			var lSearchParty = this.mPlayer.get_survivors().getCategory(3);
			var lSearchPartySize = lSearchParty.length;
			var lSurvivor = null;
			var lSearchSkill = 0;
			var lGroupFightSkill = 0;
			var lIndividualFightSkill = 0;
			var i = lSearchParty.length - 1 | 0;
			while(i >= 0) {
				lSurvivor = lSearchParty[i];
				lSearchSkill += lSurvivor.get_skillSearching();
				lGroupFightSkill += lSurvivor.get_skillFighting();
				--i;
			}
			if(this.mPlayer.get_levelNumber() > 5) {
				if(old_helper_UsefulStuff.skillCheck(lGroupFightSkill + 1,lSearchPartySize)) {
					this.mSurvivorsLost = null;
				} else {
					this.mSurvivorsLost = [];
					i = lSearchParty.length - 1;
					while(i >= 0) {
						lSurvivor = lSearchParty[i];
						lIndividualFightSkill = lSurvivor.get_skillFighting();
						if(!old_helper_UsefulStuff.skillCheck(lIndividualFightSkill + 1 + 1,1)) {
							this.mSurvivorsLost.push(lSurvivor);
							this.mPlayer.get_survivors().killSurvivor(lSurvivor);
						}
						--i;
					}
					if(this.mSurvivorsLost.length == 0) {
						this.mSurvivorsLost = null;
					}
				}
			}
			if(lSearchParty.length > 0) {
				this.mSearchResults = location.search(lSearchSkill);
			}
			if(this.mSearchResults != null) {
				var lSurvivors = this.mSearchResults[0];
				var lLength = lSurvivors.length;
				var _g = 0;
				var _g1 = lLength;
				while(_g < _g1) {
					var i1 = _g++;
					this.mPlayer.get_survivors().takeSurvivor(lSurvivors[i1]);
				}
				var lWeapons = this.mSearchResults[1];
				lLength = lWeapons.length;
				if(lLength > 0) {
					this.mWeaponFound++;
				}
				var lGun = null;
				var _g2 = 0;
				var _g3 = lLength;
				while(_g2 < _g3) {
					var i2 = _g2++;
					lGun = new old_entities_equipment_Gun();
					old_entities_equipment_ItemDescription.GetMeAn(lWeapons[i2],lGun);
					this.mPlayer.addToInventory(lGun);
					if(this.mPlayer.get_slot2() == null) {
						this.mPlayer.equipSlot2(lGun);
					}
				}
			}
		}
		return this.mSearchResults;
	}
	,stumbleUpon: function() {
		this.mAdditionalSurvivors = null;
		var lRandomNumber = old_helper_UsefulStuff.rnd(0,2);
		var lLength = 0;
		if(lRandomNumber == 0) {
			this.mAdditionalSurvivors = [];
			var lSurvivor = null;
			lLength = this.mAdditionalSurvivorList.length;
			var _g = 0;
			var _g1 = lLength;
			while(_g < _g1) {
				var i = _g++;
				lSurvivor = this.mAdditionalSurvivorList[i];
				if(!lSurvivor.get_found()) {
					this.mAdditionalSurvivors.push(lSurvivor);
					lSurvivor.set_found(true);
					break;
				}
			}
		}
		if(this.mAdditionalSurvivors != null) {
			lLength = this.mAdditionalSurvivors.length;
			var _g2 = 0;
			var _g11 = lLength;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.mPlayer.get_survivors().takeSurvivor(this.mAdditionalSurvivors[i1]);
			}
		}
	}
	,prevArea: function() {
		this.mCurAreaId--;
		if(this.mCurAreaId < 0) {
			this.mCurAreaId = 0;
		}
		this.mCurArea = this.mAreas[this.mCurAreaId];
	}
	,nextArea: function() {
		this.mCurAreaId++;
		if(this.mCurAreaId > this.mAreas.length - 1) {
			this.mCurAreaId = this.mAreas.length - 1 | 0;
		}
		this.mCurArea = this.mAreas[this.mCurAreaId];
	}
	,switchToNextArea: function() {
		this.mCurAreaCleared = false;
		this.mCurAreaId++;
		if(this.mCurAreaId > this.mAreas.length - 1) {
			this.mCurAreaId = this.mAreas.length - 1 | 0;
		}
		this.mCurArea = this.mAreas[this.mCurAreaId];
	}
	,__class__: old_entities_map_Map
	,__properties__: {get_curAreaCleared:"get_curAreaCleared",set_weaponFound:"set_weaponFound",get_weaponFound:"get_weaponFound",set_wasReset:"set_wasReset",get_wasReset:"get_wasReset",set_additionalSurvivors:"set_additionalSurvivors",get_additionalSurvivors:"get_additionalSurvivors",set_survivorsLost:"set_survivorsLost",get_survivorsLost:"get_survivorsLost",set_searchResults:"set_searchResults",get_searchResults:"get_searchResults",get_areas:"get_areas",get_curArea:"get_curArea",get_curAreaId:"get_curAreaId"}
};
var old_entities_map_Weapon = function(id) {
	this.mGuaranteed = false;
	this.mFound = false;
	this.mLocations = null;
	this.mId = 0;
	this.mId = id;
	this.mLocations = [];
};
$hxClasses["old.entities.map.Weapon"] = old_entities_map_Weapon;
old_entities_map_Weapon.__name__ = "old.entities.map.Weapon";
old_entities_map_Weapon.prototype = {
	mId: null
	,mLocations: null
	,mFound: null
	,mGuaranteed: null
	,get_id: function() {
		return this.mId;
	}
	,set_id: function(value) {
		this.mId = value;
		return value;
	}
	,get_locations: function() {
		return this.mLocations;
	}
	,get_locationsLength: function() {
		return this.mLocations.length;
	}
	,get_found: function() {
		return this.mFound;
	}
	,set_found: function(value) {
		this.mFound = value;
		return value;
	}
	,get_guaranteed: function() {
		return this.mGuaranteed;
	}
	,set_guaranteed: function(value) {
		this.mGuaranteed = value;
		return value;
	}
	,addLocation: function(location) {
		this.mLocations.push(location);
	}
	,removeLocation: function(location) {
		var lIndex = Lambda.indexOf(this.mLocations,location);
		if(lIndex >= 0) {
			this.mLocations.splice(lIndex,1);
		}
	}
	,__class__: old_entities_map_Weapon
	,__properties__: {set_guaranteed:"set_guaranteed",get_guaranteed:"get_guaranteed",set_found:"set_found",get_found:"get_found",get_locationsLength:"get_locationsLength",get_locations:"get_locations",set_id:"set_id",get_id:"get_id"}
};
var old_entities_survivors_Survivor = function() {
	this.mGuaranteed = false;
	this.mDead = false;
	this.mFound = false;
	this.mLocations = null;
	this.mCategory = 0;
	this.mSkillSearching = 0;
	this.mSkillRepairing = 0;
	this.mSkillFighting = 0;
	this.mMainGraphics = null;
	this.mName = "";
	this.mId = 0;
};
$hxClasses["old.entities.survivors.Survivor"] = old_entities_survivors_Survivor;
old_entities_survivors_Survivor.__name__ = "old.entities.survivors.Survivor";
old_entities_survivors_Survivor.prototype = {
	mId: null
	,mName: null
	,mMainGraphics: null
	,mSkillFighting: null
	,mSkillRepairing: null
	,mSkillSearching: null
	,mCategory: null
	,mLocations: null
	,mFound: null
	,mDead: null
	,mGuaranteed: null
	,get_id: function() {
		return this.mId;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		this.mName = value;
		return value;
	}
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_category: function() {
		return this.mCategory;
	}
	,set_category: function(value) {
		this.mCategory = value;
		return value;
	}
	,get_skillFighting: function() {
		return this.mSkillFighting;
	}
	,get_skillRepairing: function() {
		return this.mSkillRepairing;
	}
	,get_skillSearching: function() {
		return this.mSkillSearching;
	}
	,get_locations: function() {
		return this.mLocations;
	}
	,set_locations: function(value) {
		this.mLocations = value;
		return value;
	}
	,get_locationsLength: function() {
		return this.mLocations.length;
	}
	,get_found: function() {
		return this.mFound;
	}
	,set_found: function(value) {
		this.mFound = value;
		return value;
	}
	,get_dead: function() {
		return this.mDead;
	}
	,set_dead: function(value) {
		this.mDead = value;
		return value;
	}
	,get_guaranteed: function() {
		return this.mGuaranteed;
	}
	,set_guaranteed: function(value) {
		this.mGuaranteed = value;
		return value;
	}
	,define: function(id,name,mainGraphics,skillFighting,skillRepairing,skillSearching) {
		this.mId = id;
		this.mName = name;
		this.mMainGraphics = mainGraphics;
		this.mSkillFighting = skillFighting;
		this.mSkillRepairing = skillRepairing;
		this.mSkillSearching = skillSearching;
		this.mLocations = [];
	}
	,addLocation: function(location) {
		this.mLocations.push(location);
	}
	,removeLocation: function(location) {
		var lIndex = Lambda.indexOf(this.mLocations,location);
		if(lIndex >= 0) {
			this.mLocations.splice(lIndex,1);
		}
	}
	,__class__: old_entities_survivors_Survivor
	,__properties__: {set_guaranteed:"set_guaranteed",get_guaranteed:"get_guaranteed",set_dead:"set_dead",get_dead:"get_dead",set_found:"set_found",get_found:"get_found",get_locationsLength:"get_locationsLength",set_locations:"set_locations",get_locations:"get_locations",get_skillSearching:"get_skillSearching",get_skillRepairing:"get_skillRepairing",get_skillFighting:"get_skillFighting",set_category:"set_category",get_category:"get_category",get_mainGraphics:"get_mainGraphics",set_name:"set_name",get_name:"get_name",get_id:"get_id"}
};
var old_entities_survivors_SurvivorDescription = function() {
};
$hxClasses["old.entities.survivors.SurvivorDescription"] = old_entities_survivors_SurvivorDescription;
old_entities_survivors_SurvivorDescription.__name__ = "old.entities.survivors.SurvivorDescription";
old_entities_survivors_SurvivorDescription.defineASurvivor = function(name,survivor) {
	var lSurvivor;
	try {
		lSurvivor = js_Boot.__cast(survivor , old_entities_survivors_Survivor);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		lSurvivor = null;
	}
	switch(name) {
	case 0:
		lSurvivor.define(0,"NONE NONE",null,0,0,0);
		break;
	case 1:
		lSurvivor.define(1,"John Smith1",null,3,1,1);
		break;
	case 2:
		lSurvivor.define(2,"John Smith1",null,2,2,1);
		break;
	case 3:
		lSurvivor.define(3,"John Smith1",null,3,2,0);
		break;
	case 4:
		lSurvivor.define(4,"John Smith1",null,1,2,2);
		break;
	case 5:
		lSurvivor.define(5,"John Smith1",null,2,1,2);
		break;
	case 6:
		lSurvivor.define(6,"John Smith1",null,2,0,3);
		break;
	case 7:
		lSurvivor.define(7,"John Smith1",null,1,3,1);
		break;
	case 8:
		lSurvivor.define(8,"John Smith1",null,2,1,2);
		break;
	case 9:
		lSurvivor.define(9,"John Smith1",null,3,1,1);
		break;
	case 10:
		lSurvivor.define(10,"John Smith1",null,2,2,1);
		break;
	case 11:
		lSurvivor.define(11,"John Smith1",null,3,1,1);
		break;
	case 12:
		lSurvivor.define(12,"John Smith1",null,3,0,2);
		break;
	case 13:
		lSurvivor.define(13,"John Smith1",null,1,2,2);
		break;
	case 14:
		lSurvivor.define(14,"John Smith1",null,2,3,0);
		break;
	case 15:
		lSurvivor.define(15,"John Smith1",null,3,2,0);
		break;
	case 16:
		lSurvivor.define(16,"Jane Smith1",null,2,3,0);
		break;
	case 17:
		lSurvivor.define(17,"Jane Smith1",null,1,2,2);
		break;
	case 18:
		lSurvivor.define(18,"Jane Smith1",null,2,2,1);
		break;
	case 19:
		lSurvivor.define(19,"Jane Smith1",null,1,1,3);
		break;
	case 20:
		lSurvivor.define(20,"Jane Smith1",null,2,2,1);
		break;
	case 21:
		lSurvivor.define(21,"Jane Smith1",null,0,3,2);
		break;
	case 22:
		lSurvivor.define(22,"Jane Smith1",null,2,1,2);
		break;
	case 23:
		lSurvivor.define(23,"Jane Smith1",null,3,0,2);
		break;
	case 24:
		lSurvivor.define(24,"Jane Smith1",null,0,2,3);
		break;
	case 25:
		lSurvivor.define(25,"Jane Smith1",null,1,1,3);
		break;
	case 26:
		lSurvivor.define(26,"Jane Smith1",null,3,1,1);
		break;
	case 27:
		lSurvivor.define(27,"Jane Smith1",null,3,2,0);
		break;
	case 28:
		lSurvivor.define(28,"Jane Smith1",null,1,2,2);
		break;
	case 29:
		lSurvivor.define(29,"Jane Smith1",null,1,1,3);
		break;
	case 30:
		lSurvivor.define(30,"Jane Smith1",null,0,2,3);
		break;
	}
};
old_entities_survivors_SurvivorDescription.prototype = {
	__class__: old_entities_survivors_SurvivorDescription
};
var old_entities_survivors_Survivors = function() {
	this.mLimits = null;
	this.mCategories = null;
	this.mUnasignedBackup = null;
	this.mSearchPartyBackup = null;
	this.mSurvivorsLost = 0;
	this.mAllSurvivors = null;
	this.mFreeSurvivors = 0;
	this.mTotalSurvivors = 0;
	this.mAllSurvivors = [];
	this.mSurvivorsLost = 0;
	this.mUnasignedBackup = [];
	this.mSearchPartyBackup = [];
	this.mLimits = [0,0,0,0];
	this.mLimits[0] = 20;
	this.mLimits[1] = 5;
	this.mLimits[2] = 5;
	this.mLimits[3] = 5;
};
$hxClasses["old.entities.survivors.Survivors"] = old_entities_survivors_Survivors;
old_entities_survivors_Survivors.__name__ = "old.entities.survivors.Survivors";
old_entities_survivors_Survivors.prototype = {
	mTotalSurvivors: null
	,mFreeSurvivors: null
	,mAllSurvivors: null
	,mSurvivorsLost: null
	,mSearchPartyBackup: null
	,mUnasignedBackup: null
	,mCategories: null
	,mLimits: null
	,get_totalSurvivors: function() {
		return this.mTotalSurvivors;
	}
	,get_freeSurvivors: function() {
		return this.mFreeSurvivors;
	}
	,get_allSurvivors: function() {
		return this.mAllSurvivors;
	}
	,get_survivorsLost: function() {
		return this.mSurvivorsLost;
	}
	,getTotalFightSkill: function(category) {
		var lCategory = this.mCategories[category];
		var lLength = lCategory.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = lCategory[i];
			lSkill += lSurvivor.get_skillFighting();
		}
		return lSkill;
	}
	,getTotalRepairSkill: function(category) {
		var lCategory = this.mCategories[category];
		var lLength = lCategory.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = lCategory[i];
			lSkill += lSurvivor.get_skillRepairing();
		}
		return lSkill;
	}
	,getTotalSearchSkill: function(category) {
		var lCategory = this.mCategories[category];
		var lLength = lCategory.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = lCategory[i];
			lSkill += lSurvivor.get_skillSearching();
		}
		return lSkill;
	}
	,getTopFightSkill: function() {
		var lArray = [];
		var lLength = this.mAllSurvivors.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = this.mAllSurvivors[i];
			lArray.push(lSurvivor.get_skillFighting());
		}
		lArray.sort($bind(this,this.sortNumeric));
		lLength = lLength < 5 ? lLength : 5;
		var _g2 = 0;
		var _g3 = lLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lSkill += lArray[i1];
		}
		return lSkill;
	}
	,getTopRepairSkill: function() {
		var lArray = [];
		var lLength = this.mAllSurvivors.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = this.mAllSurvivors[i];
			lArray.push(lSurvivor.get_skillRepairing());
		}
		lArray.sort($bind(this,this.sortNumeric));
		lLength = lLength < 5 ? lLength : 5;
		var _g2 = 0;
		var _g3 = lLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lSkill += lArray[i1];
		}
		return lSkill;
	}
	,sortNumeric: function(a,b) {
		if(a > b) {
			return 1;
		} else if(a < b) {
			return -1;
		} else {
			return 0;
		}
	}
	,getTopSearchSkill: function() {
		var lArray = [];
		var lLength = this.mAllSurvivors.length;
		var lSurvivor = null;
		var lSkill = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = this.mAllSurvivors[i];
			lArray.push(lSurvivor.get_skillSearching());
		}
		lArray.sort($bind(this,this.sortNumeric));
		lLength = lLength < 5 ? lLength : 5;
		var _g2 = 0;
		var _g3 = lLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lSkill += lArray[i1];
		}
		return lSkill;
	}
	,reset: function() {
		this.mAllSurvivors = [];
		this.mSurvivorsLost = 0;
		this.mUnasignedBackup = [];
		this.mSearchPartyBackup = [];
		this.mCategories = [0,0,0,0];
		this.mCategories[0] = [];
		this.mCategories[1] = [];
		this.mCategories[2] = [];
		this.mCategories[3] = [];
		this.save();
	}
	,load: function() {
		this.mAllSurvivors = [];
		this.mCategories = [0,0,0,0];
		this.mCategories[0] = [];
		this.mCategories[1] = [];
		this.mCategories[2] = [];
		this.mCategories[3] = [];
		var lSurvivor = null;
		var lArray = old_singleton_LocalStorage.get_instance().get_survivorCategories();
		var lLength1 = lArray.length;
		var lLength2 = 0;
		var _g = 0;
		var _g1 = lLength1;
		while(_g < _g1) {
			var i = _g++;
			var lLength21;
			try {
				lLength21 = js_Boot.__cast(lArray[i] , Array);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				lLength21 = null;
			}
			lLength2 = lLength21.length;
			var _g2 = 0;
			var _g11 = lLength2;
			while(_g2 < _g11) {
				var j = _g2++;
				lSurvivor = new old_entities_survivors_Survivor();
				old_entities_survivors_SurvivorDescription.defineASurvivor(lArray[i][j],lSurvivor);
				lSurvivor.set_category(i);
				this.mCategories[i].push(lSurvivor);
				this.mAllSurvivors.push(lSurvivor);
			}
		}
		this.mSurvivorsLost = old_singleton_LocalStorage.get_instance().get_survivorsLost();
	}
	,save: function() {
		var lArray = [];
		lArray[0] = [];
		lArray[1] = [];
		lArray[2] = [];
		lArray[3] = [];
		var lSurvivor = null;
		var lLength1 = this.mCategories.length;
		var lLength2 = 0;
		var _g = 0;
		var _g1 = lLength1;
		while(_g < _g1) {
			var i = _g++;
			lLength2 = (js_Boot.__cast(this.mCategories[i] , Array)).length;
			var _g2 = 0;
			var _g11 = lLength2;
			while(_g2 < _g11) {
				var j = _g2++;
				try {
					lSurvivor = js_Boot.__cast(this.mCategories[i][j] , old_entities_survivors_Survivor);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					lSurvivor = null;
				}
				lArray[i].push(lSurvivor.get_id());
			}
		}
		old_singleton_LocalStorage.get_instance().set_survivorCategories(lArray);
		old_singleton_LocalStorage.get_instance().set_survivorsLost(this.mSurvivorsLost);
	}
	,assignUnassigned: function() {
		var lUnassigned = this.mCategories[0];
		var lShooting = this.mCategories[1];
		var lShootingLimit = this.mLimits[1];
		var lRepairing = this.mCategories[2];
		var lRepairingLimit = this.mLimits[2];
		var lLength = lUnassigned.length;
		var i = lLength - 1 | 0;
		while(i >= 0) {
			if(lShooting.length < lShootingLimit) {
				this.mUnasignedBackup.push(lUnassigned[i]);
				this.changeCategory(lUnassigned[i],0,1);
			} else if(lRepairing.length < lRepairingLimit) {
				this.mUnasignedBackup.push(lUnassigned[i]);
				this.changeCategory(lUnassigned[i],0,2);
			}
			--i;
		}
	}
	,unassignUnassigned: function() {
		while(this.mUnasignedBackup.length > 0) {
			this.changeToCategory(this.mUnasignedBackup[this.mUnasignedBackup.length - 1],0);
			this.mUnasignedBackup.splice(this.mUnasignedBackup.length - 1,1);
		}
	}
	,assignSearchParty: function() {
		var lSearchParty = this.mCategories[3];
		var lShooting = this.mCategories[1];
		var lShootingLimit = this.mLimits[1];
		var lRepairing = this.mCategories[2];
		var lRepairingLimit = this.mLimits[2];
		var lLength = lSearchParty.length;
		var i = lLength - 1 | 0;
		while(i >= 0) {
			if(lShooting.length < lShootingLimit) {
				this.mSearchPartyBackup.push(lSearchParty[i]);
				this.changeCategory(lSearchParty[i],3,1);
			} else if(lRepairing.length < lRepairingLimit) {
				this.mSearchPartyBackup.push(lSearchParty[i]);
				this.changeCategory(lSearchParty[i],3,2);
			}
			--i;
		}
	}
	,unassignSearchParty: function() {
		while(this.mSearchPartyBackup.length > 0) {
			this.changeToCategory(this.mSearchPartyBackup[this.mSearchPartyBackup.length - 1],3);
			this.mSearchPartyBackup.splice(this.mSearchPartyBackup.length - 1,1);
		}
	}
	,takeSurvivor: function(survivor,category) {
		if(category == null) {
			category = 0;
		}
		this.mFreeSurvivors++;
		(js_Boot.__cast(this.mCategories[category] , Array)).push(survivor);
		survivor.set_category(category);
		this.mAllSurvivors.push(survivor);
		return survivor.get_id();
	}
	,findASpecificSurvivor: function(id) {
		var lSurvivor = new old_entities_survivors_Survivor();
		old_entities_survivors_SurvivorDescription.defineASurvivor(id,lSurvivor);
		return this.takeSurvivor(lSurvivor);
	}
	,addToCategory: function(survivor,categoryId) {
		if(this.mFreeSurvivors > 0 && (js_Boot.__cast(this.mCategories[categoryId] , Array)).length < js_Boot.__cast(this.mLimits[categoryId] , Int)) {
			var lIndex = (js_Boot.__cast(this.mCategories[0] , Array)).indexOf(survivor);
			if(lIndex >= 0) {
				survivor.set_category(categoryId);
				var tmp;
				try {
					tmp = js_Boot.__cast(this.mCategories[0] , Array);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					tmp = null;
				}
				tmp.splice(lIndex,1);
				var tmp1;
				try {
					tmp1 = js_Boot.__cast(this.mCategories[categoryId] , Array);
				} catch( e2 ) {
					haxe_CallStack.lastException = e2;
					var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
					tmp1 = null;
				}
				tmp1.push(survivor);
				this.mFreeSurvivors--;
				return true;
			}
		}
		return false;
	}
	,removeFromCategory: function(survivor,categoryId) {
		var tmp;
		try {
			tmp = js_Boot.__cast(this.mCategories[categoryId] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp = null;
		}
		if(tmp.length > 0) {
			var lIndex;
			try {
				lIndex = js_Boot.__cast(this.mCategories[categoryId] , Array);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				lIndex = null;
			}
			var lIndex1 = lIndex.indexOf(survivor);
			if(lIndex1 >= 0) {
				survivor.set_category(0);
				var tmp1;
				try {
					tmp1 = js_Boot.__cast(this.mCategories[categoryId] , Array);
				} catch( e4 ) {
					haxe_CallStack.lastException = e4;
					var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					tmp1 = null;
				}
				tmp1.splice(lIndex1,1);
				var tmp2;
				try {
					tmp2 = js_Boot.__cast(this.mCategories[0] , Array);
				} catch( e6 ) {
					haxe_CallStack.lastException = e6;
					var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					tmp2 = null;
				}
				tmp2.push(survivor);
				this.mFreeSurvivors++;
				return true;
			}
		}
		return false;
	}
	,changeCategory: function(survivor,category1Id,category2Id) {
		var tmp;
		var tmp1;
		try {
			tmp1 = js_Boot.__cast(this.mCategories[category1Id] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp1 = null;
		}
		if(tmp1.length > 0) {
			var tmp2;
			try {
				tmp2 = js_Boot.__cast(this.mCategories[category2Id] , Array);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				tmp2 = null;
			}
			tmp = tmp2.length < this.mLimits[category2Id];
		} else {
			tmp = false;
		}
		if(tmp) {
			var lIndex;
			try {
				lIndex = js_Boot.__cast(this.mCategories[category1Id] , Array);
			} catch( e4 ) {
				haxe_CallStack.lastException = e4;
				var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
				lIndex = null;
			}
			var lIndex1 = lIndex.indexOf(survivor);
			if(lIndex1 >= 0) {
				var tmp3;
				try {
					tmp3 = js_Boot.__cast(this.mCategories[category1Id] , Array);
				} catch( e6 ) {
					haxe_CallStack.lastException = e6;
					var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					tmp3 = null;
				}
				tmp3.splice(lIndex1,1);
				survivor.set_category(category2Id);
				var tmp4;
				try {
					tmp4 = js_Boot.__cast(this.mCategories[category2Id] , Array);
				} catch( e8 ) {
					haxe_CallStack.lastException = e8;
					var e9 = ((e8) instanceof js__$Boot_HaxeError) ? e8.val : e8;
					tmp4 = null;
				}
				tmp4.push(survivor);
				return true;
			}
		}
		return false;
	}
	,changeToCategory: function(survivor,categoryId) {
		var tmp;
		try {
			tmp = js_Boot.__cast(this.mCategories[categoryId] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp = null;
		}
		if(tmp.length < this.mLimits[categoryId]) {
			var lCurCategory = survivor.get_category();
			var lIndex;
			try {
				lIndex = js_Boot.__cast(this.mCategories[lCurCategory] , Array);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				lIndex = null;
			}
			var lIndex1 = lIndex.indexOf(survivor);
			if(lIndex1 >= 0) {
				var tmp1;
				try {
					tmp1 = js_Boot.__cast(this.mCategories[lCurCategory] , Array);
				} catch( e4 ) {
					haxe_CallStack.lastException = e4;
					var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					tmp1 = null;
				}
				tmp1.splice(lIndex1,1);
				survivor.set_category(categoryId);
				var tmp2;
				try {
					tmp2 = js_Boot.__cast(this.mCategories[categoryId] , Array);
				} catch( e6 ) {
					haxe_CallStack.lastException = e6;
					var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					tmp2 = null;
				}
				tmp2.push(survivor);
				return true;
			}
		}
		return false;
	}
	,killFromCategory: function(survivor,categoryId) {
		var tmp;
		try {
			tmp = js_Boot.__cast(this.mCategories[categoryId] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp = null;
		}
		if(tmp.length > 0) {
			var lIndex;
			try {
				lIndex = js_Boot.__cast(this.mCategories[categoryId] , Array);
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				lIndex = null;
			}
			var lIndex1 = lIndex.indexOf(survivor);
			if(lIndex1 >= 0) {
				var tmp1;
				try {
					tmp1 = js_Boot.__cast(this.mCategories[categoryId] , Array);
				} catch( e4 ) {
					haxe_CallStack.lastException = e4;
					var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					tmp1 = null;
				}
				tmp1.splice(lIndex1,1);
				survivor.set_category(0);
				survivor.set_dead(true);
				this.mSurvivorsLost++;
				var lAllSurvivorsIndex = Lambda.indexOf(this.mAllSurvivors,survivor);
				if(lAllSurvivorsIndex >= 0) {
					this.mAllSurvivors.splice(lIndex1,1);
				}
			}
		}
	}
	,killSurvivor: function(survivor) {
		var _g = 0;
		var _g1 = this.mCategories;
		while(_g < _g1.length) {
			var lCategory = _g1[_g];
			++_g;
			if(lCategory.length > 0) {
				var lIndex = lCategory.indexOf(survivor);
				if(lIndex >= 0) {
					lCategory.splice(lIndex,1);
					survivor.set_category(0);
					survivor.set_dead(true);
					this.mSurvivorsLost++;
					var lAllSurvivorsIndex = Lambda.indexOf(this.mAllSurvivors,survivor);
					if(lAllSurvivorsIndex >= 0) {
						this.mAllSurvivors.splice(lIndex,1);
					}
					return;
				}
			}
		}
	}
	,getSurvivor: function(id,category) {
		try {
			return js_Boot.__cast(this.mCategories[category][id] , old_entities_survivors_Survivor);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	,getCategory: function(category) {
		try {
			return js_Boot.__cast(this.mCategories[category] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	,getLimit: function(category) {
		return this.mLimits[category] | 0;
	}
	,isLimitReached: function(category) {
		var tmp;
		try {
			tmp = js_Boot.__cast(this.mCategories[category] , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp = null;
		}
		if(tmp.length == this.mLimits[category]) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: old_entities_survivors_Survivors
	,__properties__: {get_survivorsLost:"get_survivorsLost",get_allSurvivors:"get_allSurvivors",get_freeSurvivors:"get_freeSurvivors",get_totalSurvivors:"get_totalSurvivors"}
};
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__init: function() {
		this.target = null;
		this.currentTarget = null;
		this.bubbles = false;
		this.cancelable = false;
		this.eventPhase = 2;
		this.__isCanceled = false;
		this.__isCanceledNow = false;
		this.__preventDefault = false;
	}
	,__class__: openfl_events_Event
};
var old_events_BulletEvent = function(type,bullet,x,y,maxRadius,minRadius) {
	if(minRadius == null) {
		minRadius = 100;
	}
	if(maxRadius == null) {
		maxRadius = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.minRadius = 0;
	this.maxRadius = 0;
	this.y = 0;
	this.x = 0;
	openfl_events_Event.call(this,type);
	this.bullet = bullet;
	this.x = x;
	this.y = y;
	this.maxRadius = maxRadius;
	this.minRadius = minRadius;
};
$hxClasses["old.events.BulletEvent"] = old_events_BulletEvent;
old_events_BulletEvent.__name__ = "old.events.BulletEvent";
old_events_BulletEvent.__super__ = openfl_events_Event;
old_events_BulletEvent.prototype = $extend(openfl_events_Event.prototype,{
	bullet: null
	,x: null
	,y: null
	,maxRadius: null
	,minRadius: null
	,__class__: old_events_BulletEvent
});
var old_events_CameraEvent = function(type,distance) {
	openfl_events_Event.call(this,type);
	this.distance = distance;
};
$hxClasses["old.events.CameraEvent"] = old_events_CameraEvent;
old_events_CameraEvent.__name__ = "old.events.CameraEvent";
old_events_CameraEvent.__super__ = openfl_events_Event;
old_events_CameraEvent.prototype = $extend(openfl_events_Event.prototype,{
	distance: null
	,__class__: old_events_CameraEvent
});
var old_events_ConfigEvent = function(type,boolValue,intValue,stringValue) {
	if(stringValue == null) {
		stringValue = "";
	}
	if(intValue == null) {
		intValue = 0;
	}
	if(boolValue == null) {
		boolValue = false;
	}
	this.stringValue = "";
	this.intValue = 0;
	this.boolValue = false;
	openfl_events_Event.call(this,type);
	this.boolValue = boolValue;
	this.intValue = intValue;
	this.stringValue = stringValue;
};
$hxClasses["old.events.ConfigEvent"] = old_events_ConfigEvent;
old_events_ConfigEvent.__name__ = "old.events.ConfigEvent";
old_events_ConfigEvent.__super__ = openfl_events_Event;
old_events_ConfigEvent.prototype = $extend(openfl_events_Event.prototype,{
	boolValue: null
	,intValue: null
	,stringValue: null
	,__class__: old_events_ConfigEvent
});
var old_events_EffectEvent = function(type,x,y,direction,alpha,frame,depth) {
	if(depth == null) {
		depth = 0;
	}
	if(frame == null) {
		frame = 1;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(direction == null) {
		direction = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.depth = 0;
	this.frame = 1;
	this.alpha = 1;
	this.direction = 0;
	this.y = 0;
	this.x = 0;
	openfl_events_Event.call(this,type);
	this.x = x;
	this.y = y;
	this.direction = direction;
	this.alpha = alpha;
	this.frame = frame;
	this.depth = depth;
};
$hxClasses["old.events.EffectEvent"] = old_events_EffectEvent;
old_events_EffectEvent.__name__ = "old.events.EffectEvent";
old_events_EffectEvent.__super__ = openfl_events_Event;
old_events_EffectEvent.prototype = $extend(openfl_events_Event.prototype,{
	x: null
	,y: null
	,direction: null
	,alpha: null
	,frame: null
	,depth: null
	,__class__: old_events_EffectEvent
});
var old_events_EnemyEvent = function(type,enemy,gun,hitZone,tracer,byFriendly) {
	if(byFriendly == null) {
		byFriendly = false;
	}
	if(tracer == null) {
		tracer = false;
	}
	if(hitZone == null) {
		hitZone = 0;
	}
	this.tracer = false;
	openfl_events_Event.call(this,type);
	this.enemy = enemy;
	this.gun = gun;
	this.hitZone = hitZone;
	this.tracer = tracer;
	this.byFriendly = byFriendly;
};
$hxClasses["old.events.EnemyEvent"] = old_events_EnemyEvent;
old_events_EnemyEvent.__name__ = "old.events.EnemyEvent";
old_events_EnemyEvent.__super__ = openfl_events_Event;
old_events_EnemyEvent.prototype = $extend(openfl_events_Event.prototype,{
	tracer: null
	,hitZone: null
	,gun: null
	,enemy: null
	,byFriendly: null
	,__class__: old_events_EnemyEvent
});
var old_events_EventManager = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["old.events.EventManager"] = old_events_EventManager;
old_events_EventManager.__name__ = "old.events.EventManager";
old_events_EventManager.__properties__ = {get_instance:"get_instance"};
old_events_EventManager.get_instance = function() {
	if(old_events_EventManager.mInstance == null) {
		old_events_EventManager.mInstance = new old_events_EventManager();
	}
	return old_events_EventManager.mInstance;
};
old_events_EventManager.__super__ = openfl_events_EventDispatcher;
old_events_EventManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: old_events_EventManager
});
var old_events_FriendlyEvent = function(type,friendly,healAmount,tracerX,tracerY,tracerDestX,tracerDestY,tracerAngle,enemy) {
	if(tracerAngle == null) {
		tracerAngle = 0;
	}
	if(tracerDestY == null) {
		tracerDestY = 0;
	}
	if(tracerDestX == null) {
		tracerDestX = 0;
	}
	if(tracerY == null) {
		tracerY = 0;
	}
	if(tracerX == null) {
		tracerX = 0;
	}
	if(healAmount == null) {
		healAmount = 0;
	}
	this.healAmount = 0;
	this.enemy = null;
	this.tracerAngle = 0;
	this.tracerDestY = 0;
	this.tracerDestX = 0;
	this.tracerY = 0;
	this.tracerX = 0;
	openfl_events_Event.call(this,type);
	this.friendly = friendly;
	this.healAmount = healAmount;
	this.tracerX = tracerX;
	this.tracerY = tracerY;
	this.tracerDestX = tracerDestX;
	this.tracerDestY = tracerDestY;
	this.tracerAngle = tracerAngle;
	this.enemy = enemy;
};
$hxClasses["old.events.FriendlyEvent"] = old_events_FriendlyEvent;
old_events_FriendlyEvent.__name__ = "old.events.FriendlyEvent";
old_events_FriendlyEvent.__super__ = openfl_events_Event;
old_events_FriendlyEvent.prototype = $extend(openfl_events_Event.prototype,{
	tracerX: null
	,tracerY: null
	,tracerDestX: null
	,tracerDestY: null
	,tracerAngle: null
	,enemy: null
	,friendly: null
	,healAmount: null
	,__class__: old_events_FriendlyEvent
});
var old_events_GameEvent = function(type,levelId) {
	if(levelId == null) {
		levelId = 0;
	}
	this.levelId = 0;
	openfl_events_Event.call(this,type);
	this.levelId = levelId;
};
$hxClasses["old.events.GameEvent"] = old_events_GameEvent;
old_events_GameEvent.__name__ = "old.events.GameEvent";
old_events_GameEvent.__super__ = openfl_events_Event;
old_events_GameEvent.prototype = $extend(openfl_events_Event.prototype,{
	levelId: null
	,__class__: old_events_GameEvent
});
var old_events_GlobalKeyboardEvent = function(type,bubbles,cancelable,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(keyLocation == null) {
		keyLocation = 0;
	}
	if(keyCode == null) {
		keyCode = 0;
	}
	if(charCode == null) {
		charCode = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.set_charCode(charCode);
	this.set_keyCode(keyCode);
	this.set_keyLocation(keyLocation);
	this.set_ctrlKey(ctrlKey);
	this.set_altKey(altKey);
	this.set_shiftKey(shiftKey);
};
$hxClasses["old.events.GlobalKeyboardEvent"] = old_events_GlobalKeyboardEvent;
old_events_GlobalKeyboardEvent.__name__ = "old.events.GlobalKeyboardEvent";
old_events_GlobalKeyboardEvent.__super__ = openfl_events_Event;
old_events_GlobalKeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	mAltKey: null
	,get_altKey: function() {
		return this.mAltKey;
	}
	,set_altKey: function(value) {
		this.mAltKey = value;
		return value;
	}
	,mCharCode: null
	,get_charCode: function() {
		return this.mCharCode;
	}
	,set_charCode: function(value) {
		this.mCharCode = value;
		return value;
	}
	,mCtrlKey: null
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,set_ctrlKey: function(value) {
		this.mCtrlKey = value;
		return value;
	}
	,mKeyCode: null
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,set_keyCode: function(value) {
		this.mKeyCode = value;
		return value;
	}
	,mKeyLocation: null
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,set_keyLocation: function(value) {
		this.mKeyLocation = value;
		return value;
	}
	,mShiftKey: null
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,set_shiftKey: function(value) {
		this.mShiftKey = value;
		return value;
	}
	,clone: function() {
		return new old_events_GlobalKeyboardEvent(this.type,this.bubbles,this.cancelable,this.get_charCode(),this.get_keyCode(),this.get_keyLocation(),this.get_ctrlKey(),this.get_altKey(),this.get_shiftKey());
	}
	,__class__: old_events_GlobalKeyboardEvent
	,__properties__: {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_keyLocation:"set_keyLocation",get_keyLocation:"get_keyLocation",set_keyCode:"set_keyCode",get_keyCode:"get_keyCode",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_charCode:"set_charCode",get_charCode:"get_charCode",set_altKey:"set_altKey",get_altKey:"get_altKey"}
});
var old_events_GlobalMouseEvent = function(type,bubbles,cancelable,localX,localY,stageX,stageY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta) {
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(stageY == null) {
		stageY = 0;
	}
	if(stageX == null) {
		stageX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.set_localX(localX);
	this.set_localY(localY);
	this.mStageX = stageX;
	this.mStageY = stageY;
	this.set_relatedObject(relatedObject);
	this.set_ctrlKey(ctrlKey);
	this.set_altKey(altKey);
	this.set_shiftKey(shiftKey);
	this.set_buttonDown(buttonDown);
	this.set_delta(delta);
};
$hxClasses["old.events.GlobalMouseEvent"] = old_events_GlobalMouseEvent;
old_events_GlobalMouseEvent.__name__ = "old.events.GlobalMouseEvent";
old_events_GlobalMouseEvent.__super__ = openfl_events_Event;
old_events_GlobalMouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	mAltKey: null
	,get_altKey: function() {
		return this.mAltKey;
	}
	,set_altKey: function(value) {
		this.mAltKey = value;
		return value;
	}
	,mButtonDown: null
	,get_buttonDown: function() {
		return this.mButtonDown;
	}
	,set_buttonDown: function(value) {
		this.mButtonDown = value;
		return value;
	}
	,mCtrlKey: null
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,set_ctrlKey: function(value) {
		this.mCtrlKey = value;
		return value;
	}
	,mDelta: null
	,get_delta: function() {
		return this.mDelta;
	}
	,set_delta: function(value) {
		this.mDelta = value;
		return value;
	}
	,mLocalX: null
	,get_localX: function() {
		return this.mLocalX;
	}
	,set_localX: function(value) {
		this.mLocalX = value;
		return value;
	}
	,mLocalY: null
	,get_localY: function() {
		return this.mLocalY;
	}
	,set_localY: function(value) {
		this.mLocalY = value;
		return value;
	}
	,mRelatedObject: null
	,get_relatedObject: function() {
		return this.mRelatedObject;
	}
	,set_relatedObject: function(value) {
		this.mRelatedObject = value;
		return value;
	}
	,mShiftKey: null
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,set_shiftKey: function(value) {
		this.mShiftKey = value;
		return value;
	}
	,mStageX: null
	,get_stageX: function() {
		return this.mStageX;
	}
	,mStageY: null
	,get_stageY: function() {
		return this.mStageY;
	}
	,clone: function() {
		return new old_events_GlobalMouseEvent(this.type,this.bubbles,this.cancelable,this.get_localX(),this.get_localY(),this.get_stageX(),this.get_stageY(),this.get_relatedObject(),this.get_ctrlKey(),this.get_altKey(),this.get_shiftKey(),this.get_buttonDown(),this.get_delta());
	}
	,__class__: old_events_GlobalMouseEvent
	,__properties__: {get_stageY:"get_stageY",get_stageX:"get_stageX",set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_relatedObject:"set_relatedObject",get_relatedObject:"get_relatedObject",set_localY:"set_localY",get_localY:"get_localY",set_localX:"set_localX",get_localX:"get_localX",set_delta:"set_delta",get_delta:"get_delta",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_buttonDown:"set_buttonDown",get_buttonDown:"get_buttonDown",set_altKey:"set_altKey",get_altKey:"get_altKey"}
});
var old_events_GunEvent = function(type,gun) {
	openfl_events_Event.call(this,type);
	this.gun = gun;
};
$hxClasses["old.events.GunEvent"] = old_events_GunEvent;
old_events_GunEvent.__name__ = "old.events.GunEvent";
old_events_GunEvent.__super__ = openfl_events_Event;
old_events_GunEvent.prototype = $extend(openfl_events_Event.prototype,{
	gun: null
	,__class__: old_events_GunEvent
});
var old_events_LevelEvent = function(type) {
	openfl_events_Event.call(this,type);
};
$hxClasses["old.events.LevelEvent"] = old_events_LevelEvent;
old_events_LevelEvent.__name__ = "old.events.LevelEvent";
old_events_LevelEvent.__super__ = openfl_events_Event;
old_events_LevelEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: old_events_LevelEvent
});
var old_events_PshikEvent = function(type,x,y,angle,frame,depth) {
	openfl_events_Event.call(this,type);
	this.x = x;
	this.y = y;
	this.angle = angle;
	this.frame = frame;
	this.depth = depth;
};
$hxClasses["old.events.PshikEvent"] = old_events_PshikEvent;
old_events_PshikEvent.__name__ = "old.events.PshikEvent";
old_events_PshikEvent.__super__ = openfl_events_Event;
old_events_PshikEvent.prototype = $extend(openfl_events_Event.prototype,{
	x: null
	,y: null
	,angle: null
	,frame: null
	,depth: null
	,__class__: old_events_PshikEvent
});
var old_events_UIEvent = function(type,nextState) {
	this.nextState = 0;
	openfl_events_Event.call(this,type);
	this.nextState = nextState;
};
$hxClasses["old.events.UIEvent"] = old_events_UIEvent;
old_events_UIEvent.__name__ = "old.events.UIEvent";
old_events_UIEvent.__super__ = openfl_events_Event;
old_events_UIEvent.prototype = $extend(openfl_events_Event.prototype,{
	nextState: null
	,__class__: old_events_UIEvent
});
var old_helper_AllKeyboard = function() {
};
$hxClasses["old.helper.AllKeyboard"] = old_helper_AllKeyboard;
old_helper_AllKeyboard.__name__ = "old.helper.AllKeyboard";
old_helper_AllKeyboard.prototype = {
	__class__: old_helper_AllKeyboard
};
var old_helper_SoundObject = function(snd,volume,pan) {
	if(pan == null) {
		pan = 0;
	}
	if(volume == null) {
		volume = 1;
	}
	this.mChannelsUsed = -1;
	this.mIsPlaying = false;
	this.mSound = "";
	this.mSound = snd;
};
$hxClasses["old.helper.SoundObject"] = old_helper_SoundObject;
old_helper_SoundObject.__name__ = "old.helper.SoundObject";
old_helper_SoundObject.prototype = {
	mSound: null
	,mIsPlaying: null
	,mChannelsUsed: null
	,get_isPlaying: function() {
		if(this.mChannelsUsed >= 0) {
			return true;
		} else {
			return false;
		}
	}
	,play: function(startTime,loops) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		if(this.mSound == "MusicSnd") {
			var tmp = old_MainOld.getInstance().context.music;
			var key = this.mSound;
			var _this = SoundConst.sounds_string_;
			tmp.Play(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		} else {
			var tmp1 = old_MainOld.getInstance().context.game_snd;
			var key1 = this.mSound;
			var _this1 = SoundConst.sounds_string_;
			this.mChannelsUsed = tmp1.Play(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		}
	}
	,stop: function() {
		haxe_Log.trace("stop " + this.mSound,{ fileName : "src/old/helper/SoundObject.hx", lineNumber : 52, className : "old.helper.SoundObject", methodName : "stop"});
		this.mChannelsUsed = -1;
		this.mIsPlaying = false;
	}
	,__class__: old_helper_SoundObject
	,__properties__: {get_isPlaying:"get_isPlaying"}
};
var old_helper_Tweener = function(target,endFunction) {
	this.mEndFunction = null;
	this.mRunning = false;
	this.isf_can_be_running = false;
	this.mCurrentTweenSet = "";
	this.mTweenSetList = new haxe_ds_StringMap();
	this.mTarget = null;
	this.mTarget = target;
	this.mEndFunction = endFunction;
	this.mTweenSetList = new haxe_ds_StringMap();
	this.mRunning = false;
};
$hxClasses["old.helper.Tweener"] = old_helper_Tweener;
old_helper_Tweener.__name__ = "old.helper.Tweener";
old_helper_Tweener.prototype = {
	mTarget: null
	,mTweenSetList: null
	,mCurrentTweenSet: null
	,isf_can_be_running: null
	,mRunning: null
	,mEndFunction: null
	,get_target: function() {
		return this.mTarget;
	}
	,get_curTweenSet: function() {
		return this.mCurrentTweenSet;
	}
	,get_running: function() {
		return this.mRunning;
	}
	,addTween: function(tweenSet,property,minValue,maxValue,time,easing,delay,linkedProperty) {
		if(delay == null) {
			delay = 0;
		}
		if(easing == null) {
			easing = 0;
		}
		if(time == null) {
			time = 1;
		}
		if(maxValue == null) {
			maxValue = 1;
		}
		if(minValue == null) {
			minValue = 0;
		}
		if(property == null) {
			property = "x";
		}
		var lNewTween = new old_helper_Tween(this.mTarget,property,minValue,maxValue,time,easing,delay,linkedProperty);
		var _this = this.mTweenSetList;
		if(!(__map_reserved[tweenSet] != null ? _this.existsReserved(tweenSet) : _this.h.hasOwnProperty(tweenSet))) {
			var _this1 = this.mTweenSetList;
			var value = [];
			if(__map_reserved[tweenSet] != null) {
				_this1.setReserved(tweenSet,value);
			} else {
				_this1.h[tweenSet] = value;
			}
		}
		var _this2 = this.mTweenSetList;
		(__map_reserved[tweenSet] != null ? _this2.getReserved(tweenSet) : _this2.h[tweenSet]).push(lNewTween);
	}
	,removeTween: function(tweenSet,property) {
		var _this = this.mTweenSetList;
		var lTweenSetArray = __map_reserved[tweenSet] != null ? _this.getReserved(tweenSet) : _this.h[tweenSet];
		if(lTweenSetArray != null) {
			var _g = 0;
			while(_g < lTweenSetArray.length) {
				var lTween = lTweenSetArray[_g];
				++_g;
				var lIndex = -1;
				if(lTween.get_property() == property) {
					lIndex = lTweenSetArray.indexOf(lTween);
				}
				if(lIndex >= 0) {
					lTweenSetArray.splice(lIndex,1);
					break;
				}
			}
		}
	}
	,getTween: function(tweenSet,property) {
		var _this = this.mTweenSetList;
		var lTweenSetArray = __map_reserved[tweenSet] != null ? _this.getReserved(tweenSet) : _this.h[tweenSet];
		if(lTweenSetArray != null) {
			var _g = 0;
			while(_g < lTweenSetArray.length) {
				var lTween = lTweenSetArray[_g];
				++_g;
				if(lTween.get_property() == property) {
					return lTween;
				}
			}
		}
		return null;
	}
	,update: function(dt) {
		if(this.mRunning) {
			var lTempArray = null;
			var lTweensRunning = 0;
			var key = this.mCurrentTweenSet;
			var _this = this.mTweenSetList;
			lTempArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(lTempArray != null) {
				var _g = 0;
				while(_g < lTempArray.length) {
					var lTempTween = lTempArray[_g];
					++_g;
					lTempTween.update(dt);
					if(lTempTween.get_running()) {
						++lTweensRunning;
					}
				}
				if(lTweensRunning <= 0) {
					this.mRunning = false;
					if(this.mEndFunction != null) {
						this.mEndFunction(this.mCurrentTweenSet);
					}
				}
			}
		}
	}
	,start: function(tweenSet) {
		this.mCurrentTweenSet = tweenSet;
		var lTempArray = null;
		var key = this.mCurrentTweenSet;
		var _this = this.mTweenSetList;
		lTempArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(lTempArray != null) {
			var _g = 0;
			while(_g < lTempArray.length) {
				var lTempTween = lTempArray[_g];
				++_g;
				lTempTween.start();
			}
			this.mRunning = true;
		} else {
			this.mRunning = false;
			if(this.mEndFunction != null) {
				this.mEndFunction(this.mCurrentTweenSet);
			}
		}
	}
	,stop: function() {
		var key = this.mCurrentTweenSet;
		var _this = this.mTweenSetList;
		var lTempArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(lTempArray != null) {
			var _g = 0;
			while(_g < lTempArray.length) {
				var lTempTween = lTempArray[_g];
				++_g;
				lTempTween.stop();
			}
		}
		this.mRunning = false;
	}
	,pauseOrResume: function() {
		this.mRunning = !this.mRunning;
	}
	,pause: function() {
		this.mRunning = false;
	}
	,resume: function() {
		this.mRunning = true;
	}
	,fastForward: function(tweenSet) {
		this.mCurrentTweenSet = tweenSet;
		var lTempArray = null;
		var key = this.mCurrentTweenSet;
		var _this = this.mTweenSetList;
		lTempArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(lTempArray != null) {
			var _g = 0;
			while(_g < lTempArray.length) {
				var lTempTween = lTempArray[_g];
				++_g;
				lTempTween.fastForward();
			}
			this.mRunning = false;
			if(this.mEndFunction != null) {
				this.mEndFunction(this.mCurrentTweenSet);
			}
		} else {
			this.mRunning = false;
			if(this.mEndFunction != null) {
				this.mEndFunction(this.mCurrentTweenSet);
			}
		}
	}
	,rewind: function(tweenSet) {
		this.mCurrentTweenSet = tweenSet;
		var lTempArray = null;
		var key = this.mCurrentTweenSet;
		var _this = this.mTweenSetList;
		lTempArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(lTempArray != null) {
			var _g = 0;
			while(_g < lTempArray.length) {
				var lTempTween = lTempArray[_g];
				++_g;
				lTempTween.rewind();
			}
			this.mRunning = false;
		} else {
			this.mRunning = false;
		}
	}
	,__class__: old_helper_Tweener
	,__properties__: {get_running:"get_running",get_curTweenSet:"get_curTweenSet",get_target:"get_target"}
};
var old_helper_Tween = function(target,property,minValue,maxValue,time,easing,delay,linkedProperty) {
	if(delay == null) {
		delay = 0;
	}
	if(easing == null) {
		easing = 0;
	}
	if(time == null) {
		time = 1;
	}
	if(maxValue == null) {
		maxValue = 1;
	}
	if(minValue == null) {
		minValue = 0;
	}
	if(property == null) {
		property = "x";
	}
	this.mRunning = false;
	this.mSpeed = 0;
	this.mSpan = 0;
	this.mCurValue = 0;
	this.mEasingFunction = null;
	this.mEasing = 0;
	this.mCurTime = 0;
	this.mStartTime = 0;
	this.mDelay = 0;
	this.mTime = 0;
	this.mMaxValue = 1;
	this.mMinValue = 0;
	this.mLinkedProperty = "";
	this.mProperty = "";
	this.mTarget = null;
	this.mTarget = target;
	this.mProperty = property;
	this.mMinValue = minValue;
	this.mMaxValue = maxValue;
	this.mTime = time;
	this.mEasing = easing;
	this.mDelay = delay;
	this.mLinkedProperty = linkedProperty;
	if(this.mLinkedProperty != null) {
		throw new js__$Boot_HaxeError("mLinkedProperty error");
	}
	this.mSpan = this.mMaxValue - this.mMinValue;
	this.mSpeed = this.mSpan / this.mTime;
	this.set_easing(easing);
};
$hxClasses["old.helper.Tween"] = old_helper_Tween;
old_helper_Tween.__name__ = "old.helper.Tween";
old_helper_Tween.easeNone = function(t,a,s,d) {
	return s * (t /= d) + a;
};
old_helper_Tween.easeInQuad = function(t,a,s,d) {
	return s * (t /= d) * t + a;
};
old_helper_Tween.easeOutQuad = function(t,a,s,d) {
	return -s * (t /= d) * (t - 2) + a;
};
old_helper_Tween.easeInOutQuad = function(t,a,s,d) {
	if((t /= d / 2) < 1) {
		return s * 0.5 * t * t + a;
	}
	return -s * 0.5 * (--t * (t - 2) - 1) + a;
};
old_helper_Tween.easeInCube = function(t,a,s,d) {
	return s * (t /= d) * t * t + a;
};
old_helper_Tween.easeOutCube = function(t,a,s,d) {
	return s * (Math.pow(t / d - 1,3) + 1) + a;
};
old_helper_Tween.easeInOutCube = function(t,a,s,d) {
	if((t /= d / 2) < 1) {
		return s * 0.5 * t * t * t + a;
	}
	return s * 0.5 * (Math.pow(t - 2,3) + 2) + a;
};
old_helper_Tween.easeInQuart = function(t,a,s,d) {
	return s * (t /= d) * t * t * t + a;
};
old_helper_Tween.easeOutQuart = function(t,a,s,d) {
	return -s * (Math.pow(t / d - 1,4) - 1) + a;
};
old_helper_Tween.easeInOutQuart = function(t,a,s,d) {
	if((t /= d / 2) < 1) {
		return s * 0.5 * t * t * t * t + a;
	}
	return -s * 0.5 * (Math.pow(t - 2,4) - 2) + a;
};
old_helper_Tween.easeInQuint = function(t,a,s,d) {
	return s * (t /= d) * t * t * t * t + a;
};
old_helper_Tween.easeOutQuint = function(t,a,s,d) {
	return s * (Math.pow(t / d - 1,5) + 1) + a;
};
old_helper_Tween.easeInOutQuint = function(t,a,s,d) {
	if((t /= d / 2) < 1) {
		return s * 0.5 * t * t * t * t * t + a;
	}
	return s * 0.5 * (Math.pow(t - 2,5) + 2) + a;
};
old_helper_Tween.prototype = {
	mTarget: null
	,mProperty: null
	,mLinkedProperty: null
	,mMinValue: null
	,mMaxValue: null
	,mTime: null
	,mDelay: null
	,mStartTime: null
	,mCurTime: null
	,mEasing: null
	,mEasingFunction: null
	,mCurValue: null
	,mSpan: null
	,mSpeed: null
	,mRunning: null
	,get_running: function() {
		return this.mRunning;
	}
	,get_property: function() {
		return this.mProperty;
	}
	,get_linkedProperty: function() {
		return this.mLinkedProperty;
	}
	,get_minValue: function() {
		return this.mMinValue;
	}
	,set_minValue: function(value) {
		this.mMinValue = value;
		this.mSpan = this.mMaxValue - this.mMinValue;
		this.mSpeed = this.mSpan / this.mTime;
		return value;
	}
	,get_maxValue: function() {
		return this.mMaxValue;
	}
	,set_maxValue: function(value) {
		this.mMaxValue = value;
		this.mSpan = this.mMaxValue - this.mMinValue;
		this.mSpeed = this.mSpan / this.mTime;
		return value;
	}
	,get_curValue: function() {
		return this.mCurValue;
	}
	,get_time: function() {
		return this.mTime;
	}
	,set_time: function(value) {
		this.mTime = value;
		this.mSpeed = this.mSpan / this.mTime;
		return value;
	}
	,get_easing: function() {
		return this.mEasing;
	}
	,set_easing: function(value) {
		this.mEasing = value;
		this.mEasingFunction = old_helper_Tween.easeNone;
		return value;
	}
	,update: function(dt) {
		if(this.mRunning) {
			if(this.mStartTime <= 0) {
				if(this.mLinkedProperty != null) {
					this.updateProperty(this.mTarget,this.mProperty,Reflect.field(this.mTarget,this.mLinkedProperty));
				} else {
					this.mCurValue = this.mEasingFunction(this.mCurTime,this.mMinValue,this.mSpan,this.mTime);
					this.mCurTime += dt;
					this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
					if(this.mCurTime >= this.mTime) {
						this.mCurValue = this.mMaxValue;
						this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
						this.mRunning = false;
					}
				}
			} else {
				this.mStartTime -= dt;
			}
		}
	}
	,updateProperty: function(t,p,v) {
		if(p == "x") {
			t.set_x(v);
		} else if(p == "y") {
			t.set_y(v);
		} else if(p == "alpha") {
			t.set_alpha(v);
		} else if(p == "scaleX") {
			t.set_scaleX(v);
		} else if(p == "scaleY") {
			t.set_scaleY(v);
		}
	}
	,start: function() {
		this.mCurTime = 0;
		this.mCurValue = this.mMinValue;
		this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
		this.mRunning = true;
		this.mStartTime = this.mDelay;
	}
	,stop: function() {
		this.mCurTime = this.mTime;
		this.mCurValue = this.mMaxValue;
		this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
		this.mRunning = false;
	}
	,fastForward: function() {
		this.mCurTime = this.mTime;
		this.mCurValue = this.mMaxValue;
		this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
		this.mRunning = false;
	}
	,rewind: function() {
		this.mCurTime = 0;
		this.mCurValue = this.mMinValue;
		this.updateProperty(this.mTarget,this.mProperty,this.mCurValue);
		this.mRunning = false;
	}
	,__class__: old_helper_Tween
	,__properties__: {set_easing:"set_easing",get_easing:"get_easing",set_time:"set_time",get_time:"get_time",get_curValue:"get_curValue",set_maxValue:"set_maxValue",get_maxValue:"get_maxValue",set_minValue:"set_minValue",get_minValue:"get_minValue",get_linkedProperty:"get_linkedProperty",get_property:"get_property",get_running:"get_running"}
};
var old_helper_UsefulStuff = function() {
};
$hxClasses["old.helper.UsefulStuff"] = old_helper_UsefulStuff;
old_helper_UsefulStuff.__name__ = "old.helper.UsefulStuff";
old_helper_UsefulStuff.sign = function(v) {
	if(v < 0) {
		return -1;
	} else {
		return 1;
	}
};
old_helper_UsefulStuff.abs = function(v) {
	if(v < 0) {
		return -v;
	} else {
		return v;
	}
};
old_helper_UsefulStuff.round = function(v) {
	if(v < 0) {
		if(v + 0.5 == (v | 0 | 0)) {
			return v;
		} else {
			return v - 0.5;
		}
	} else {
		return v + 0.5;
	}
};
old_helper_UsefulStuff.curveValue = function(d,c,v,t) {
	if(old_helper_UsefulStuff.abs(d - c) < 0.001) {
		return d;
	}
	c += (d - c) / v * (t / 0.033333333333333333);
	return c;
};
old_helper_UsefulStuff.remapValue = function(v,A,B,C,D) {
	return C + (D - C) * (v - A) / (B - A);
};
old_helper_UsefulStuff.stringToBoolean = function(string) {
	switch(string) {
	case "1":case "true":case "yes":
		return true;
	case "0":case "false":case "no":
		return false;
	default:
		return false;
	}
};
old_helper_UsefulStuff.degreeToRadian = function(d) {
	return d * Math.PI / 180;
};
old_helper_UsefulStuff.radianToDegree = function(r) {
	return r * 180 / Math.PI;
};
old_helper_UsefulStuff.rotationToDegree = function(r) {
	var tempRotation = r;
	while(tempRotation >= 360) tempRotation -= 360;
	while(tempRotation < 0) tempRotation += 360;
	return tempRotation;
};
old_helper_UsefulStuff.degreeToRotation = function(d) {
	var tempDegree = d;
	while(tempDegree > 180) tempDegree -= 360;
	while(tempDegree < -180) tempDegree += 360;
	return tempDegree;
};
old_helper_UsefulStuff.rnd = function(a,b) {
	if(b == null) {
		b = 1;
	}
	if(a == null) {
		a = 0;
	}
	return Math.floor(Math.random() * (b - a + 1)) + a | 0;
};
old_helper_UsefulStuff.getPixelValue = function(btm,p) {
	if(btm == null) {
		return 0;
	}
	var bmapData = btm.hitRegionMask;
	var returnVal = bmapData.getPixel(p.x | 0,p.y | 0);
	return returnVal;
};
old_helper_UsefulStuff.getDistance = function(x1,y1,x2,y2,useSqrt) {
	if(useSqrt == null) {
		useSqrt = true;
	}
	var lDistX = x2 - x1;
	var lDistY = y2 - y1;
	if(useSqrt) {
		return Math.sqrt(lDistX * lDistX + lDistY * lDistY);
	} else {
		return lDistX * lDistX + lDistY * lDistY;
	}
};
old_helper_UsefulStuff.checkForLineLineIntersection = function(p1,p2,p3,p4) {
	var x1 = p1.x;
	var x2 = p2.x;
	var x3 = p3.x;
	var x4 = p4.x;
	var y1 = p1.y;
	var y2 = p2.y;
	var y3 = p3.y;
	var y4 = p4.y;
	var z1 = x1 - x2;
	var z2 = x3 - x4;
	var z3 = y1 - y2;
	var z4 = y3 - y4;
	var d = z1 * z4 - z3 * z2;
	if(d == 0) {
		return null;
	}
	var pre = x1 * y2 - y1 * x2;
	var post = x3 * y4 - y3 * x4;
	var x = (pre * z2 - z1 * post) / d;
	var y = (pre * z4 - z3 * post) / d;
	var x1x2dif_plus_y1y2dif = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
	var x3x4dif_plus_y3y4dif = (x3 - x4) * (x3 - x4) + (y3 - y4) * (y3 - y4);
	if((x - x2) * (x - x2) + (y - y2) * (y - y2) > x1x2dif_plus_y1y2dif) {
		return null;
	}
	if((x - x1) * (x - x1) + (y - y1) * (y - y1) > x1x2dif_plus_y1y2dif) {
		return null;
	}
	if((x - x4) * (x - x4) + (y - y4) * (y - y4) > x3x4dif_plus_y3y4dif) {
		return null;
	}
	if((x - x3) * (x - x3) + (y - y3) * (y - y3) > x3x4dif_plus_y3y4dif) {
		return null;
	}
	return new openfl_geom_Point(x,y);
};
old_helper_UsefulStuff.checkForLineBoxIntersection = function(p1,p2,r1) {
	var lResult = null;
	var lTopRight = new openfl_geom_Point(r1.get_right(),r1.get_top());
	var lBottomLeft = new openfl_geom_Point(r1.get_left(),r1.get_bottom());
	lResult = old_helper_UsefulStuff.checkForLineLineIntersection(p1,p2,r1.get_topLeft(),lTopRight);
	if(lResult == null) {
		lResult = old_helper_UsefulStuff.checkForLineLineIntersection(p1,p2,lTopRight,r1.get_bottomRight());
	}
	if(lResult == null) {
		lResult = old_helper_UsefulStuff.checkForLineLineIntersection(p1,p2,r1.get_bottomRight(),lBottomLeft);
	}
	if(lResult == null) {
		lResult = old_helper_UsefulStuff.checkForLineLineIntersection(p1,p2,lBottomLeft,r1.get_topLeft());
	}
	return lResult;
};
old_helper_UsefulStuff.pointInsidePolygon = function(points,startigPoint,x,y) {
	var lLength = points.length;
	var i = lLength - 1;
	var j = lLength - 1;
	var oddNodes = false;
	var lPointI = null;
	var lPointJ = null;
	var _g = startigPoint;
	var _g1 = lLength;
	while(_g < _g1) {
		var i1 = _g++;
		lPointI = points[i1];
		lPointJ = points[j];
		if(lPointI.y < y && lPointJ.y >= y || lPointJ.y < y && lPointI.y >= y) {
			if(lPointI.x + (y - lPointI.y) / (lPointJ.y - lPointI.y) * (lPointJ.x - lPointI.x) < x) {
				oddNodes = !oddNodes;
			}
		}
		j = i1;
	}
	return oddNodes;
};
old_helper_UsefulStuff.checkForCollision = function(mc1,mc2,precise,alphaTolerance) {
	if(alphaTolerance == null) {
		alphaTolerance = 0;
	}
	if(precise == null) {
		precise = 0;
	}
	var lBoundsMc1 = mc1.getBounds(mc1.stage);
	var lBoundsMc2 = mc2.getBounds(mc2.stage);
	var lBoundsIntersection = lBoundsMc1.intersection(lBoundsMc2);
	if(lBoundsIntersection.width > 0) {
		if(precise > 0) {
			lBoundsIntersection.width = Math.ceil(lBoundsIntersection.width);
			lBoundsIntersection.height = Math.ceil(lBoundsIntersection.height);
			var lIntersectionImg = null;
			var lMatrix;
			if(precise == 1) {
				lIntersectionImg = new openfl_display_BitmapData(lBoundsIntersection.width | 0,lBoundsIntersection.height | 0,false,-65536);
				lMatrix = mc2.get_transform().get_concatenatedMatrix();
				lMatrix.tx -= lBoundsIntersection.get_left();
				lMatrix.ty -= lBoundsIntersection.get_top();
				lIntersectionImg.draw(mc2,lMatrix,new openfl_geom_ColorTransform(1,1,1,1,255,255,255,alphaTolerance),openfl_display__$BlendMode_BlendMode_$Impl_$.fromString("difference"));
			} else if(precise == 2) {
				lIntersectionImg = new openfl_display_BitmapData(lBoundsIntersection.width | 0,lBoundsIntersection.height | 0,false);
				lMatrix = mc1.get_transform().get_concatenatedMatrix();
				lMatrix.tx -= lBoundsIntersection.get_left();
				lMatrix.ty -= lBoundsIntersection.get_top();
				lIntersectionImg.draw(mc1,lMatrix,new openfl_geom_ColorTransform(1,1,1,1,255,-255,-255,alphaTolerance));
				lMatrix = mc2.get_transform().get_concatenatedMatrix();
				lMatrix.tx -= lBoundsIntersection.get_left();
				lMatrix.ty -= lBoundsIntersection.get_top();
				lIntersectionImg.draw(mc2,lMatrix,new openfl_geom_ColorTransform(1,1,1,1,255,255,255,alphaTolerance),openfl_display__$BlendMode_BlendMode_$Impl_$.fromString("difference"));
			}
			var lIntersectionArea = lIntersectionImg.getColorBoundsRect(-1,-16711681);
			lIntersectionImg.dispose();
			if(lIntersectionArea.width == 0) {
				return null;
			}
			lIntersectionArea.x += lBoundsIntersection.get_left();
			lIntersectionArea.y += lBoundsIntersection.get_top();
			return lIntersectionArea;
		} else {
			return lBoundsIntersection;
		}
	} else {
		return null;
	}
};
old_helper_UsefulStuff.millisecondsToTimeString = function(ms,h) {
	if(h == null) {
		h = false;
	}
	var hours = 0;
	var minutes = 0;
	var seconds = 0;
	var timeString = "";
	if(h) {
		seconds = Math.floor(ms / 100);
		minutes = Math.floor(seconds / 60);
		hours = Math.floor(minutes / 60);
		minutes -= hours * 60;
		seconds -= minutes * 60;
		timeString = HxOverrides.substr(Std.string(hours + 100),1,2) + ":" + HxOverrides.substr(Std.string(minutes + 100),1,2) + ":" + HxOverrides.substr(Std.string(seconds + 100),1,2);
	} else {
		seconds = Math.floor(ms / 100);
		minutes = Math.floor(seconds / 60);
		seconds -= minutes * 60;
		timeString = HxOverrides.substr(Std.string(minutes + 100),1,2) + ":" + HxOverrides.substr(Std.string(seconds + 100),1,2);
	}
	return timeString;
};
old_helper_UsefulStuff.secondsToTimeString = function(s,h) {
	if(h == null) {
		h = false;
	}
	var hours = 0;
	var minutes = 0;
	var seconds = 0;
	var timeString = "";
	if(h) {
		seconds = Math.floor(s);
		minutes = Math.floor(seconds / 60);
		hours = Math.floor(minutes / 60);
		minutes -= hours * 60;
		seconds -= minutes * 60;
		timeString = HxOverrides.substr(Std.string(hours + 100),1,2) + ":" + HxOverrides.substr(Std.string(minutes + 100),1,2) + ":" + HxOverrides.substr(Std.string(seconds + 100),1,2);
	} else {
		seconds = Math.floor(s);
		minutes = Math.floor(seconds / 60);
		seconds -= minutes * 60;
		timeString = HxOverrides.substr(Std.string(minutes + 100),1,2) + ":" + HxOverrides.substr(Std.string(seconds + 100),1,2);
	}
	return timeString;
};
old_helper_UsefulStuff.skillCheck = function(skill,toughness,success,maxSide) {
	if(maxSide == null) {
		maxSide = 6;
	}
	if(success == null) {
		success = 5;
	}
	if(toughness == null) {
		toughness = 1;
	}
	var lSuccesses = 0;
	while(skill > 0) {
		var lNumber = old_helper_UsefulStuff.rnd(1,maxSide);
		if(lNumber >= success) {
			++lSuccesses;
		}
		--skill;
	}
	if(lSuccesses >= toughness) {
		return true;
	} else {
		return false;
	}
};
old_helper_UsefulStuff.shuffleObject = function(obj) {
	var i = obj.length;
	while(i > 0) {
		var j = Math.floor(Math.random() * i);
		--i;
		var temp = Reflect.field(obj,i == null ? "null" : "" + i);
		obj[i == null ? "null" : "" + i] = Reflect.field(obj,j == null ? "null" : "" + j);
		obj[j == null ? "null" : "" + j] = temp;
	}
};
old_helper_UsefulStuff.prototype = {
	__class__: old_helper_UsefulStuff
};
var old_resources_sounds_Sounds = function() {
};
$hxClasses["old.resources.sounds.Sounds"] = old_resources_sounds_Sounds;
old_resources_sounds_Sounds.__name__ = "old.resources.sounds.Sounds";
old_resources_sounds_Sounds.prototype = {
	__class__: old_resources_sounds_Sounds
};
var old_singleton_GameWorld = function() {
	this.container = null;
	this.container = old_MainOld.getInstance().builder.createSprite();
	this.mWorldContainer = old_MainOld.getInstance().builder.createSprite();
	this.mWorldContainer.addChild(this.container);
	this.mForBlittingContainer = old_MainOld.getInstance().builder.createSprite();
	this.container.addChild(this.mForBlittingContainer);
	this.mEnvironmentContainer = old_MainOld.getInstance().builder.createSprite();
	this.mForBlittingContainer.addChild(this.mEnvironmentContainer);
	this.mSkyContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnvironmentContainer.addChild(this.mSkyContainer);
	this.mBackgroundContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnvironmentContainer.addChild(this.mBackgroundContainer);
	this.mBackground = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mBackground);
	this.mBlitToBitmap = old_MainOld.getInstance().builder.createSprite();
	this.mBlitToBitmap.set_x(0);
	this.mBlitToBitmap.set_y(0);
	this.mBackgroundContainer.addChild(this.mBlitToBitmap);
	this.mObjectContainer = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mObjectContainer);
	this.mFriendliesContainer = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mFriendliesContainer);
	this.mBaseContainer = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mBaseContainer);
	this.mWeatherBackContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnvironmentContainer.addChild(this.mWeatherBackContainer);
	this.mEffectContainer = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mEffectContainer);
	this.mForegroundContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnvironmentContainer.addChild(this.mForegroundContainer);
	this.mWeatherForeContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnvironmentContainer.addChild(this.mWeatherForeContainer);
	this.mCrosshairContainer0 = old_MainOld.getInstance().builder.createSprite();
	this.container.addChild(this.mCrosshairContainer0);
	this.mCrosshairContainer1 = old_MainOld.getInstance().builder.createSprite();
	this.container.addChild(this.mCrosshairContainer1);
	this.mGunContainer = old_MainOld.getInstance().builder.createSprite();
	this.container.addChild(this.mGunContainer);
	this.mHUDContainer = old_MainOld.getInstance().builder.createSprite();
	this.container.addChild(this.mHUDContainer);
	this.mObjectList = [];
};
$hxClasses["old.singleton.GameWorld"] = old_singleton_GameWorld;
old_singleton_GameWorld.__name__ = "old.singleton.GameWorld";
old_singleton_GameWorld.__properties__ = {get_instance:"get_instance"};
old_singleton_GameWorld.get_instance = function() {
	if(old_singleton_GameWorld.mInstance == null) {
		old_singleton_GameWorld.mInstance = new old_singleton_GameWorld();
	}
	return old_singleton_GameWorld.mInstance;
};
old_singleton_GameWorld.prototype = {
	container: null
	,mWorldContainer: null
	,mForBlittingContainer: null
	,mForBlittingBitmap: null
	,mEnvironmentContainer: null
	,mSkyContainer: null
	,mBackgroundContainer: null
	,mBackground: null
	,mBlitToBitmap: null
	,mObjectContainer: null
	,mFriendliesContainer: null
	,mBaseContainer: null
	,mCrosshairContainer0: null
	,mCrosshairContainer1: null
	,mForegroundContainer: null
	,mEffectContainer: null
	,mWeatherBackContainer: null
	,mWeatherForeContainer: null
	,mGunContainer: null
	,mHUDContainer: null
	,mObjectList: null
	,get_worldContainer: function() {
		return this.mWorldContainer;
	}
	,get_environmentContainer: function() {
		return this.mEnvironmentContainer;
	}
	,get_skyContainer: function() {
		return this.mSkyContainer;
	}
	,get_backgroundContainer: function() {
		return this.mBackgroundContainer;
	}
	,get_blittingBitmap: function() {
		return this.mBlitToBitmap;
	}
	,get_background: function() {
		return this.mBackground;
	}
	,get_objectContainer: function() {
		return this.mObjectContainer;
	}
	,get_friendliesContainer: function() {
		return this.mFriendliesContainer;
	}
	,get_baseContainer: function() {
		return this.mBaseContainer;
	}
	,get_crosshairContainer0: function() {
		return this.mCrosshairContainer0;
	}
	,get_crosshairContainer1: function() {
		return this.mCrosshairContainer1;
	}
	,get_effectContainer: function() {
		return this.mEffectContainer;
	}
	,get_foregroundContainer: function() {
		return this.mForegroundContainer;
	}
	,get_weatherBackContainer: function() {
		return this.mWeatherBackContainer;
	}
	,get_weatherForeContainer: function() {
		return this.mWeatherForeContainer;
	}
	,get_gunContainer: function() {
		return this.mGunContainer;
	}
	,get_hudContainer: function() {
		return this.mHUDContainer;
	}
	,reset: function() {
		while(this.mEnvironmentContainer.get_numChildren() > 0) this.mEnvironmentContainer.removeChildAt(0);
		while(this.mSkyContainer.get_numChildren() > 0) this.mSkyContainer.removeChildAt(0);
		this.mEnvironmentContainer.addChild(this.mSkyContainer);
		while(this.mBackgroundContainer.get_numChildren() > 0) this.mBackgroundContainer.removeChildAt(0);
		this.mEnvironmentContainer.addChild(this.mBackgroundContainer);
		while(this.mBackground.get_numChildren() > 0) this.mBackground.removeChildAt(0);
		while(this.mObjectContainer.get_numChildren() > 0) this.mObjectContainer.removeChildAt(0);
		while(this.mFriendliesContainer.get_numChildren() > 0) this.mFriendliesContainer.removeChildAt(0);
		while(this.mBaseContainer.get_numChildren() > 0) this.mBaseContainer.removeChildAt(0);
		this.mBackgroundContainer.addChild(this.mBackground);
		this.mBackgroundContainer.addChild(this.mBlitToBitmap);
		this.mBackgroundContainer.addChild(this.mObjectContainer);
		this.mBackgroundContainer.addChild(this.mFriendliesContainer);
		this.mBackgroundContainer.addChild(this.mBaseContainer);
		while(this.mWeatherBackContainer.get_numChildren() > 0) this.mWeatherBackContainer.removeChildAt(0);
		this.mEnvironmentContainer.addChild(this.mWeatherBackContainer);
		while(this.mEffectContainer.get_numChildren() > 0) this.mEffectContainer.removeChildAt(0);
		this.mBackgroundContainer.addChild(this.mEffectContainer);
		while(this.mForegroundContainer.get_numChildren() > 0) this.mForegroundContainer.removeChildAt(0);
		this.mEnvironmentContainer.addChild(this.mForegroundContainer);
		while(this.mWeatherForeContainer.get_numChildren() > 0) this.mWeatherForeContainer.removeChildAt(0);
		this.mEnvironmentContainer.addChild(this.mWeatherForeContainer);
		while(this.mCrosshairContainer0.get_numChildren() > 0) this.mCrosshairContainer0.removeChildAt(0);
		while(this.mCrosshairContainer1.get_numChildren() > 0) this.mCrosshairContainer1.removeChildAt(0);
		while(this.mGunContainer.get_numChildren() > 0) this.mGunContainer.removeChildAt(0);
		while(this.mHUDContainer.get_numChildren() > 0) this.mHUDContainer.removeChildAt(0);
		this.mObjectList = [];
	}
	,saveBlittingBitmap: function(blitSource,prevTimeOfDay) {
	}
	,loadBlittingBitmap: function(blitSource,curTimeOfDay) {
	}
	,addObject: function(object,depth) {
		if(depth == null) {
			depth = 480;
		}
		this.mObjectList.push(object);
		this.mObjectContainer.addChild(object);
	}
	,removeObject: function(object) {
		var lIndex = 0;
		lIndex = Lambda.indexOf(this.mObjectList,object);
		if(lIndex >= 0) {
			this.mObjectList.splice(lIndex,1);
		}
		if(object.get_parent() != null) {
			this.mObjectContainer.removeChild(object);
		}
	}
	,addEffect: function(object,depth) {
		if(depth == null) {
			depth = 0;
		}
		this.mObjectList.push(object);
		this.mObjectContainer.addChild(object);
	}
	,removeEffect: function(object) {
		var lIndex = 0;
		lIndex = Lambda.indexOf(this.mObjectList,object);
		if(lIndex >= 0) {
			this.mObjectList.splice(lIndex,1);
		}
		if(object.get_parent() != null) {
			this.mObjectContainer.removeChild(object);
		}
	}
	,addEffect2: function(object) {
		this.mEffectContainer.addChild(object);
	}
	,removeEffect2: function(object) {
		this.mEffectContainer.removeChild(object);
	}
	,getObjectIndexByDepth: function(depth) {
		var lLength = this.mObjectContainer.get_numChildren();
		var object = null;
		var count = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			try {
				object = js_Boot.__cast(this.mObjectContainer.getChildAt(i) , openfl_display_DisplayObject);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				object = null;
			}
			if(depth < object.get_y()) {
				break;
			}
			++count;
		}
		return count;
	}
	,sortObjects: function() {
		this.mObjectList.sort($bind(this,this.sortObjectsFunction));
		var _g = 0;
		var _g1 = this.mObjectList;
		while(_g < _g1.length) {
			var lDisplayObject = _g1[_g];
			++_g;
			this.mObjectContainer.addChild(lDisplayObject);
		}
	}
	,sortObjectsFunction: function(x,y) {
		if(x.get_y() < y.get_y()) {
			return -1;
		} else if(y.get_y() < x.get_y()) {
			return 1;
		} else {
			return 0;
		}
	}
	,printDepths: function() {
		var lLength = this.mObjectContainer.get_numChildren();
		var object = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			try {
				object = js_Boot.__cast(this.mObjectContainer.getChildAt(i) , openfl_display_DisplayObject);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				object = null;
			}
			haxe_Log.trace("I: " + i + " : " + object.get_y(),{ fileName : "src/old/singleton/GameWorld.hx", lineNumber : 537, className : "old.singleton.GameWorld", methodName : "printDepths"});
		}
	}
	,blitMovieClipToBackground: function(mc,_x,_y) {
		if(mc == null) {
			haxe_Log.trace("blitMovieClipToBackground add null object",{ fileName : "src/old/singleton/GameWorld.hx", lineNumber : 551, className : "old.singleton.GameWorld", methodName : "blitMovieClipToBackground"});
			return;
		}
		mc.set_x(_x);
		mc.set_y(_y);
		this.mBlitToBitmap.addChild(mc);
	}
	,getWorldPosition: function(object) {
		var lTempPos = new old_uk_co_bigroom_geom_Vector2D(0,0);
		var lTempObj = object;
		while(lTempObj != old_singleton_GameWorld.mInstance.container) {
			lTempPos.x *= lTempObj.get_scaleX();
			lTempPos.y *= lTempObj.get_scaleY();
			lTempPos.x += lTempObj.get_x();
			lTempPos.y += lTempObj.get_y();
			lTempObj = lTempObj.get_parent();
		}
		return lTempPos;
	}
	,getWorldAngle: function(object) {
		var lTempAngle = 0;
		var lTempObj = object;
		while(lTempObj != old_singleton_GameWorld.mInstance.container) {
			lTempAngle += lTempObj.get_rotation();
			lTempObj = lTempObj.get_parent();
		}
		return lTempAngle;
	}
	,scrollSky: function(x,y,scrollX,scrollY) {
		if(scrollY == null) {
			scrollY = true;
		}
		if(scrollX == null) {
			scrollX = true;
		}
		if(scrollX) {
			this.mSkyContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mSkyContainer.set_y(y | 0);
		}
	}
	,scrollBackground: function(x,y,scrollX,scrollY) {
		if(scrollY == null) {
			scrollY = true;
		}
		if(scrollX == null) {
			scrollX = true;
		}
		if(scrollX) {
			this.mBackgroundContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mBackgroundContainer.set_y(y | 0);
		}
		if(scrollX) {
			this.mWeatherBackContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mWeatherBackContainer.set_y(y | 0);
		}
	}
	,scrollForeground: function(x,y,scrollX,scrollY) {
		if(scrollY == null) {
			scrollY = true;
		}
		if(scrollX == null) {
			scrollX = true;
		}
		if(scrollX) {
			this.mForegroundContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mForegroundContainer.set_y(y | 0);
		}
		if(scrollX) {
			this.mWeatherForeContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mWeatherForeContainer.set_y(y | 0);
		}
	}
	,scrollGun: function(x,y,scrollX,scrollY) {
		if(scrollY == null) {
			scrollY = true;
		}
		if(scrollX == null) {
			scrollX = true;
		}
		if(scrollX) {
			this.mGunContainer.set_x(x | 0);
		}
		if(scrollY) {
			this.mGunContainer.set_y(y | 0);
		}
	}
	,scrollCrosshair: function(layer,x,y,scrollX,scrollY) {
		if(scrollY == null) {
			scrollY = true;
		}
		if(scrollX == null) {
			scrollX = true;
		}
		if(layer == 0) {
			if(scrollX) {
				this.mCrosshairContainer0.set_x(x | 0);
			}
			if(scrollY) {
				this.mCrosshairContainer0.set_y(y | 0);
			}
		} else {
			if(scrollX) {
				this.mCrosshairContainer1.set_x(x | 0);
			}
			if(scrollY) {
				this.mCrosshairContainer1.set_y(y | 0);
			}
		}
	}
	,__class__: old_singleton_GameWorld
	,__properties__: {get_blittingBitmap:"get_blittingBitmap",get_hudContainer:"get_hudContainer",get_gunContainer:"get_gunContainer",get_weatherForeContainer:"get_weatherForeContainer",get_weatherBackContainer:"get_weatherBackContainer",get_foregroundContainer:"get_foregroundContainer",get_effectContainer:"get_effectContainer",get_crosshairContainer1:"get_crosshairContainer1",get_crosshairContainer0:"get_crosshairContainer0",get_baseContainer:"get_baseContainer",get_friendliesContainer:"get_friendliesContainer",get_objectContainer:"get_objectContainer",get_background:"get_background",get_backgroundContainer:"get_backgroundContainer",get_skyContainer:"get_skyContainer",get_environmentContainer:"get_environmentContainer",get_worldContainer:"get_worldContainer"}
};
var old_singleton_LocalStorage = function() {
	this.mGameFinished = false;
	this.mFirstRun = true;
	this.mTotalKills = 0;
	this.mAchievements = null;
	this.mDecals = true;
	this.mWeather = false;
	this.mQuality = "high";
	this.mMusic = true;
	this.mCheckboxLogic = true;
	this.mSound = true;
	this.mLocationsSearched = null;
	this.mCurArea = 0;
	this.mWeaponsFound = null;
	this.mAdditionalSurvivorsFound = null;
	this.mAdditionalSurvivorsAvailable = null;
	this.mSurvivorsLost = 0;
	this.mSurvivorsFound = null;
	this.mSurvivorsAvailable = null;
	this.mSurvivorCategories = null;
	this.mLife = 0;
	this.mMoney = 0;
	this.mScore = 0;
	this.mKills = 0;
	this.mSlot2Scope = -1;
	this.mSlot2 = -1;
	this.mSlot1Scope = -1;
	this.mSlot1 = -1;
	this.mInventory = null;
	this.mDifficulty = 0;
	this.mLevelNumber = 0;
	this.mVersion = 4;
	this.mSharedObject = openfl_net_SharedObject.getLocal("CfgAndPlayerData");
	if(this.mSharedObject.data.localStorageExists == null || this.mSharedObject.data.version != this.mVersion) {
		this.mFirstRun = true;
		this.mSharedObject.data.localStorageExists = js_Boot.__cast(true , Bool);
		this.mSharedObject.data.version = this.mVersion;
		this.mSharedObject.data.levelNumber = this.mLevelNumber;
		this.mSharedObject.data.difficulty = this.mDifficulty;
		this.mInventory = [];
		this.mSharedObject.data.inventory = this.mInventory;
		this.mSharedObject.data.slot1 = this.mSlot1;
		this.mSharedObject.data.slot1Scope = this.mSlot1Scope;
		this.mSharedObject.data.slot2 = this.mSlot2;
		this.mSharedObject.data.slot2Scope = this.mSlot2Scope;
		this.mSharedObject.data.kills = this.mKills;
		this.mSharedObject.data.score = this.mScore;
		this.mSharedObject.data.money = this.mMoney;
		this.mSharedObject.data.life = this.mLife;
		this.mSharedObject.data.sound = this.mSound;
		this.mSharedObject.data.music = this.mMusic;
		this.mSharedObject.data.quality = this.mQuality;
		this.mSharedObject.data.weather = this.mWeather;
		this.mSharedObject.data.decals = this.mDecals;
		this.mAchievements = [];
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mAchievements.push(false);
		this.mSharedObject.data.achievements = this.mAchievements;
		this.mSharedObject.data.totalKills = this.mTotalKills;
		this.mSurvivorCategories = [];
		this.mSurvivorCategories.push([]);
		this.mSurvivorCategories.push([]);
		this.mSurvivorCategories.push([]);
		this.mSurvivorCategories.push([]);
		this.mSurvivorCategories.push([]);
		this.mSurvivorCategories.push([]);
		this.mSharedObject.data.survivorCategories = this.mSurvivorCategories;
		this.mSurvivorsAvailable = [];
		this.mSharedObject.data.survivorsAvailable = this.mSurvivorsAvailable;
		this.mSurvivorsFound = [];
		this.mSharedObject.data.survivorsFound = this.mSurvivorsFound;
		this.mSharedObject.data.survivorsLost = this.mSurvivorsLost;
		this.mAdditionalSurvivorsAvailable = [];
		this.mSharedObject.data.additionalSurvivorsAvailable = this.mAdditionalSurvivorsAvailable;
		this.mAdditionalSurvivorsFound = [];
		this.mSharedObject.data.additionalSurvivorsFound = this.mAdditionalSurvivorsFound;
		this.mWeaponsFound = [];
		this.mSharedObject.data.weaponsFound = this.mWeaponsFound;
		this.mSharedObject.data.curArea = this.mCurArea;
		this.mLocationsSearched = [];
		this.mSharedObject.data.locationsSearched = this.mLocationsSearched;
		this.mSharedObject.data.gameFinished = this.mGameFinished;
		this.mSharedObject.flush();
	} else {
		this.mFirstRun = false;
		this.mLevelNumber = this.mSharedObject.data.levelNumber;
		this.mDifficulty = this.mSharedObject.data.difficulty;
		var tmp;
		try {
			tmp = js_Boot.__cast(this.mSharedObject.data.inventory , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			tmp = null;
		}
		this.mInventory = tmp;
		this.mSlot1 = this.mSharedObject.data.slot1;
		this.mSlot1Scope = this.mSharedObject.data.slot1Scope;
		this.mSlot2 = this.mSharedObject.data.slot2;
		this.mSlot2Scope = this.mSharedObject.data.slot2Scope;
		this.mKills = this.mSharedObject.data.kills;
		this.mScore = this.mSharedObject.data.score;
		this.mMoney = this.mSharedObject.data.money;
		this.mLife = this.mSharedObject.data.life;
		var tmp1;
		try {
			tmp1 = js_Boot.__cast(this.mSharedObject.data.sound , Bool);
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			tmp1 = null;
		}
		this.mSound = tmp1;
		var tmp2;
		try {
			tmp2 = js_Boot.__cast(this.mSharedObject.data.music , Bool);
		} catch( e4 ) {
			haxe_CallStack.lastException = e4;
			var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
			tmp2 = null;
		}
		this.mMusic = tmp2;
		this.mQuality = Std.string(this.mSharedObject.data.quality);
		var tmp3;
		try {
			tmp3 = js_Boot.__cast(this.mSharedObject.data.weather , Bool);
		} catch( e6 ) {
			haxe_CallStack.lastException = e6;
			var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
			tmp3 = null;
		}
		this.mWeather = tmp3;
		var tmp4;
		try {
			tmp4 = js_Boot.__cast(this.mSharedObject.data.decals , Bool);
		} catch( e8 ) {
			haxe_CallStack.lastException = e8;
			var e9 = ((e8) instanceof js__$Boot_HaxeError) ? e8.val : e8;
			tmp4 = null;
		}
		this.mDecals = tmp4;
		var tmp5;
		try {
			tmp5 = js_Boot.__cast(this.mSharedObject.data.achievements , Array);
		} catch( e10 ) {
			haxe_CallStack.lastException = e10;
			var e11 = ((e10) instanceof js__$Boot_HaxeError) ? e10.val : e10;
			tmp5 = null;
		}
		this.mAchievements = tmp5;
		this.mTotalKills = this.mSharedObject.data.totalKills;
		this.mSurvivorCategories = this.mSharedObject.data.survivorCategories;
		this.mSurvivorsAvailable = this.mSharedObject.data.survivorsAvailable;
		this.mSurvivorsFound = this.mSharedObject.data.survivorsFound;
		this.mSurvivorsLost = this.mSharedObject.data.survivorsLost;
		this.mAdditionalSurvivorsAvailable = this.mSharedObject.data.additionalSurvivorsAvailable;
		this.mAdditionalSurvivorsFound = this.mSharedObject.data.additionalSurvivorsFound;
		this.mWeaponsFound = this.mSharedObject.data.weaponsFound;
		this.mCurArea = this.mSharedObject.data.curArea;
		this.mLocationsSearched = this.mSharedObject.data.locationsSearched;
		this.mGameFinished = this.mSharedObject.data.gameFinished;
	}
};
$hxClasses["old.singleton.LocalStorage"] = old_singleton_LocalStorage;
old_singleton_LocalStorage.__name__ = "old.singleton.LocalStorage";
old_singleton_LocalStorage.__properties__ = {get_instance:"get_instance"};
old_singleton_LocalStorage.get_instance = function() {
	if(old_singleton_LocalStorage.mInstance == null) {
		old_singleton_LocalStorage.mInstance = new old_singleton_LocalStorage();
	}
	return old_singleton_LocalStorage.mInstance;
};
old_singleton_LocalStorage.prototype = {
	mVersion: null
	,mSharedObject: null
	,mLevelNumber: null
	,mDifficulty: null
	,mInventory: null
	,mSlot1: null
	,mSlot1Scope: null
	,mSlot2: null
	,mSlot2Scope: null
	,mKills: null
	,mScore: null
	,mMoney: null
	,mLife: null
	,mSurvivorCategories: null
	,mSurvivorsAvailable: null
	,mSurvivorsFound: null
	,mSurvivorsLost: null
	,mAdditionalSurvivorsAvailable: null
	,mAdditionalSurvivorsFound: null
	,mWeaponsFound: null
	,mCurArea: null
	,mLocationsSearched: null
	,mSound: null
	,mCheckboxLogic: null
	,mMusic: null
	,mQuality: null
	,mWeather: null
	,mDecals: null
	,mAchievements: null
	,mTotalKills: null
	,mFirstRun: null
	,mGameFinished: null
	,init: function() {
	}
	,flush: function() {
		try {
			this.mSharedObject.flush();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof openfl_errors_Error)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
	}
	,clear: function() {
		this.mSharedObject.clear();
		old_singleton_LocalStorage.mInstance = new old_singleton_LocalStorage();
		this.flush();
	}
	,get_firstRun: function() {
		return this.mFirstRun;
	}
	,set_firstRun: function(value) {
		this.mFirstRun = value;
		return value;
	}
	,get_gameFinished: function() {
		return this.mGameFinished;
	}
	,set_gameFinished: function(value) {
		this.mGameFinished = value;
		this.mSharedObject.data.gameFinished = value;
		return value;
	}
	,get_levelNumber: function() {
		return this.mLevelNumber;
	}
	,set_levelNumber: function(value) {
		haxe_Log.trace("LocalStorage set_levelNumber " + value,{ fileName : "src/old/singleton/LocalStorage.hx", lineNumber : 301, className : "old.singleton.LocalStorage", methodName : "set_levelNumber"});
		this.mLevelNumber = value;
		this.mSharedObject.data.levelNumber = value;
		return value;
	}
	,get_difficulty: function() {
		return this.mDifficulty;
	}
	,set_difficulty: function(value) {
		this.mDifficulty = value;
		this.mSharedObject.data.difficulty = value;
		return value;
	}
	,get_inventory: function() {
		return this.mInventory;
	}
	,set_inventory: function(value) {
		this.mInventory = value;
		this.mSharedObject.data.inventory = value;
		return value;
	}
	,get_slot1: function() {
		return this.mSlot1;
	}
	,set_slot1: function(value) {
		this.mSlot1 = value;
		this.mSharedObject.data.slot1 = value;
		return value;
	}
	,get_slot1Scope: function() {
		return this.mSlot1Scope;
	}
	,set_slot1Scope: function(value) {
		this.mSlot1Scope = value;
		this.mSharedObject.data.slot1Scope = value;
		return value;
	}
	,get_slot2: function() {
		return this.mSlot2;
	}
	,set_slot2: function(value) {
		this.mSlot2 = value;
		this.mSharedObject.data.slot2 = value;
		return value;
	}
	,get_slot2Scope: function() {
		return this.mSlot2Scope;
	}
	,set_slot2Scope: function(value) {
		this.mSlot2Scope = value;
		this.mSharedObject.data.slot2Scope = value;
		return value;
	}
	,get_kills: function() {
		return this.mKills;
	}
	,set_kills: function(value) {
		this.mKills = value;
		this.mSharedObject.data.kills = value;
		return value;
	}
	,get_score: function() {
		return this.mScore;
	}
	,set_score: function(value) {
		this.mScore = value;
		this.mSharedObject.data.score = value;
		return value;
	}
	,get_money: function() {
		return this.mMoney;
	}
	,set_money: function(value) {
		this.mMoney = value;
		this.mSharedObject.data.money = value;
		return value;
	}
	,get_life: function() {
		return this.mLife;
	}
	,set_life: function(value) {
		this.mLife = value;
		this.mSharedObject.data.life = value;
		return value;
	}
	,get_checkboxLogic: function() {
		return this.mCheckboxLogic;
	}
	,set_checkboxLogic: function(value) {
		this.mCheckboxLogic = value;
		return value;
	}
	,get_sound: function() {
		return this.mSound;
	}
	,set_sound: function(value) {
		this.mSound = value;
		this.mSharedObject.data.sound = value;
		return value;
	}
	,get_music: function() {
		return this.mMusic;
	}
	,set_music: function(value) {
		this.mMusic = value;
		this.mSharedObject.data.music = value;
		return value;
	}
	,get_quality: function() {
		return this.mQuality;
	}
	,set_quality: function(value) {
		this.mQuality = value;
		this.mSharedObject.data.quality = value;
		return value;
	}
	,get_weather: function() {
		return this.mWeather;
	}
	,set_weather: function(value) {
		this.mWeather = value;
		this.mSharedObject.data.weather = value;
		return value;
	}
	,get_decals: function() {
		return this.mDecals;
	}
	,set_decals: function(value) {
		this.mDecals = value;
		this.mSharedObject.data.decals = value;
		return value;
	}
	,get_achievements: function() {
		return this.mAchievements;
	}
	,set_achievements: function(value) {
		this.mAchievements = value;
		this.mSharedObject.data.achievements = value;
		return value;
	}
	,get_totalKills: function() {
		return this.mTotalKills;
	}
	,set_totalKills: function(value) {
		this.mTotalKills = value;
		this.mSharedObject.data.totalKills = value;
		return value;
	}
	,get_survivorCategories: function() {
		return this.mSurvivorCategories;
	}
	,set_survivorCategories: function(value) {
		this.mSurvivorCategories = value;
		this.mSharedObject.data.survivorCategories = value;
		return value;
	}
	,get_survivorsAvailable: function() {
		return this.mSurvivorsAvailable;
	}
	,set_survivorsAvailable: function(value) {
		this.mSurvivorsAvailable = value;
		this.mSharedObject.data.survivorsAvailable = value;
		return value;
	}
	,get_survivorsFound: function() {
		return this.mSurvivorsFound;
	}
	,set_survivorsFound: function(value) {
		this.mSurvivorsFound = value;
		this.mSharedObject.data.survivorsFound = value;
		return value;
	}
	,get_survivorsLost: function() {
		return this.mSurvivorsLost;
	}
	,set_survivorsLost: function(value) {
		this.mSurvivorsLost = value;
		this.mSharedObject.data.survivorsLost = value;
		return value;
	}
	,get_weaponsFound: function() {
		return this.mWeaponsFound;
	}
	,set_weaponsFound: function(value) {
		this.mWeaponsFound = value;
		this.mSharedObject.data.weaponsFound = value;
		return value;
	}
	,get_additionalSurvivorsAvailable: function() {
		return this.mAdditionalSurvivorsAvailable;
	}
	,set_additionalSurvivorsAvailable: function(value) {
		this.mAdditionalSurvivorsAvailable = value;
		this.mSharedObject.data.additionalSurvivorsAvailable = value;
		return value;
	}
	,get_additionalSurvivorsFound: function() {
		return this.mAdditionalSurvivorsFound;
	}
	,set_additionalSurvivorsFound: function(value) {
		this.mAdditionalSurvivorsFound = value;
		this.mSharedObject.data.additionalSurvivorsFound = value;
		return value;
	}
	,get_curArea: function() {
		return this.mCurArea;
	}
	,set_curArea: function(value) {
		this.mCurArea = value;
		this.mSharedObject.data.curArea = value;
		return value;
	}
	,get_locationsSearched: function() {
		return this.mLocationsSearched;
	}
	,set_locationsSearched: function(value) {
		this.mLocationsSearched = value;
		this.mSharedObject.data.locationsSearched = value;
		return value;
	}
	,__class__: old_singleton_LocalStorage
	,__properties__: {set_locationsSearched:"set_locationsSearched",get_locationsSearched:"get_locationsSearched",set_curArea:"set_curArea",get_curArea:"get_curArea",set_additionalSurvivorsFound:"set_additionalSurvivorsFound",get_additionalSurvivorsFound:"get_additionalSurvivorsFound",set_additionalSurvivorsAvailable:"set_additionalSurvivorsAvailable",get_additionalSurvivorsAvailable:"get_additionalSurvivorsAvailable",set_weaponsFound:"set_weaponsFound",get_weaponsFound:"get_weaponsFound",set_survivorsLost:"set_survivorsLost",get_survivorsLost:"get_survivorsLost",set_survivorsFound:"set_survivorsFound",get_survivorsFound:"get_survivorsFound",set_survivorsAvailable:"set_survivorsAvailable",get_survivorsAvailable:"get_survivorsAvailable",set_survivorCategories:"set_survivorCategories",get_survivorCategories:"get_survivorCategories",set_totalKills:"set_totalKills",get_totalKills:"get_totalKills",set_achievements:"set_achievements",get_achievements:"get_achievements",set_decals:"set_decals",get_decals:"get_decals",set_weather:"set_weather",get_weather:"get_weather",set_quality:"set_quality",get_quality:"get_quality",set_music:"set_music",get_music:"get_music",set_checkboxLogic:"set_checkboxLogic",get_checkboxLogic:"get_checkboxLogic",set_sound:"set_sound",get_sound:"get_sound",set_life:"set_life",get_life:"get_life",set_money:"set_money",get_money:"get_money",set_score:"set_score",get_score:"get_score",set_kills:"set_kills",get_kills:"get_kills",set_slot2Scope:"set_slot2Scope",get_slot2Scope:"get_slot2Scope",set_slot2:"set_slot2",get_slot2:"get_slot2",set_slot1Scope:"set_slot1Scope",get_slot1Scope:"get_slot1Scope",set_slot1:"set_slot1",get_slot1:"get_slot1",set_inventory:"set_inventory",get_inventory:"get_inventory",set_difficulty:"set_difficulty",get_difficulty:"get_difficulty",set_levelNumber:"set_levelNumber",get_levelNumber:"get_levelNumber",set_gameFinished:"set_gameFinished",get_gameFinished:"get_gameFinished",set_firstRun:"set_firstRun",get_firstRun:"get_firstRun"}
};
var old_singleton_SoundPlayer = function() {
	this.mZombieAmbientCount = 0;
	this.mZombieAmbientInMenu = false;
	this.mZombieAmbientNeeded = false;
	this.mLastMusicTrack = 0;
	this.mMusicPlaying = false;
	this.mAmbientNeeded = false;
	this.mAmbientInMenu = false;
	this.mMusicOn = true;
	this.mSoundOn = true;
	this.init();
};
$hxClasses["old.singleton.SoundPlayer"] = old_singleton_SoundPlayer;
old_singleton_SoundPlayer.__name__ = "old.singleton.SoundPlayer";
old_singleton_SoundPlayer.__properties__ = {get_instance:"get_instance"};
old_singleton_SoundPlayer.get_instance = function() {
	if(old_singleton_SoundPlayer.mInstance == null) {
		old_singleton_SoundPlayer.mInstance = new old_singleton_SoundPlayer();
	}
	return old_singleton_SoundPlayer.mInstance;
};
old_singleton_SoundPlayer.prototype = {
	mSoundOn: null
	,mMusicOn: null
	,mAmbientSound: null
	,mAmbientInMenu: null
	,mAmbientNeeded: null
	,mMusicPlaying: null
	,mLastMusicTrack: null
	,mMusic1Sound: null
	,mMusic2Sound: null
	,mMusic3Sound: null
	,mBell1Sound: null
	,mBell2Sound: null
	,mAK74Sound: null
	,mM4Sound: null
	,mSCARHSound: null
	,mIngramSound: null
	,mPKMSound: null
	,mM9Sound: null
	,mMP5Sound: null
	,mM79Sound: null
	,mM79ExplosionSound: null
	,mSpringfieldSound: null
	,mRemingtonSound: null
	,mEnemy1Ak74Sound: null
	,mEnemy2Ak74Sound: null
	,mEnemy3Ak74Sound: null
	,mEnemyMg50CalSound: null
	,mExplosion: null
	,mExplosion2: null
	,mMissileLaunch: null
	,mMissileExplode: null
	,mRPGLaunch: null
	,mPullTriggerSound: null
	,mReleaseTriggerSound: null
	,mSwithcFiremodeSound: null
	,mReload1Sound: null
	,mReload2Sound: null
	,mReload3Sound: null
	,mFriendly1Sound: null
	,mFriendly2Sound: null
	,mFriendly3Sound: null
	,mBulletBody1Sound: null
	,mBulletBody2Sound: null
	,mBulletBody3Sound: null
	,mBulletSand1Sound: null
	,mBulletSand2Sound: null
	,mBulletSand3Sound: null
	,mBulletMetal1Sound: null
	,mBulletMetal2Sound: null
	,mBulletMetal3Sound: null
	,mZombieAmbientNeeded: null
	,mZombieAmbientInMenu: null
	,mZombieAmbientCount: null
	,mZombieAmbient1Sound: null
	,mZombieAmbient2Sound: null
	,mZombieAmbient3Sound: null
	,mZombieAmbient4Sound: null
	,mZombieAmbient5Sound: null
	,mZombieAmbient6Sound: null
	,mZombieAmbient7Sound: null
	,mZombieAmbient8Sound: null
	,mZombieAmbient9Sound: null
	,mZombieDeath1Sound: null
	,mZombieDeath2Sound: null
	,mZombieDeath3Sound: null
	,init: function() {
		this.mMusic1Sound = new old_helper_SoundObject("MusicSnd");
		this.mBell1Sound = new old_helper_SoundObject("Bell1Snd");
		this.mBell2Sound = new old_helper_SoundObject("Bell2Snd");
		this.mAK74Sound = new old_helper_SoundObject("Ak74Snd");
		this.mM4Sound = new old_helper_SoundObject("M4Snd");
		this.mSCARHSound = new old_helper_SoundObject("ScarHSnd");
		this.mIngramSound = new old_helper_SoundObject("M9Snd");
		this.mPKMSound = new old_helper_SoundObject("PKMSnd");
		this.mM9Sound = new old_helper_SoundObject("M9Snd");
		this.mMP5Sound = new old_helper_SoundObject("MP5Snd");
		this.mM79Sound = new old_helper_SoundObject("M79Snd");
		this.mM79ExplosionSound = new old_helper_SoundObject("M79ExplosionSnd");
		this.mSpringfieldSound = new old_helper_SoundObject("SpringfieldSnd");
		this.mRemingtonSound = new old_helper_SoundObject("RemingtonSnd");
		this.mExplosion = new old_helper_SoundObject("ExplosionSnd");
		this.mExplosion2 = new old_helper_SoundObject("Explosion2Snd");
		this.mPullTriggerSound = new old_helper_SoundObject("PullTriggerSnd");
		this.mReleaseTriggerSound = new old_helper_SoundObject("ReleaseTriggerSnd");
		this.mSwithcFiremodeSound = new old_helper_SoundObject("SwitchFiremodeSnd");
		this.mReload1Sound = new old_helper_SoundObject("Reload1Snd");
		this.mReload2Sound = new old_helper_SoundObject("Reload2Snd");
		this.mReload3Sound = new old_helper_SoundObject("Reload3Snd");
		this.mFriendly1Sound = new old_helper_SoundObject("Friendly1Snd");
		this.mFriendly2Sound = new old_helper_SoundObject("Friendly2Snd");
		this.mFriendly3Sound = new old_helper_SoundObject("Friendly3Snd");
		this.mBulletBody1Sound = new old_helper_SoundObject("BulletBody1Snd");
		this.mBulletBody2Sound = new old_helper_SoundObject("BulletBody2Snd");
		this.mBulletBody3Sound = new old_helper_SoundObject("BulletBody3Snd");
		this.mBulletSand1Sound = new old_helper_SoundObject("BulletSand1Snd");
		this.mBulletSand2Sound = new old_helper_SoundObject("BulletSand2Snd");
		this.mBulletSand3Sound = new old_helper_SoundObject("BulletSand3Snd");
		this.mZombieDeath1Sound = new old_helper_SoundObject("ZombieDeath1Snd");
		this.mZombieDeath2Sound = new old_helper_SoundObject("ZombieDeath2Snd");
		this.mZombieDeath3Sound = new old_helper_SoundObject("ZombieDeath3Snd");
	}
	,soundOn: function(onOff,_isDispatchEvent) {
		if(_isDispatchEvent == null) {
			_isDispatchEvent = true;
		}
		this.mSoundOn = onOff;
		this.music(this.mLastMusicTrack);
		if(_isDispatchEvent) {
			old_events_EventManager.get_instance().dispatchEvent(new old_events_ConfigEvent(old_events_ConfigEvent.SOUND_TOGGLED,this.mSoundOn));
		}
	}
	,musicOn: function(onOff) {
		this.mMusicOn = onOff;
		this.music(this.mLastMusicTrack);
	}
	,music: function(track) {
		if(!this.mSoundOn || !this.mMusicOn || track <= 0) {
			this.mMusic1Sound.stop();
			this.mMusicPlaying = false;
			if(track <= 0) {
				this.mLastMusicTrack = 0;
			} else {
				this.mLastMusicTrack = track;
			}
			return;
		}
		if(this.mLastMusicTrack != track || this.mLastMusicTrack == track && !this.mMusicPlaying) {
			if(track == 1) {
				this.mMusic1Sound.stop();
				this.mMusic1Sound.play(0,999999999);
				this.mMusicPlaying = true;
			} else if(track == 2) {
				this.mMusic1Sound.stop();
				this.mMusicPlaying = true;
			} else if(track == 3) {
				this.mMusic1Sound.stop();
				this.mMusicPlaying = true;
			}
		}
		this.mLastMusicTrack = track;
	}
	,ambient: function(ambientNeeded,menu) {
		if(menu == null) {
			menu = -1;
		}
		if(ambientNeeded == null) {
			ambientNeeded = -1;
		}
		if(menu == 1) {
			this.mAmbientInMenu = true;
		} else if(menu == 0) {
			this.mAmbientInMenu = false;
		}
		if(ambientNeeded == 1) {
			this.mAmbientNeeded = true;
		} else if(ambientNeeded == 0) {
			this.mAmbientNeeded = false;
		}
		if(this.mSoundOn && this.mAmbientNeeded && !this.mAmbientInMenu) {
			this.mAmbientSound.stop();
			this.mAmbientSound.play(0,99999999);
		} else {
			this.mAmbientSound.stop();
		}
	}
	,zombieAmbient2: function(onOff,zombieAmbientNeeded,menu) {
		if(menu == null) {
			menu = -1;
		}
		if(zombieAmbientNeeded == null) {
			zombieAmbientNeeded = -1;
		}
		if(onOff == null) {
			onOff = true;
		}
		if(menu == 1) {
			this.mZombieAmbientInMenu = true;
		} else if(menu == 0) {
			this.mZombieAmbientInMenu = false;
		}
		if(zombieAmbientNeeded == 1) {
			this.mZombieAmbientNeeded = true;
		} else if(zombieAmbientNeeded == 0) {
			this.mZombieAmbientNeeded = false;
		}
	}
	,click: function(nr) {
		if(nr == null) {
			nr = 1;
		}
		if(!this.mSoundOn) {
			return;
		}
		if(nr == 1) {
			this.mPullTriggerSound.play();
		} else if(nr == 2) {
			this.mReleaseTriggerSound.play();
		}
	}
	,bell: function(nr) {
		if(nr == null) {
			nr = 0;
		}
		if(!this.mSoundOn) {
			return;
		}
		if(nr == 0) {
			return;
		} else if(nr == 1) {
			this.mBell1Sound.play();
		} else if(nr == 2) {
			this.mBell2Sound.play();
		}
	}
	,shoot: function(gun) {
		if(this.mSoundOn) {
			switch(gun) {
			case 0:case 1:case 2:case 3:
				if(gun == 0) {
					this.mAK74Sound.play();
				}
				if(gun == 1) {
					this.mM4Sound.play();
				}
				if(gun == 2) {
					this.mSCARHSound.play();
				}
				this.mPKMSound.play();
				break;
			case 4:
				this.mM9Sound.play();
				break;
			case 5:
				this.mIngramSound.play();
				break;
			case 6:
				this.mM79Sound.play();
				break;
			case 7:
				this.mMP5Sound.play();
				break;
			case 8:
				this.mSpringfieldSound.play();
				break;
			case 9:
				this.mRemingtonSound.play();
				break;
			}
		}
	}
	,friendlyShoot: function() {
		if(this.mSoundOn) {
			var nr = old_helper_UsefulStuff.rnd(1,3);
			if(nr == 1) {
				this.mFriendly1Sound.play();
			} else if(nr == 2) {
				this.mFriendly2Sound.play();
			} else {
				this.mFriendly3Sound.play();
			}
		}
	}
	,explode: function(id) {
		if(id == null) {
			id = 0;
		}
		if(this.mSoundOn) {
			if(id == 0) {
				id = old_helper_UsefulStuff.rnd(0,1);
			}
			if(id == 0) {
				this.mExplosion.play();
			} else if(id == 1) {
				this.mExplosion2.play();
			} else if(id == -1) {
				this.mM79ExplosionSound.play();
			}
		}
	}
	,pullTrigger: function(on) {
		if(this.mSoundOn) {
			if(on) {
				this.mPullTriggerSound.play();
			} else {
				this.mReleaseTriggerSound.play();
			}
		}
	}
	,switchFiremode: function() {
		if(this.mSoundOn) {
			this.mSwithcFiremodeSound.play();
		}
	}
	,reload: function(i) {
		if(this.mSoundOn) {
			if(i == 1) {
				this.mReload1Sound.play();
			} else if(i == 2) {
				this.mReload2Sound.play();
			} else {
				this.mReload3Sound.play();
			}
		}
	}
	,impact: function(type) {
		if(this.mSoundOn) {
			var lNr = 1;
			if(type == 0) {
				lNr = old_helper_UsefulStuff.rnd(1,3);
				if(lNr == 1) {
					this.mBulletBody1Sound.play();
				} else if(lNr == 2) {
					this.mBulletBody2Sound.play();
				} else if(lNr == 3) {
					this.mBulletBody3Sound.play();
				}
			} else if(type == 1) {
				lNr = old_helper_UsefulStuff.rnd(1,3);
				if(lNr == 1) {
					this.mBulletSand1Sound.play();
				} else if(lNr == 2) {
					this.mBulletSand2Sound.play();
				} else if(lNr == 3) {
					this.mBulletSand3Sound.play();
				}
			} else if(type == 2) {
				lNr = old_helper_UsefulStuff.rnd(1,3);
				if(lNr == 1) {
					this.mBulletMetal1Sound.play();
				} else if(lNr == 2) {
					this.mBulletMetal2Sound.play();
				} else if(lNr == 3) {
					this.mBulletMetal3Sound.play();
				}
			}
		}
	}
	,enemyDeath: function(id) {
		if(id == null) {
			id = -1;
		}
		if(this.mSoundOn) {
			if(id == -1) {
				id = old_helper_UsefulStuff.rnd(0,1);
			}
			if(id == 0) {
				this.mZombieDeath1Sound.play();
			} else if(id == 1) {
				this.mZombieDeath2Sound.play();
			} else if(id == 2) {
				this.mZombieDeath3Sound.play();
			}
		}
	}
	,zombieAmbient: function(id) {
		if(id == null) {
			id = -1;
		}
		if(this.mSoundOn) {
			if(id == -1) {
				id = old_helper_UsefulStuff.rnd(1,9);
			}
			if(id == 1) {
				this.mZombieAmbient1Sound.play();
			} else if(id == 2) {
				this.mZombieAmbient2Sound.play();
			} else if(id == 3) {
				this.mZombieAmbient3Sound.play();
			} else if(id == 4) {
				this.mZombieAmbient4Sound.play();
			} else if(id == 5) {
				this.mZombieAmbient5Sound.play();
			} else if(id == 6) {
				this.mZombieAmbient6Sound.play();
			} else if(id == 7) {
				this.mZombieAmbient7Sound.play();
			} else if(id == 8) {
				this.mZombieAmbient8Sound.play();
			} else if(id == 9) {
				this.mZombieAmbient9Sound.play();
			}
		}
	}
	,__class__: old_singleton_SoundPlayer
};
var old_systems_System = function() {
	this.mCannotBePaused = false;
	this.mRunning = true;
	this.mChildSystemList = [];
	this.mEventList = [];
};
$hxClasses["old.systems.System"] = old_systems_System;
old_systems_System.__name__ = "old.systems.System";
old_systems_System.prototype = {
	mEventList: null
	,mChildSystemList: null
	,mRunning: null
	,mCannotBePaused: null
	,get_isRunning: function() {
		return this.mRunning;
	}
	,get_children: function() {
		return this.mChildSystemList;
	}
	,get_cannotBePaused: function() {
		return this.mCannotBePaused;
	}
	,set_cannotBePaused: function(value) {
		this.mCannotBePaused = value;
		return value;
	}
	,pause: function(children) {
		if(children == null) {
			children = true;
		}
		if(this.mRunning) {
			this.beforePause();
			this.mRunning = false;
			if(children) {
				var _g = 0;
				var _g1 = this.mChildSystemList;
				while(_g < _g1.length) {
					var lChildSystem = _g1[_g];
					++_g;
					lChildSystem.pause(true);
				}
			}
		}
	}
	,beforePause: function() {
	}
	,resume: function(children) {
		if(children == null) {
			children = true;
		}
		if(!this.mRunning) {
			this.mRunning = true;
			if(children) {
				var _g = 0;
				var _g1 = this.mChildSystemList;
				while(_g < _g1.length) {
					var lChildSystem = _g1[_g];
					++_g;
					lChildSystem.resume(true);
				}
			}
			this.afterResume();
		}
	}
	,afterResume: function() {
	}
	,pauseOrResume: function(children) {
		if(children == null) {
			children = true;
		}
		if(this.mRunning) {
			this.mRunning = false;
			this.removeListeners();
			if(children) {
				var _g = 0;
				var _g1 = this.mChildSystemList;
				while(_g < _g1.length) {
					var lChildSystem = _g1[_g];
					++_g;
					lChildSystem.pause(true);
				}
			}
		} else {
			this.mRunning = true;
			this.addListeners();
			if(children) {
				var _g2 = 0;
				var _g11 = this.mChildSystemList;
				while(_g2 < _g11.length) {
					var lChildSystem1 = _g11[_g2];
					++_g2;
					lChildSystem1.resume(true);
				}
			}
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		var lEvent = new old_systems_EventInfo(type,listener,useCapture,priority,useWeakReference);
		if(this.containsEvent(this.mEventList,type) < 0) {
			this.mEventList.push(lEvent);
			old_events_EventManager.get_instance().addEventListener(type,listener,useCapture,priority,useWeakReference);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Can't add! Event " + type + " already in the list!"));
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		var lIndex = this.containsEvent(this.mEventList,type);
		if(lIndex >= 0) {
			this.mEventList.splice(lIndex,1);
			old_events_EventManager.get_instance().removeEventListener(type,listener,useCapture);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Can't remove! Event " + type + " not in the list!"));
		}
	}
	,dispatchEvent: function(e) {
		old_events_EventManager.get_instance().dispatchEvent(e);
	}
	,addChildSystem: function(sys) {
		var lLength = this.mChildSystemList.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			if(this.mChildSystemList[i] == sys) {
				throw new js__$Boot_HaxeError("Can't add! Child system already in the list!");
			}
		}
		this.mChildSystemList.push(sys);
	}
	,removeChildSystem: function(sys) {
		if(sys == null) {
			throw new js__$Boot_HaxeError("Can't remove! Child system is null!");
		}
		var lIndex = -1;
		var lLength = this.mChildSystemList.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			if(this.mChildSystemList[i] == sys) {
				lIndex = i;
				break;
			}
		}
		if(lIndex < 0) {
			throw new js__$Boot_HaxeError("Can't remove! Child system not in the list!");
		} else {
			this.mChildSystemList.splice(lIndex,1);
			sys._destroy();
		}
	}
	,update: function(dt) {
	}
	,destroy: function() {
	}
	,addListeners: function() {
		var _g = 0;
		var _g1 = this.mEventList;
		while(_g < _g1.length) {
			var lEvent = _g1[_g];
			++_g;
			old_events_EventManager.get_instance().addEventListener(lEvent.type,lEvent.listener,lEvent.useCapture,lEvent.priority,lEvent.useWeakReference);
		}
	}
	,removeListeners: function() {
		var _g = 0;
		var _g1 = this.mEventList;
		while(_g < _g1.length) {
			var lEvent = _g1[_g];
			++_g;
			old_events_EventManager.get_instance().removeEventListener(lEvent.type,lEvent.listener,lEvent.useCapture);
		}
	}
	,_update: function(dt) {
		if(this.mRunning) {
			this.update(dt);
			var _g = 0;
			var _g1 = this.mChildSystemList;
			while(_g < _g1.length) {
				var lChildSystem = _g1[_g];
				++_g;
				lChildSystem._update(dt);
			}
		}
	}
	,_destroy: function() {
		this.mRunning = false;
		this.removeListeners();
		this.destroy();
		while(this.mChildSystemList.length > 0) this.removeChildSystem(this.mChildSystemList[0]);
	}
	,containsEvent: function(array,type) {
		var length = array.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var tmp;
			try {
				tmp = js_Boot.__cast(array[i] , old_systems_EventInfo);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				tmp = null;
			}
			if(tmp.type == type) {
				return i;
			}
		}
		return -1;
	}
	,__class__: old_systems_System
	,__properties__: {set_cannotBePaused:"set_cannotBePaused",get_cannotBePaused:"get_cannotBePaused",get_children:"get_children",get_isRunning:"get_isRunning"}
};
var old_systems_AchievementSystem = function(player) {
	this.mTweener = null;
	this.mHeadshotStreak = 0;
	this.mPlayer = null;
	this.mNotificationTimer = null;
	this.mQueue = null;
	this.mText = null;
	this.mNotification = null;
	this.mMainGraphics = null;
	old_systems_System.call(this);
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mPlayer = player;
	this.mText = new old_systems_uI_UILabel("",320,120,"Ampersand",32,3750201,true,false,"center",0,400,200);
	this.mMainGraphics.addChild(this.mText.get_mainGraphics());
	this.mTweener = new old_helper_Tweener(this.mText.get_mainGraphics(),$bind(this,this.onTweener));
	this.mTweener.isf_can_be_running = true;
	this.mTweener.addTween("Show","alpha",0,1,0.15,22);
	this.mTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mQueue = [];
	this.mNotificationTimer = new openfl_utils_Timer(150,1);
	this.mNotificationTimer.addEventListener("timer",$bind(this,this.onNotificationTimer));
	old_singleton_GameWorld.get_instance().get_hudContainer().addChild(this.mMainGraphics);
	this.addEventListener(old_events_EnemyEvent.ENEMY_SOLDIER_KILLED,$bind(this,this.onEnemySoldierKilled));
};
$hxClasses["old.systems.AchievementSystem"] = old_systems_AchievementSystem;
old_systems_AchievementSystem.__name__ = "old.systems.AchievementSystem";
old_systems_AchievementSystem.__super__ = old_systems_System;
old_systems_AchievementSystem.prototype = $extend(old_systems_System.prototype,{
	mMainGraphics: null
	,mNotification: null
	,mText: null
	,mQueue: null
	,mNotificationTimer: null
	,mPlayer: null
	,mHeadshotStreak: null
	,mTweener: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,onEnemySoldierKilled: function(e) {
		if(e.byFriendly) {
			this.notify("+5",0);
			this.mPlayer.addScore(5);
			return;
		}
		this.mPlayer.addKills(1);
		if(e.gun == null) {
			this.notify("+10",0);
			this.mPlayer.addScore(10);
			return;
		}
		if(e.hitZone == 0) {
			if(!e.enemy.get_moving()) {
				this.notify("Headshot!\n+10",0);
				this.mPlayer.addScore(10);
			}
			this.mHeadshotStreak++;
			if(this.mHeadshotStreak == 5) {
				this.notify("5 headshot streak!\n+5",1);
				this.mPlayer.addScore(5);
			}
			if(this.mHeadshotStreak == 10) {
				this.notify("10 headshot streak!\n+10",1);
				this.mPlayer.addScore(10);
			}
		} else if(e.hitZone > 0) {
			this.mHeadshotStreak = 0;
			this.notify("+5",0);
			this.mPlayer.addScore(5);
		} else if(e.hitZone < 0) {
			this.notify("+5",0);
			this.mPlayer.addScore(5);
		}
	}
	,notify: function(text,sound,color) {
		if(color == null) {
			color = 0;
		}
		this.mQueue.push((sound == null ? "null" : "" + sound) + ((color == null ? "null" : "" + color) + text));
		var lLength = this.mQueue.length;
		if(lLength == 1) {
			this.mText.set_text(HxOverrides.substr(Std.string(this.mQueue[0]),2,null));
			if(color == 0) {
				this.mText.set_fontColor(16777215);
			} else if(color == 1) {
				this.mText.set_fontColor(16711680);
			}
			this.mTweener.start("Show");
		}
	}
	,onTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mNotificationTimer.reset();
			var lDelay = this.mText.get_text().length * 20;
			if(lDelay < 350) {
				lDelay = 350;
			}
			this.mNotificationTimer.set_delay(lDelay);
			this.mNotificationTimer.start();
			old_singleton_SoundPlayer.get_instance().bell(Std.parseInt(HxOverrides.substr(Std.string(this.mQueue[0]),0,1)));
		} else if(tweenSet == "Hide") {
			this.mQueue.shift();
			var lLength = this.mQueue.length;
			if(lLength > 0) {
				this.mText.set_text(HxOverrides.substr(Std.string(this.mQueue[0]),2,null));
				var lColor = Std.parseInt(HxOverrides.substr(Std.string(this.mQueue[0]),1,1));
				if(lColor == 0) {
					this.mText.set_fontColor(16777215);
				} else if(lColor == 1) {
					this.mText.set_fontColor(16724787);
				}
				this.mTweener.start("Show");
				old_singleton_SoundPlayer.get_instance().bell(Std.parseInt(HxOverrides.substr(Std.string(this.mQueue[0]),0,1)));
			}
		}
	}
	,onNotificationTimer: function(e) {
		this.mTweener.start("Hide");
	}
	,update: function(dt) {
		this.mTweener.update(dt);
		if(this.mTweener.get_curTweenSet() == "Show" && this.mText.get_mainGraphics().get_alpha() < 1) {
			this.mText.get_mainGraphics().set_alpha(this.mTweener.getTween("Show","alpha").get_curValue());
		} else if(this.mTweener.get_curTweenSet() == "Hide" && this.mText.get_mainGraphics().get_alpha() > 0) {
			this.mText.get_mainGraphics().set_alpha(this.mTweener.getTween("Hide","alpha").get_curValue());
		}
	}
	,destroy: function() {
		this.removeEventListener(old_events_EnemyEvent.ENEMY_SOLDIER_KILLED,$bind(this,this.onEnemySoldierKilled));
		this.mNotificationTimer.stop();
		this.mNotificationTimer.removeEventListener("timer",$bind(this,this.onNotificationTimer));
	}
	,__class__: old_systems_AchievementSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_mainGraphics:"get_mainGraphics"})
});
var old_systems_BulletFlightTimeSystem = function(player) {
	this.mUpdateTime = 0;
	this.mUpdateFrequency = 5;
	this.mPlayer = null;
	this.mBulletList = [];
	this.bulletPool = new Pool_$old_$entities_$impact_$Bullet();
	this.mEnemySystem = null;
	old_systems_System.call(this);
	this.mPlayer = player;
};
$hxClasses["old.systems.BulletFlightTimeSystem"] = old_systems_BulletFlightTimeSystem;
old_systems_BulletFlightTimeSystem.__name__ = "old.systems.BulletFlightTimeSystem";
old_systems_BulletFlightTimeSystem.__super__ = old_systems_System;
old_systems_BulletFlightTimeSystem.prototype = $extend(old_systems_System.prototype,{
	mEnemySystem: null
	,bulletPool: null
	,mBulletList: null
	,mPlayer: null
	,mUpdateFrequency: null
	,mUpdateTime: null
	,get_enemySystem: function() {
		return this.mEnemySystem;
	}
	,set_enemySystem: function(value) {
		this.mEnemySystem = value;
		return value;
	}
	,addBullet: function(x,y,gun,caliber,velocity,time) {
		var lBullet = new old_entities_impact_Bullet();
		lBullet.reset(x,y,gun,caliber | 0,velocity,time);
		if(time >= 0) {
			this.mBulletList.push(lBullet);
		} else {
			if(caliber == 4000) {
				this.mEnemySystem.grenadeImpact(lBullet);
			} else {
				this.mEnemySystem.bulletImpact(lBullet);
			}
			lBullet.destroy();
		}
	}
	,removeBullet: function(bullet) {
		HxOverrides.remove(this.mBulletList,bullet);
		bullet.destroy();
	}
	,update: function(dt) {
		this.mUpdateTime += dt;
		if(this.mUpdateTime >= this.mUpdateFrequency) {
			this.mUpdateTime = 0;
			var _g = 0;
			var _g1 = this.mBulletList;
			while(_g < _g1.length) {
				var lBullet = _g1[_g];
				++_g;
				if(lBullet != null) {
					if(!lBullet.get_active()) {
						this.removeBullet(lBullet);
						lBullet = null;
					}
				}
			}
		}
	}
	,shotFired: function(gun) {
		var x = this.mPlayer.get_aimX();
		var y = this.mPlayer.get_aimY();
		var time = 250 / gun.get_velocity();
		haxe_Log.trace("shotFired " + time,{ fileName : "src/old/systems/BulletFlightTimeSystem.hx", lineNumber : 117, className : "old.systems.BulletFlightTimeSystem", methodName : "shotFired"});
		this.addBullet(x,y,gun,gun.get_caliber(),gun.get_velocity(),time);
	}
	,beforePause: function() {
		var _g = 0;
		var _g1 = this.mBulletList;
		while(_g < _g1.length) {
			var lBullet = _g1[_g];
			++_g;
			if(lBullet != null) {
				lBullet.pause();
			}
		}
	}
	,afterResume: function() {
		var _g = 0;
		var _g1 = this.mBulletList;
		while(_g < _g1.length) {
			var lBullet = _g1[_g];
			++_g;
			if(lBullet != null) {
				lBullet.resume();
			}
		}
	}
	,destroy: function() {
		while(this.mBulletList.length > 0) this.removeBullet(this.mBulletList.pop());
	}
	,__class__: old_systems_BulletFlightTimeSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{set_enemySystem:"set_enemySystem",get_enemySystem:"get_enemySystem"})
});
var old_systems_EffectSystem = function() {
	this.mEffectPool = new Pool_$old_$entities_$effects_$Effect();
	this.mEffectList = [];
	old_systems_System.call(this);
	this.mEffectList = [];
	this.mEffectPool = new Pool_$old_$entities_$effects_$Effect();
	this.addEventListener("EffectEffect",$bind(this,this.onEffect));
};
$hxClasses["old.systems.EffectSystem"] = old_systems_EffectSystem;
old_systems_EffectSystem.__name__ = "old.systems.EffectSystem";
old_systems_EffectSystem.__super__ = old_systems_System;
old_systems_EffectSystem.prototype = $extend(old_systems_System.prototype,{
	mEffectList: null
	,mEffectPool: null
	,addEffect: function(frame,x,y,direction,alpha,depth) {
		if(depth == null) {
			depth = 0;
		}
		if(alpha == null) {
			alpha = 1;
		}
		var lEffect = new old_entities_effects_Effect();
		lEffect.reset(frame,x,y,direction,alpha);
		this.mEffectList.push(lEffect);
		old_singleton_GameWorld.get_instance().addEffect2(lEffect.get_mainGraphics());
		return lEffect;
	}
	,removeEffect: function(effect) {
		if(effect != null) {
			effect.destroy();
			var lIndex = Lambda.indexOf(this.mEffectList,effect);
			this.mEffectList.splice(lIndex,1);
			old_singleton_GameWorld.get_instance().removeEffect2(effect.get_mainGraphics());
		}
	}
	,update: function(dt) {
		var i = 0;
		while(this.mEffectList.length > i) {
			this.mEffectList[i].update(dt);
			if(!this.mEffectList[i].get_enabled()) {
				this.removeEffect(this.mEffectList[i]);
				--i;
			}
			++i;
		}
	}
	,onEffect: function(e) {
		this.addEffect(e.frame,e.x,e.y,e.direction,e.alpha,e.depth);
	}
	,beforePause: function() {
		var _g = 0;
		var _g1 = this.mEffectList;
		while(_g < _g1.length) {
			var lEffect = _g1[_g];
			++_g;
			lEffect.pause();
		}
	}
	,afterResume: function() {
		var _g = 0;
		var _g1 = this.mEffectList;
		while(_g < _g1.length) {
			var lEffect = _g1[_g];
			++_g;
			lEffect.resume();
		}
	}
	,destroy: function() {
		while(this.mEffectList.length > 0) this.removeEffect(this.mEffectList[0]);
		this.mEffectList = null;
		this.removeEventListener("EffectEffect",$bind(this,this.onEffect));
	}
	,__class__: old_systems_EffectSystem
});
var old_systems_EnemySystem = function(player) {
	this.mExplosionVector = null;
	this.mForCalculateShot = new openfl_geom_Point();
	this.mNeutralisedCount = 0;
	this.mEnemyContainer = old_MainOld.getInstance().builder.createSprite();
	this.mEnemyList = [];
	this.mPlayer = null;
	old_systems_System.call(this);
	this.mPlayer = player;
	this.mEnemyContainer = old_singleton_GameWorld.get_instance().get_objectContainer();
	this.addEventListener(old_events_BulletEvent.BULLET_ARRIVED,$bind(this,this.bulletArrived));
	this.addEventListener(old_events_BulletEvent.GRENADE_ARRIVED,$bind(this,this.grenadeArrived));
	this.addEventListener(old_events_BulletEvent.WORLD_EXPLOSION,$bind(this,this.worldExplosion));
	this.mExplosionVector = new old_uk_co_bigroom_geom_Vector2D();
};
$hxClasses["old.systems.EnemySystem"] = old_systems_EnemySystem;
old_systems_EnemySystem.__name__ = "old.systems.EnemySystem";
old_systems_EnemySystem.__super__ = old_systems_System;
old_systems_EnemySystem.prototype = $extend(old_systems_System.prototype,{
	mPlayer: null
	,mEnemyList: null
	,mEnemyContainer: null
	,mNeutralisedCount: null
	,mForCalculateShot: null
	,mExplosionVector: null
	,addEnemy: function(mainGraphics,skin,timeOfDay,life,x,y,distanceToMove,speedX,speedY,depth,damage) {
		var newEnemy = new old_entities_enemies_Enemy1(mainGraphics,skin,timeOfDay,life,x,y,distanceToMove,speedX,speedY,depth,damage);
		this.mEnemyList.push(newEnemy);
	}
	,addEnemyObject: function(enemy) {
		this.mEnemyList.push(enemy);
	}
	,createEnemies: function(enemy1,enemy2,enemy3,enemy4,enemy5,enemy6,enemy7,enemy8,levelNumber) {
		var lStartX = 430;
		var lEndX = 1010;
		var lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
		var lLength = lEndX - lStartX;
		var lCenter = lLength / 2;
		var lTimeOfDay = this.mPlayer.get_timeOfDay();
		var lSpawnModifier = 1.3;
		if(levelNumber > 25) {
			lSpawnModifier = 1.4;
		}
		if(levelNumber > 30) {
			lSpawnModifier = 1.5;
		}
		var lSpeedX = 0;
		var _g = 0;
		var _g1 = enemy1;
		while(_g < _g1) {
			var i = _g++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy1_Anim",1,lTimeOfDay,300,lX,350,old_helper_UsefulStuff.rnd(1,enemy1),lSpeedX,old_helper_UsefulStuff.rnd(4,6),0,700);
		}
		var _g2 = 0;
		var _g3 = enemy2;
		while(_g2 < _g3) {
			var j = _g2++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy2_Anim",2,lTimeOfDay,350,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(6,8),0,800);
		}
		var _g4 = 0;
		var _g5 = enemy3;
		while(_g4 < _g5) {
			var k = _g4++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy3_Anim",3,lTimeOfDay,350,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(8,10),0,800);
		}
		var _g6 = 0;
		var _g7 = enemy4;
		while(_g6 < _g7) {
			var l = _g6++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy4_Anim",4,lTimeOfDay,200,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(12,17),0,500);
		}
		var _g8 = 0;
		var _g9 = enemy5;
		while(_g8 < _g9) {
			var m = _g8++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy5_Anim",5,lTimeOfDay,600,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(5,7),0,1200);
		}
		var _g10 = 0;
		var _g11 = enemy6;
		while(_g10 < _g11) {
			var n = _g10++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy6_Anim",6,lTimeOfDay,300,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(5,7),0,700);
		}
		var _g12 = 0;
		var _g13 = enemy7;
		while(_g12 < _g13) {
			var o = _g12++;
			lX = old_helper_UsefulStuff.rnd(lStartX,lEndX);
			lSpeedX = ((lX - lStartX) / lLength - 0.5) * 2 * old_helper_UsefulStuff.rnd(1,2);
			this.addEnemy("Enemies_Enemy7_Anim",7,lTimeOfDay,600,lX,350,old_helper_UsefulStuff.rnd(1,enemy1 * lSpawnModifier),lSpeedX,old_helper_UsefulStuff.rnd(10,15),0,1200);
		}
		this.addEnemiesToDisplayList();
	}
	,addEnemiesToDisplayList: function() {
		this.mEnemyList.sort($bind(this,this.sortEnemies));
	}
	,sortEnemies: function(x,y) {
		if(x.get_mainGraphics().get_y() < y.get_mainGraphics().get_y()) {
			return -1;
		} else if(y.get_mainGraphics().get_y() < x.get_mainGraphics().get_y()) {
			return 1;
		} else {
			return 0;
		}
	}
	,removeEnemy: function(enemy) {
		if(enemy != null) {
			enemy.destroy();
			var index = Lambda.indexOf(this.mEnemyList,enemy);
			this.mEnemyList.splice(index,1);
			old_singleton_GameWorld.get_instance().removeObject(enemy.get_mainGraphics());
		}
		if(this.mEnemyList.length <= this.mNeutralisedCount) {
			this.dispatchEvent(new old_events_LevelEvent("LevelAllClear"));
		}
	}
	,update: function(dt) {
		var lTempEnemy = null;
		var i = this.mEnemyList.length - 1;
		while(i >= 0) {
			lTempEnemy = this.mEnemyList[i];
			if(lTempEnemy != null) {
				if(lTempEnemy.get_globalState() == 3) {
					this.removeEnemy(lTempEnemy);
					lTempEnemy = null;
				} else if(lTempEnemy.get_globalState() == 4) {
					this.mNeutralisedCount++;
					this.removeEnemy(null);
					lTempEnemy.set_globalState(5);
				} else {
					lTempEnemy.update(dt);
				}
			}
			--i;
		}
		old_singleton_GameWorld.get_instance().sortObjects();
		this.mEnemyList.sort($bind(this,this.sortEnemies));
	}
	,bulletImpact: function(bullet) {
		var lGlobalStateDying = 1;
		var lGlobalStateDead = 2;
		var lGlobalStateDeleteReady = 3;
		var lLength = this.mEnemyList.length;
		var lTempEnemy = null;
		var stageCoords = new openfl_geom_Point(bullet.get_x(),bullet.get_y());
		var i = lLength - 1;
		while(i >= 0) {
			lTempEnemy = this.mEnemyList[i];
			if(lTempEnemy != null && (lTempEnemy.get_globalState() != lGlobalStateDying && lTempEnemy.get_globalState() != lGlobalStateDead && lTempEnemy.get_globalState() != lGlobalStateDeleteReady)) {
				var rect = lTempEnemy.get_mainGraphics().getBounds(lTempEnemy.get_mainGraphics().get_parent());
				if(rect.containsPoint(stageCoords)) {
					var tmp = stageCoords.x - rect.x;
					var tmp1 = lTempEnemy.get_mainGraphics().get_scaleX();
					this.mForCalculateShot.x = tmp / tmp1;
					var tmp2 = (stageCoords.y - rect.y) / lTempEnemy.get_mainGraphics().get_scaleX();
					this.mForCalculateShot.y = tmp2 + 13;
					bullet.set_active(lTempEnemy.takeDamage(this.mForCalculateShot,bullet.get_x(),bullet.get_y(),bullet.get_caliber(),bullet.get_velocity(),bullet.get_gun()));
				}
			}
			if(!bullet.get_active()) {
				break;
			}
			--i;
		}
		if(bullet.get_active()) {
			this.dispatchEvent(new old_events_EnemyEvent(old_events_EnemyEvent.ENEMY_SOLDIER_MISSED,null,bullet.get_gun(),0));
			this.dispatchEvent(new old_events_EffectEvent("EffectEffect",bullet.get_x(),bullet.get_y(),old_helper_UsefulStuff.rnd(-20,20),1,1,bullet.get_y()));
			old_singleton_SoundPlayer.get_instance().impact(1);
			bullet.set_active(false);
		}
	}
	,bulletArrived: function(e) {
		var lBullet = e.bullet;
		this.bulletImpact(lBullet);
	}
	,grenadeImpact: function(bullet) {
		old_singleton_SoundPlayer.get_instance().explode(-1);
		var lGlobalStateDying = 1;
		var lGlobalStateDead = 2;
		var lGlobalStateDeleteReady = 3;
		var lLength = this.mEnemyList.length;
		var lTempEnemy = null;
		var lExplosionVectorLength = 0;
		var lExplosionVectorAngle = 0;
		var lExplosionVectorSin = 0;
		var lExplosionVectorCos = 0;
		var lMaxRadiusA = bullet.get_maxRadius();
		var lMaxRadiusB = lMaxRadiusA * 0.5;
		var lMinRadiusA = bullet.get_minRadius();
		var lMinRadiusB = lMinRadiusA * 0.5;
		var lMaxRadius = 0;
		var lMinRadius = 0;
		haxe_Log.trace(lMaxRadiusA + " : " + lMaxRadiusB,{ fileName : "src/old/systems/EnemySystem.hx", lineNumber : 309, className : "old.systems.EnemySystem", methodName : "grenadeImpact"});
		var lDeadCounter = 0;
		var i = lLength - 1 | 0;
		while(i >= 0) {
			lTempEnemy = this.mEnemyList[i];
			if(lTempEnemy != null && (lTempEnemy.get_globalState() != lGlobalStateDying && lTempEnemy.get_globalState() != lGlobalStateDead && lTempEnemy.get_globalState() != lGlobalStateDeleteReady)) {
				this.mExplosionVector.reset(lTempEnemy.get_mainGraphics().get_x(),lTempEnemy.get_mainGraphics().get_y());
				this.mExplosionVector.x -= bullet.get_x();
				this.mExplosionVector.y -= bullet.get_y();
				lExplosionVectorLength = this.mExplosionVector.get_length();
				lExplosionVectorAngle = this.mExplosionVector.get_angle();
				lExplosionVectorSin = Math.sin(old_helper_UsefulStuff.degreeToRadian(lExplosionVectorAngle));
				lExplosionVectorSin *= lExplosionVectorSin;
				lExplosionVectorCos = Math.cos(old_helper_UsefulStuff.degreeToRadian(lExplosionVectorAngle));
				lExplosionVectorCos *= lExplosionVectorCos;
				lMaxRadius = lMaxRadiusB * lExplosionVectorSin + lMaxRadiusA * lExplosionVectorCos;
				lMinRadius = lMinRadiusB * lExplosionVectorSin + lMinRadiusA * lExplosionVectorCos;
				var lDamage = 0;
				if(lExplosionVectorLength <= lMinRadius) {
					lDamage = 750;
					if(lTempEnemy.takeDamageFromExplosion(lDamage,bullet.get_gun())) {
						++lDeadCounter;
					}
				} else if(lExplosionVectorLength <= lMaxRadius) {
					lDamage = old_helper_UsefulStuff.rnd(100,500);
					if(lTempEnemy.takeDamageFromExplosion(lDamage,bullet.get_gun())) {
						++lDeadCounter;
					}
				}
			}
			--i;
		}
		bullet.set_active(false);
		this.dispatchEvent(new old_events_EffectEvent("EffectEffect",bullet.get_x(),bullet.get_y(),0,1,5,bullet.get_y()));
		if(old_singleton_LocalStorage.get_instance().get_decals()) {
			var mGrenadeCrater = old_MainOld.getInstance().builder.createAnimation("BloodDecal");
			mGrenadeCrater.gotoFrame(13);
			mGrenadeCrater.stop();
			mGrenadeCrater.set_scaleX(mGrenadeCrater.set_scaleY((bullet.get_y() - mGrenadeCrater.get_height() / 1.5) / 960));
			old_singleton_GameWorld.get_instance().blitMovieClipToBackground(mGrenadeCrater,bullet.get_x() - mGrenadeCrater.get_width() / 2,bullet.get_y() - mGrenadeCrater.get_height() / 1.5);
		}
	}
	,grenadeArrived: function(e) {
		var lBullet = e.bullet;
		this.grenadeImpact(lBullet);
	}
	,worldExplosion: function(e) {
	}
	,findTargetForSniper: function() {
		var lTries = 0;
		var lFound = false;
		var lEnemy = null;
		while(!lFound) {
			++lTries;
			var lIndex = old_helper_UsefulStuff.rnd(0,this.mEnemyList.length - 1);
			lEnemy = this.mEnemyList[lIndex];
			if(lEnemy != null && lEnemy.get_alive()) {
				return lEnemy;
			}
			if(lTries > 10) {
				break;
			}
		}
		return null;
	}
	,beforePause: function() {
		var _g = 0;
		var _g1 = this.mEnemyList;
		while(_g < _g1.length) {
			var lEnemy = _g1[_g];
			++_g;
			if(lEnemy != null) {
				lEnemy.pause();
			}
		}
	}
	,afterResume: function() {
		var length = this.mEnemyList.length;
		var lTempEnemy = null;
		var _g = 0;
		var _g1 = this.mEnemyList;
		while(_g < _g1.length) {
			var lEnemy = _g1[_g];
			++_g;
			if(lEnemy != null) {
				lEnemy.resume();
			}
		}
	}
	,destroy: function() {
		while(this.mEnemyList.length > 0) this.removeEnemy(this.mEnemyList[0]);
		this.removeEventListener(old_events_BulletEvent.BULLET_ARRIVED,$bind(this,this.bulletArrived));
		this.removeEventListener(old_events_BulletEvent.GRENADE_ARRIVED,$bind(this,this.grenadeArrived));
		this.removeEventListener(old_events_BulletEvent.WORLD_EXPLOSION,$bind(this,this.worldExplosion));
	}
	,__class__: old_systems_EnemySystem
});
var old_systems_FriendliesSystem = function(player,enemySystem) {
	this.mTime = 0;
	this.mWokenUp = false;
	this.mNumber = 0;
	this.mFriendliesList = null;
	this.mEnemySystem = null;
	this.mPlayer = null;
	old_systems_System.call(this);
	this.mPlayer = player;
	this.mEnemySystem = enemySystem;
	this.mFriendliesList = [];
	this.createFriendlies();
};
$hxClasses["old.systems.FriendliesSystem"] = old_systems_FriendliesSystem;
old_systems_FriendliesSystem.__name__ = "old.systems.FriendliesSystem";
old_systems_FriendliesSystem.__super__ = old_systems_System;
old_systems_FriendliesSystem.prototype = $extend(old_systems_System.prototype,{
	mPlayer: null
	,mEnemySystem: null
	,mFriendliesList: null
	,mNumber: null
	,mWokenUp: null
	,mTime: null
	,get_enemySystem: function() {
		return this.mEnemySystem;
	}
	,set_enemySystem: function(value) {
		this.mEnemySystem = value;
		return value;
	}
	,createFriendlies: function() {
		this.destroy();
		var lShootingParty = this.mPlayer.get_survivors().getCategory(1);
		var lLength = lShootingParty.length;
		var lFriendly = null;
		var lSurvivor = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivor = lShootingParty[i];
			lFriendly = new old_entities_friendlies_Friendly(lSurvivor.get_skillFighting(),this.mPlayer,this.mEnemySystem);
			this.mFriendliesList.push(lFriendly);
		}
	}
	,update: function(dt) {
		if(!this.mWokenUp) {
			this.mTime += dt;
			if(this.mTime > 2) {
				this.mWokenUp = true;
				var _g = 0;
				var _g1 = this.mFriendliesList;
				while(_g < _g1.length) {
					var lFriendly = _g1[_g];
					++_g;
					lFriendly.wakeUp();
				}
			}
		}
	}
	,beforePause: function() {
		var _g = 0;
		var _g1 = this.mFriendliesList;
		while(_g < _g1.length) {
			var lFriendly = _g1[_g];
			++_g;
			lFriendly.pause();
		}
	}
	,afterResume: function() {
		var _g = 0;
		var _g1 = this.mFriendliesList;
		while(_g < _g1.length) {
			var lFriendly = _g1[_g];
			++_g;
			lFriendly.resume();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.mFriendliesList;
		while(_g < _g1.length) {
			var lFriendly = _g1[_g];
			++_g;
			lFriendly.destroy();
		}
	}
	,__class__: old_systems_FriendliesSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{set_enemySystem:"set_enemySystem",get_enemySystem:"get_enemySystem"})
});
var old_systems_GameSystem = function(player) {
	this.mLevelEndedTimer = null;
	this.mLevelCompleted = false;
	this.mLevelEnded = false;
	this.mGameFinished = true;
	this.mGameInProgress = false;
	this.mLevelSystem = null;
	old_systems_System.call(this);
	this.mPlayer = player;
	this.mLevelEndedTimer = new openfl_utils_Timer(500,1);
	this.mLevelEndedTimer.addEventListener("timerComplete",$bind(this,this.onLevelEndedTimer));
	this.addEventListener("GameResetProgress",$bind(this,this.onResetProgress));
	this.addEventListener("GameLoadLevel",$bind(this,this.onLoadLevel));
	this.addEventListener("GamePause",$bind(this,this.onPauseGame));
	this.addEventListener("GameResume",$bind(this,this.onResumeGame));
	this.addEventListener("GameSkipLevel",$bind(this,this.onSkipLevel));
	this.addEventListener("LevelCompleted",$bind(this,this.onLevelCompleted));
	this.addEventListener("LevelFailed",$bind(this,this.onLevelFailed));
	this.mGameFinished = old_singleton_LocalStorage.get_instance().get_gameFinished();
};
$hxClasses["old.systems.GameSystem"] = old_systems_GameSystem;
old_systems_GameSystem.__name__ = "old.systems.GameSystem";
old_systems_GameSystem.__super__ = old_systems_System;
old_systems_GameSystem.prototype = $extend(old_systems_System.prototype,{
	mLevelSystem: null
	,mPlayer: null
	,mGameInProgress: null
	,mGameFinished: null
	,mLevelEnded: null
	,mLevelCompleted: null
	,mLevelEndedTimer: null
	,get_player: function() {
		return this.mPlayer;
	}
	,get_gameInProgress: function() {
		return this.mGameInProgress;
	}
	,set_gameInProgress: function(value) {
		this.mGameInProgress = value;
		return value;
	}
	,get_levelNumber: function() {
		return this.mPlayer.get_levelNumber();
	}
	,get_levelSystem: function() {
		return this.mLevelSystem;
	}
	,get_gameFinished: function() {
		return this.mGameFinished;
	}
	,set_gameFinished: function(value) {
		this.mGameFinished = value;
		return value;
	}
	,resetProgress: function() {
		haxe_Log.trace("resetProgress ",{ fileName : "src/old/systems/GameSystem.hx", lineNumber : 97, className : "old.systems.GameSystem", methodName : "resetProgress"});
		this.mPlayer.reset();
		this.mGameFinished = false;
		old_singleton_LocalStorage.get_instance().set_gameFinished(this.mGameFinished);
	}
	,loadLevel: function() {
		if(this.mLevelSystem != null) {
			this.removeChildSystem(this.mLevelSystem);
		}
		this.mLevelSystem = new old_systems_LevelSystem(this.mPlayer.get_levelNumber(),this.mPlayer);
		this.addChildSystem(this.mLevelSystem);
		this.mLevelSystem.pause();
		this.mPlayer.set_lastStartedLevelNumber(this.mPlayer.get_levelNumber());
		this.mLevelEnded = false;
		this.mLevelCompleted = false;
		this.mLevelEndedTimer.reset();
		this.mLevelEndedTimer.stop();
		this.dispatchEvent(new old_events_GameEvent("GameLevelLoaded"));
	}
	,skipLevel: function() {
		haxe_Log.trace("skipLevel",{ fileName : "src/old/systems/GameSystem.hx", lineNumber : 133, className : "old.systems.GameSystem", methodName : "skipLevel"});
		this.mPlayer.set_lastLevelNumber(this.mPlayer.get_levelNumber());
		var _g = this.mPlayer;
		_g.set_levelNumber(_g.get_levelNumber() + 1);
		this.mPlayer.save();
		this.mGameInProgress = false;
		this.dispatchEvent(new old_events_GameEvent("GameLevelSkipped"));
	}
	,update: function(dt) {
	}
	,onResetProgress: function(e) {
		this.resetProgress();
	}
	,onLoadLevel: function(e) {
		this.loadLevel();
	}
	,onSkipLevel: function(e) {
		this.skipLevel();
	}
	,onPauseGame: function(e) {
		if(this.mLevelSystem != null) {
			this.mLevelSystem.pause();
			this.mLevelEndedTimer.stop();
		}
	}
	,onResumeGame: function(e) {
		if(this.mLevelSystem != null && !this.mLevelSystem.get_isRunning()) {
			this.mGameInProgress = true;
			this.mLevelSystem.resume();
			if(this.mLevelEnded) {
				this.mLevelEndedTimer.start();
			}
		}
	}
	,onLevelReady: function(e) {
	}
	,onLevelCompleted: function(e) {
		haxe_Log.trace("onLevelCompleted",{ fileName : "src/old/systems/GameSystem.hx", lineNumber : 209, className : "old.systems.GameSystem", methodName : "onLevelCompleted"});
		this.mPlayer.set_lastLevelNumber(this.mPlayer.get_levelNumber());
		var _g = this.mPlayer;
		_g.set_levelNumber(_g.get_levelNumber() + 1);
		this.mGameInProgress = false;
		this.mLevelEnded = true;
		this.mLevelCompleted = true;
		this.mLevelEndedTimer.reset();
		this.mLevelEndedTimer.start();
	}
	,onLevelFailed: function(e) {
		this.mPlayer.set_lastLevelNumber(this.mPlayer.get_levelNumber());
		this.mGameInProgress = false;
		this.mLevelEnded = true;
		this.mLevelCompleted = false;
		this.mLevelEndedTimer.reset();
		this.mLevelEndedTimer.start();
	}
	,onLevelEndedTimer: function(e) {
		if(this.mLevelCompleted) {
			this.dispatchEvent(new old_events_GameEvent("GameLevelCompleted"));
		} else {
			this.dispatchEvent(new old_events_GameEvent("GameLevelFailed"));
		}
	}
	,destroy: function() {
		this.mLevelEndedTimer.stop();
		this.mLevelEndedTimer.removeEventListener("timerComplete",$bind(this,this.onLevelEndedTimer));
		this.removeEventListener("GameResetProgress",$bind(this,this.onResetProgress));
		this.removeEventListener("GameLoadLevel",$bind(this,this.onLoadLevel));
		this.removeEventListener("GamePause",$bind(this,this.onPauseGame));
		this.removeEventListener("GameResume",$bind(this,this.onResumeGame));
		this.removeEventListener("GameSkipLevel",$bind(this,this.onSkipLevel));
		this.removeEventListener("LevelCompleted",$bind(this,this.onLevelCompleted));
		this.removeEventListener("LevelFailed",$bind(this,this.onLevelFailed));
	}
	,__class__: old_systems_GameSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{set_gameFinished:"set_gameFinished",get_gameFinished:"get_gameFinished",get_levelSystem:"get_levelSystem",get_levelNumber:"get_levelNumber",set_gameInProgress:"set_gameInProgress",get_gameInProgress:"get_gameInProgress",get_player:"get_player"})
});
var old_systems_InputEventRedirect = function() {
	this.mRedirectMouseMovement = true;
	this.mRedirectMouseEvents = true;
	this.mRedirectKeyEvents = true;
	old_systems_System.call(this);
	if(!openfl_ui_Multitouch.get_supportsTouchEvents()) {
		openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.key_event));
		openfl_Lib.get_current().stage.addEventListener("keyUp",$bind(this,this.key_event));
		openfl_Lib.get_current().stage.addEventListener("click",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseDown",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseOver",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseOut",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseMove",$bind(this,this.mouse_event));
		openfl_Lib.get_current().stage.addEventListener("mouseLeave",$bind(this,this.mouseLeave_event));
	}
};
$hxClasses["old.systems.InputEventRedirect"] = old_systems_InputEventRedirect;
old_systems_InputEventRedirect.__name__ = "old.systems.InputEventRedirect";
old_systems_InputEventRedirect.__super__ = old_systems_System;
old_systems_InputEventRedirect.prototype = $extend(old_systems_System.prototype,{
	mRedirectKeyEvents: null
	,mRedirectMouseEvents: null
	,mRedirectMouseMovement: null
	,get_redirectKeyEvents: function() {
		return this.mRedirectKeyEvents;
	}
	,set_redirectKeyEvents: function(r) {
		this.mRedirectKeyEvents = r;
		return r;
	}
	,get_redirectMouseEvents: function() {
		return this.mRedirectMouseEvents;
	}
	,set_redirectMouseEvents: function(r) {
		this.mRedirectMouseEvents = r;
		return r;
	}
	,get_redirectMouseMovement: function() {
		return this.mRedirectMouseMovement;
	}
	,set_redirectMouseMovement: function(r) {
		this.mRedirectMouseMovement = r;
		return r;
	}
	,key_event: function(e) {
		if(this.mRedirectKeyEvents) {
			if(e.type == "keyDown") {
				this.dispatchEvent(new old_events_GlobalKeyboardEvent("GlobalKeyDown",e.bubbles,e.cancelable,e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
				old_helper_AllKeyboard.KEYS[e.keyCode] = true;
			} else if(e.type == "keyUp") {
				this.dispatchEvent(new old_events_GlobalKeyboardEvent("GlobalKeyUp",e.bubbles,e.cancelable,e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
				old_helper_AllKeyboard.KEYS[e.keyCode] = false;
			}
		}
	}
	,mouse_event: function(e) {
		if(e.type == "mouseMove") {
			if(this.mRedirectMouseMovement) {
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseMove",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
			}
		} else if(this.mRedirectMouseEvents) {
			var _sw0_ = e.type;
			switch(_sw0_) {
			case "click":
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalClick",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
				break;
			case "mouseDown":
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseDown",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
				break;
			case "mouseOut":
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseOut",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
				break;
			case "mouseOver":
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseOver",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
				break;
			case "mouseUp":
				this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseUp",e.bubbles,e.cancelable,e.localX,e.localY,e.stageX,e.stageY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta));
				break;
			}
		}
	}
	,mouseLeave_event: function(e) {
		this.dispatchEvent(new old_events_GlobalMouseEvent("GlobalMouseLeft",e.bubbles,e.cancelable));
	}
	,__class__: old_systems_InputEventRedirect
	,__properties__: $extend(old_systems_System.prototype.__properties__,{set_redirectMouseMovement:"set_redirectMouseMovement",get_redirectMouseMovement:"get_redirectMouseMovement",set_redirectMouseEvents:"set_redirectMouseEvents",get_redirectMouseEvents:"get_redirectMouseEvents",set_redirectKeyEvents:"set_redirectKeyEvents",get_redirectKeyEvents:"get_redirectKeyEvents"})
});
var old_systems_LevelSystem = function(number,player) {
	this.mBlitSource = 1;
	this.mWeatherNeeded = true;
	this.mWeatherFar = null;
	this.mWeatherNear = null;
	this.mAchievementSystem = null;
	this.mEffectSystem = null;
	this.mFriendliesSystem = null;
	this.mEnemySystem = null;
	this.mBulletSystem = null;
	this.mPlayerControlSystem = null;
	this.mPlayer = null;
	this.mRandomWeather = false;
	this.mEnemy8Count = 0;
	this.mEnemy7Count = 0;
	this.mEnemy6Count = 0;
	this.mEnemy5Count = 0;
	this.mEnemy4Count = 0;
	this.mEnemy3Count = 0;
	this.mEnemy2Count = 0;
	this.mEnemy1Count = 0;
	this.mLevelNumber = 0;
	old_systems_System.call(this);
	this.mLevelNumber = number;
	this.mPlayer = player;
	if(this.mLevelNumber == 0 || this.mLevelNumber == 1 || this.mLevelNumber == 2 || this.mPlayer.get_firstLevelSinceGameLaunch()) {
		this.mPlayer.set_firstLevelSinceGameLaunch(false);
		this.mBlitSource = 0;
	} else if(this.mPlayer.get_levelNumber() > this.mPlayer.get_lastStartedLevelNumber()) {
		this.mBlitSource = 1;
	} else if(this.mPlayer.get_levelNumber() == this.mPlayer.get_lastStartedLevelNumber()) {
		this.mBlitSource = -1;
	}
	old_singleton_GameWorld.get_instance().saveBlittingBitmap(this.mBlitSource,this.mPlayer.get_prevTimeOfDay());
	old_singleton_GameWorld.get_instance().reset();
	this.mPlayerControlSystem = new old_systems_PlayerControlSystem(this.mPlayer);
	this.addChildSystem(this.mPlayerControlSystem);
	this.mPlayer.set_playeControlSystem(this.mPlayerControlSystem);
	this.mBulletSystem = new old_systems_BulletFlightTimeSystem(this.mPlayer);
	this.addChildSystem(this.mBulletSystem);
	this.mPlayer.set_bulletSystem(this.mBulletSystem);
	this.mEnemySystem = new old_systems_EnemySystem(this.mPlayer);
	this.addChildSystem(this.mEnemySystem);
	this.mBulletSystem.set_enemySystem(this.mEnemySystem);
	this.mFriendliesSystem = new old_systems_FriendliesSystem(this.mPlayer,this.mEnemySystem);
	this.addChildSystem(this.mFriendliesSystem);
	this.mFriendliesSystem.set_enemySystem(this.mEnemySystem);
	this.mPlayer.set_friendliesSystem(this.mFriendliesSystem);
	this.mEffectSystem = new old_systems_EffectSystem();
	this.addChildSystem(this.mEffectSystem);
	this.mAchievementSystem = new old_systems_AchievementSystem(this.mPlayer);
	this.addChildSystem(this.mAchievementSystem);
	this.addEventListener("LevelAllClear",$bind(this,this.onNoEnemiesLeft));
	this.addEventListener("LevelPlayerFailed",$bind(this,this.onPlayerDestroyed));
	this.addEventListener("GlobalKeyUp",$bind(this,this.testSkip));
	this.loadLevel();
};
$hxClasses["old.systems.LevelSystem"] = old_systems_LevelSystem;
old_systems_LevelSystem.__name__ = "old.systems.LevelSystem";
old_systems_LevelSystem.__super__ = old_systems_System;
old_systems_LevelSystem.prototype = $extend(old_systems_System.prototype,{
	mLevelNumber: null
	,mEnemy1Count: null
	,mEnemy2Count: null
	,mEnemy3Count: null
	,mEnemy4Count: null
	,mEnemy5Count: null
	,mEnemy6Count: null
	,mEnemy7Count: null
	,mEnemy8Count: null
	,mRandomWeather: null
	,mPlayer: null
	,mPlayerControlSystem: null
	,mBulletSystem: null
	,mEnemySystem: null
	,mFriendliesSystem: null
	,mEffectSystem: null
	,mAchievementSystem: null
	,mWeatherNear: null
	,mWeatherFar: null
	,mWeatherNeeded: null
	,mBlitSource: null
	,get_levelNumber: function() {
		return this.mLevelNumber;
	}
	,get_enemy1Count: function() {
		return this.mEnemy1Count;
	}
	,get_enemy2Count: function() {
		return this.mEnemy2Count;
	}
	,get_enemy3Count: function() {
		return this.mEnemy3Count;
	}
	,get_enemy4Count: function() {
		return this.mEnemy4Count;
	}
	,get_enemy5Count: function() {
		return this.mEnemy5Count;
	}
	,get_enemy6Count: function() {
		return this.mEnemy6Count;
	}
	,get_enemy7Count: function() {
		return this.mEnemy7Count;
	}
	,get_enemy8Count: function() {
		return this.mEnemy8Count;
	}
	,initGraphics: function() {
		var lSky0 = old_singleton_GameWorld.get_instance().get_skyContainer().getChildAt(0);
		var lBack0 = old_singleton_GameWorld.get_instance().get_background().getChildAt(0);
		var lFore0 = old_singleton_GameWorld.get_instance().get_foregroundContainer().getChildAt(0);
		if(lSky0 != null) {
			lSky0.dispose();
			lBack0.dispose();
			lFore0.dispose();
		}
		lSky0 = old_MainOld.getInstance().builder.createAnimation("BackgroundSky" + this.mPlayer.get_timeOfDay());
		lBack0 = old_MainOld.getInstance().builder.createAnimation("BackgroundBack" + this.mPlayer.get_timeOfDay());
		lFore0 = old_MainOld.getInstance().builder.createAnimation("BackgroundFore" + this.mPlayer.get_timeOfDay());
		lBack0.set_x(lBack0.get_width() / 2);
		lBack0.set_y(lBack0.get_height() / 2);
		lFore0.set_x(714.);
		lFore0.set_y(416.5);
		this.mRandomWeather = false;
		old_singleton_GameWorld.get_instance().get_skyContainer().addChild(lSky0);
		old_singleton_GameWorld.get_instance().get_background().addChild(lBack0);
		old_singleton_GameWorld.get_instance().get_foregroundContainer().addChild(lFore0);
	}
	,loadLevel: function() {
		haxe_Log.trace("loadLevel",{ fileName : "src/old/systems/LevelSystem.hx", lineNumber : 202, className : "old.systems.LevelSystem", methodName : "loadLevel"});
		old_singleton_GameWorld.get_instance().get_gunContainer().addChild(this.mPlayer.get_mainGraphics());
		old_singleton_GameWorld.get_instance().loadBlittingBitmap(this.mBlitSource,this.mPlayer.get_timeOfDay());
		this.mPlayer.startWave();
		this.createEnemies();
		this.mFriendliesSystem.createFriendlies();
	}
	,createEnemies: function() {
		if(this.mLevelNumber == 0) {
			this.mEnemy1Count = 5;
			this.mEnemySystem.createEnemies(this.mEnemy1Count,0,0,0,0,0,0,0,this.mLevelNumber);
		} else {
			this.mEnemy1Count = 3 + old_helper_UsefulStuff.rnd(this.mLevelNumber / 4,this.mLevelNumber / 2) | 0;
			this.mEnemy2Count = 2 + (this.mLevelNumber / 4 | 0) | 0;
			this.mEnemy3Count = this.mLevelNumber / 3 | 0;
			this.mEnemy4Count = this.mLevelNumber / 3 | 0;
			this.mEnemy5Count = this.mLevelNumber / 5 | 0;
			this.mEnemy6Count = this.mLevelNumber / 4 | 0;
			this.mEnemy7Count = this.mLevelNumber / 6 | 0;
			this.mEnemy8Count = this.mLevelNumber / 2 | 0;
			this.mEnemySystem.createEnemies(this.mEnemy1Count,this.mEnemy2Count,this.mEnemy3Count,this.mEnemy4Count,this.mEnemy5Count,this.mEnemy6Count,this.mEnemy7Count,this.mEnemy8Count,this.mLevelNumber);
		}
	}
	,showWeather: function(state) {
	}
	,update: function(dt) {
	}
	,beforePause: function() {
	}
	,afterResume: function() {
		this.mPlayerControlSystem.updatePosition();
	}
	,onNoEnemiesLeft: function(e) {
		this.dispatchEvent(new old_events_LevelEvent("LevelCompleted"));
	}
	,testSkip: function(e) {
		if(e.get_charCode() == 115 && old_MainOld.getInstance().get_uiSystem().get_curScreen().get_nameScr() == old_systems_uI_screens_GameScreen.NAME) {
			this.mPlayer.addScore(1000);
			this.onNoEnemiesLeft(null);
		}
	}
	,onPlayerDestroyed: function(e) {
		this.pause();
		this.dispatchEvent(new old_events_LevelEvent("LevelFailed"));
	}
	,destroy: function() {
		haxe_Log.trace("LevelSystem destroy",{ fileName : "src/old/systems/LevelSystem.hx", lineNumber : 305, className : "old.systems.LevelSystem", methodName : "destroy"});
		this.removeEventListener("LevelAllClear",$bind(this,this.onNoEnemiesLeft));
		this.removeEventListener("LevelPlayerFailed",$bind(this,this.onPlayerDestroyed));
	}
	,__class__: old_systems_LevelSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_enemy8Count:"get_enemy8Count",get_enemy7Count:"get_enemy7Count",get_enemy6Count:"get_enemy6Count",get_enemy5Count:"get_enemy5Count",get_enemy4Count:"get_enemy4Count",get_enemy3Count:"get_enemy3Count",get_enemy2Count:"get_enemy2Count",get_enemy1Count:"get_enemy1Count",get_levelNumber:"get_levelNumber"})
});
var old_systems_PlayerControlSystem = function(player) {
	this.mLostFocus = false;
	this.mShakeY = 0;
	this.mShakeX = 0;
	this.mShake = 0;
	this.mCurRecoilY = 0;
	this.mCurRecoilX = 0;
	this.mDestRecoilY = 0;
	this.mDestRecoilX = 0;
	this.mRecoilCompensation = 5;
	this.mWorkAreaHalfWidthOneAndHalf = 0;
	this.mWorkAreaHalfWidthHalf = 0;
	this.mWorkAreaHalfHeight = 0;
	this.mWorkAreaHalfWidth = 0;
	this.mWorkAreaRatioY = 0;
	this.mWorkAreaRatioX = 0;
	this.mWorkAreaCursorYDest = old_Core.SCR_HEIGHT / 2;
	this.mWorkAreaCursorXDest = old_Core.SCR_WIDTH / 2;
	this.mWorkAreaCursorY = old_Core.SCR_HEIGHT / 2;
	this.mWorkAreaCursorX = old_Core.SCR_WIDTH / 2;
	this.mStageY = 0;
	this.mStageX = 0;
	this.mLMB = false;
	this.mScopeRendering = true;
	this.mPlayer = null;
	old_systems_System.call(this);
	this.mPlayer = player;
	this.mWorkAreaBorder = 40;
	this.mWorkArea = new openfl_geom_Rectangle(this.mWorkAreaBorder,this.mWorkAreaBorder,old_Core.SCR_WIDTH - this.mWorkAreaBorder * 2,old_Core.SCR_HEIGHT - this.mWorkAreaBorder * 2);
	this.mWorkAreaRatioX = old_Core.SCR_WIDTH / this.mWorkArea.width;
	this.mWorkAreaRatioY = old_Core.SCR_HEIGHT / this.mWorkArea.height;
	this.mWorkAreaHalfWidth = this.mWorkArea.width / 2;
	this.mWorkAreaHalfHeight = this.mWorkArea.height / 2;
	this.mWorkAreaHalfWidthHalf = this.mWorkAreaHalfWidth * 0.5;
	this.mWorkAreaHalfWidthOneAndHalf = this.mWorkAreaHalfWidth * 1.5;
	this.addEventListener("GlobalKeyDown",$bind(this,this.key_down));
	this.addEventListener("GlobalKeyUp",$bind(this,this.key_up));
	this.addEventListener("GlobalMouseDown",$bind(this,this.mouse_down));
	this.addEventListener("GlobalMouseUp",$bind(this,this.mouse_up));
	this.addEventListener("GlobalMouseMove",$bind(this,this.mouse_move));
	this.addEventListener("GlobalMouseLeft",$bind(this,this.mouse_left));
	this.addEventListener(old_events_GunEvent.PUT_AWAY,$bind(this,this.putAway));
	this.addEventListener(old_events_CameraEvent.SHAKE,$bind(this,this.onCameraShake));
};
$hxClasses["old.systems.PlayerControlSystem"] = old_systems_PlayerControlSystem;
old_systems_PlayerControlSystem.__name__ = "old.systems.PlayerControlSystem";
old_systems_PlayerControlSystem.__super__ = old_systems_System;
old_systems_PlayerControlSystem.prototype = $extend(old_systems_System.prototype,{
	mPlayer: null
	,mScopeRendering: null
	,mLMB: null
	,mStageX: null
	,mStageY: null
	,mWorkAreaBorder: null
	,mWorkArea: null
	,mWorkAreaCursorX: null
	,mWorkAreaCursorY: null
	,mWorkAreaCursorXDest: null
	,mWorkAreaCursorYDest: null
	,mWorkAreaRatioX: null
	,mWorkAreaRatioY: null
	,mWorkAreaHalfWidth: null
	,mWorkAreaHalfHeight: null
	,mWorkAreaHalfWidthHalf: null
	,mWorkAreaHalfWidthOneAndHalf: null
	,mRecoilCompensation: null
	,mDestRecoilX: null
	,mDestRecoilY: null
	,mCurRecoilX: null
	,mCurRecoilY: null
	,mShake: null
	,mShakeX: null
	,mShakeY: null
	,mLostFocus: null
	,key_down: function(e) {
	}
	,key_up: function(e) {
		if(this.mLostFocus) {
			return;
		}
		if(e.get_keyCode() == 49) {
			this.mPlayer.swapToGun1();
		}
		if(e.get_keyCode() == 50) {
			this.mPlayer.swapToGun2();
		}
		if(e.get_keyCode() == 82) {
			this.mPlayer.reload();
		}
		if(e.get_keyCode() == 70) {
			this.mPlayer.changeFireMode();
		}
		if(e.get_keyCode() == 81) {
			this.mPlayer.swapToLastUsed();
		}
	}
	,mouse_left: function(e) {
		this.mLostFocus = true;
	}
	,mouse_down: function(e) {
		if(old_MainOld.getInstance().get_uiSystem().get_curScreen().get_nameScr() != "GameScreen") {
			return;
		}
		if(this.mLostFocus) {
			this.updatePosition();
			this.mLostFocus = false;
			return;
		}
		if(!openfl_ui_Multitouch.get_supportsTouchEvents() && this.mStageY < 86.666666666666671) {
			return;
		}
		openfl_ui_Mouse.hide();
		this.mLMB = true;
	}
	,mouse_up: function(e) {
		this.mLMB = false;
		this.mPlayer.releaseTrigger();
	}
	,scrollImages: function() {
		var lScrollSkyToX = -this.mWorkAreaCursorX / this.mWorkArea.width * 480 - this.mWorkAreaBorder - this.mCurRecoilX * 0.4;
		var lScrollSkyToY = -this.mWorkAreaCursorY / this.mWorkArea.height * 165 - this.mWorkAreaBorder + this.mCurRecoilY * 0.4;
		var lScrollBackgroundToX = -this.mWorkAreaCursorX - this.mWorkAreaBorder - this.mCurRecoilX * 0.5;
		var lScrollBackgroundToY = -this.mWorkAreaCursorY / this.mWorkArea.height * 190 - this.mWorkAreaBorder + this.mCurRecoilY * 0.5;
		var lScrollForegroundToX = -this.mWorkAreaCursorX / this.mWorkArea.width * 760 - this.mCurRecoilX * 0.75;
		var lScrollForegroundToY = -this.mWorkAreaCursorY / this.mWorkArea.height * 340 + this.mCurRecoilY * 0.75;
		if(lScrollSkyToX > 0) {
			lScrollSkyToX = 0;
		} else if(lScrollSkyToX < -640) {
			lScrollSkyToX = -640;
		}
		if(lScrollSkyToY > 0) {
			lScrollSkyToY = 0;
		} else if(lScrollSkyToY < -480) {
			lScrollSkyToY = -480;
		}
		if(lScrollBackgroundToX > 0) {
			lScrollBackgroundToX = 0;
		} else if(lScrollBackgroundToX < -640) {
			lScrollBackgroundToX = -640;
		}
		if(lScrollBackgroundToY > 0) {
			lScrollBackgroundToY = 0;
		} else if(lScrollBackgroundToY < -480) {
			lScrollBackgroundToY = -480;
		}
		if(lScrollForegroundToX > 0) {
			lScrollForegroundToX = 0;
		} else if(lScrollForegroundToX < -760) {
			lScrollForegroundToX = -760;
		}
		if(lScrollForegroundToY > 0) {
			lScrollForegroundToY = 0;
		} else if(lScrollForegroundToY < -480) {
			lScrollForegroundToY = -480;
		}
		old_singleton_GameWorld.get_instance().scrollSky(old_helper_UsefulStuff.round(lScrollSkyToX),old_helper_UsefulStuff.round(lScrollSkyToY));
		old_singleton_GameWorld.get_instance().scrollBackground(old_helper_UsefulStuff.round(lScrollBackgroundToX),old_helper_UsefulStuff.round(lScrollBackgroundToY));
		old_singleton_GameWorld.get_instance().scrollForeground(old_helper_UsefulStuff.round(lScrollForegroundToX),old_helper_UsefulStuff.round(lScrollForegroundToY));
		old_singleton_GameWorld.get_instance().scrollCrosshair(0,this.mWorkAreaCursorX + this.mWorkAreaBorder,this.mWorkAreaCursorY + this.mWorkAreaBorder);
		old_singleton_GameWorld.get_instance().scrollCrosshair(1,this.mWorkAreaCursorX + this.mWorkAreaBorder,this.mWorkAreaCursorY + this.mWorkAreaBorder);
		var lGunOffsetX = old_entities_equipment_Gun.GUN_OFFSET_X;
		var lGunOffsetY = old_entities_equipment_Gun.GUN_OFFSET_Y;
		var lDistanceFromMuzzleX = 45;
		var lDistanceFromMuzzleY = 50;
		var lCenterY = 240 - lGunOffsetY;
		var lCrosshairX = this.mWorkAreaCursorX + this.mWorkAreaBorder;
		var lCrosshairY = this.mWorkAreaCursorY + this.mWorkAreaBorder;
		var lCrosshairYMinusCenter = lCrosshairY - lCenterY;
		var lScrollGunX = 0;
		var lScrollGunY = 0;
		if(lCrosshairY > lCenterY) {
			lScrollGunX = lCrosshairX - lCrosshairYMinusCenter / lCenterY * lDistanceFromMuzzleX;
		} else {
			lScrollGunX = lCrosshairX - lCrosshairYMinusCenter / 2;
		}
		if(lCrosshairY > lCenterY) {
			lScrollGunY = lCrosshairY - lCrosshairYMinusCenter / lCenterY * lDistanceFromMuzzleY;
		}
		if(lScrollGunY < lCenterY) {
			lScrollGunY = lCenterY;
		}
		if(lScrollGunX > 600) {
			lScrollGunX = 600;
		}
		old_singleton_GameWorld.get_instance().scrollGun(lScrollGunX,lScrollGunY);
		this.mPlayer.set_aimX(-old_singleton_GameWorld.get_instance().get_backgroundContainer().get_x() + old_singleton_GameWorld.get_instance().get_crosshairContainer1().get_x());
		this.mPlayer.set_aimY(-old_singleton_GameWorld.get_instance().get_backgroundContainer().get_y() + old_singleton_GameWorld.get_instance().get_crosshairContainer1().get_y());
	}
	,mouse_move: function(e) {
		if(old_MainOld.getInstance().get_uiSystem().get_curScreen().get_nameScr() != "GameScreen") {
			return;
		}
		if(openfl_ui_Multitouch.get_supportsTouchEvents()) {
			if(e.get_localX() < 250 && e.get_localY() > 350) {
				return;
			} else {
				this.mStageX = e.get_localX() - 600;
				this.mStageY = e.get_localY() - 100;
			}
		} else {
			this.mStageX = 6 + (e.get_stageX() - GameApp.resize_data_.offset_x) / GameApp.resize_data_.scale * 480 / 960;
			var scl = 0.25;
			if(GameApp.resize_data_.width > 1280) {
				this.mStageX -= (GameApp.resize_data_.width - 1280) * scl;
			}
			this.mStageY = 4 + (e.get_stageY() - GameApp.resize_data_.offset_y) / GameApp.resize_data_.scale * 480 / 960;
			if(GameApp.resize_data_.height > 960) {
				this.mStageY -= (GameApp.resize_data_.height - 960) * scl;
			}
		}
		if(this.mLostFocus) {
			this.updatePosition();
			this.mLostFocus = false;
			return;
		}
		if(this.mStageX < this.mWorkAreaBorder) {
			this.mWorkAreaCursorXDest = 0;
		} else if(this.mStageX > old_Core.SCR_WIDTH - this.mWorkAreaBorder) {
			this.mWorkAreaCursorXDest = this.mWorkArea.width;
		} else {
			this.mWorkAreaCursorXDest = this.mStageX - this.mWorkArea.x;
		}
		if(this.mStageY < this.mWorkAreaBorder) {
			this.mWorkAreaCursorYDest = 0;
		} else if(this.mStageY > old_Core.SCR_HEIGHT - this.mWorkAreaBorder) {
			this.mWorkAreaCursorYDest = this.mWorkArea.height;
		} else {
			this.mWorkAreaCursorYDest = this.mStageY - this.mWorkArea.y;
		}
		this.scrollImages();
		if(old_singleton_GameWorld.get_instance().get_crosshairContainer0().get_visible()) {
			if(this.mStageY < 52) {
				openfl_ui_Mouse.show();
				old_singleton_GameWorld.get_instance().get_crosshairContainer0().set_visible(old_singleton_GameWorld.get_instance().get_crosshairContainer1().set_visible(false));
			} else if(this.mStageX < this.mWorkAreaBorder) {
				openfl_ui_Mouse.show();
				old_singleton_GameWorld.get_instance().get_crosshairContainer0().set_visible(old_singleton_GameWorld.get_instance().get_crosshairContainer1().set_visible(false));
			} else if(this.mStageX > old_Core.SCR_WIDTH - this.mWorkAreaBorder) {
				openfl_ui_Mouse.show();
				old_singleton_GameWorld.get_instance().get_crosshairContainer0().set_visible(old_singleton_GameWorld.get_instance().get_crosshairContainer1().set_visible(false));
			}
		} else if(this.mStageY > 52 && (this.mStageX > this.mWorkAreaBorder && this.mStageX < old_Core.SCR_WIDTH - this.mWorkAreaBorder)) {
			openfl_ui_Mouse.hide();
			old_singleton_GameWorld.get_instance().get_crosshairContainer0().set_visible(old_singleton_GameWorld.get_instance().get_crosshairContainer1().set_visible(true));
		}
	}
	,update: function(dt) {
		if(this.mLostFocus) {
			return;
		}
		if(openfl_ui_Multitouch.get_supportsTouchEvents() && this.mLMB) {
			this.mPlayer.pullTrigger();
			this.mLMB = false;
			this.mPlayer.releaseTrigger();
		} else if(this.mLMB) {
			this.mPlayer.pullTrigger();
		}
		if(this.mPlayer.get_recoil() > 0) {
			this.mPlayer.set_recoil(old_helper_UsefulStuff.curveValue(0,this.mPlayer.get_recoil(),this.mRecoilCompensation,dt * 1.2));
			this.mDestRecoilX = old_helper_UsefulStuff.curveValue(0,this.mDestRecoilX,this.mRecoilCompensation,dt * 1.2);
			this.mDestRecoilY = old_helper_UsefulStuff.curveValue(0,this.mDestRecoilY,this.mRecoilCompensation,dt * 1.2);
			this.mCurRecoilX = old_helper_UsefulStuff.curveValue(this.mDestRecoilX,this.mCurRecoilX,this.mRecoilCompensation,dt * 1.2);
			this.mCurRecoilY = old_helper_UsefulStuff.curveValue(this.mDestRecoilY,this.mCurRecoilY,this.mRecoilCompensation,dt * 1.2);
		}
		if(this.mShake > 0) {
			this.mShake = old_helper_UsefulStuff.curveValue(0,this.mShake,10,dt);
			this.mShakeX = old_helper_UsefulStuff.curveValue(0,this.mShakeX,10,dt);
			this.mShakeY = old_helper_UsefulStuff.curveValue(0,this.mShakeY,10,dt);
		}
		var lSmoothFactor = 2.0;
		this.mWorkAreaCursorX = old_helper_UsefulStuff.curveValue(this.mWorkAreaCursorXDest,this.mWorkAreaCursorX,lSmoothFactor,dt);
		this.mWorkAreaCursorY = old_helper_UsefulStuff.curveValue(this.mWorkAreaCursorYDest,this.mWorkAreaCursorY,lSmoothFactor,dt);
		this.scrollImages();
	}
	,shotFired: function() {
		var sign = old_helper_UsefulStuff.rnd(-1,1);
		this.mDestRecoilX += this.mPlayer.get_recoil() * sign;
		this.mDestRecoilY += this.mPlayer.get_recoil() + old_helper_UsefulStuff.rnd(0,this.mPlayer.get_recoil() * 2);
	}
	,putAway: function(e) {
	}
	,onCameraShake: function(e) {
		this.mShakeX = old_helper_UsefulStuff.rnd(-e.distance / 2,e.distance / 2);
		this.mShakeY = -e.distance;
		this.mShake = e.distance;
	}
	,updatePosition: function() {
		var x = this.mStageX;
		var y = this.mStageY;
		if(x < this.mWorkAreaBorder) {
			this.mWorkAreaCursorXDest = 0;
		} else if(x > old_Core.SCR_WIDTH - this.mWorkAreaBorder) {
			this.mWorkAreaCursorXDest = this.mWorkArea.width;
		} else {
			this.mWorkAreaCursorXDest = x - this.mWorkArea.x;
		}
		if(y < this.mWorkAreaBorder) {
			this.mWorkAreaCursorYDest = 0;
		} else if(y > old_Core.SCR_HEIGHT - this.mWorkAreaBorder) {
			this.mWorkAreaCursorYDest = this.mWorkArea.height;
		} else {
			this.mWorkAreaCursorYDest = y - this.mWorkArea.y;
		}
		this.scrollImages();
	}
	,destroy: function() {
		this.removeEventListener("GlobalKeyDown",$bind(this,this.key_down));
		this.removeEventListener("GlobalKeyUp",$bind(this,this.key_up));
		this.removeEventListener("GlobalMouseDown",$bind(this,this.mouse_down));
		this.removeEventListener("GlobalMouseUp",$bind(this,this.mouse_up));
		this.removeEventListener("GlobalMouseMove",$bind(this,this.mouse_move));
		this.removeEventListener("GlobalMouseLeft",$bind(this,this.mouse_left));
		this.removeEventListener(old_events_GunEvent.PUT_AWAY,$bind(this,this.putAway));
	}
	,__class__: old_systems_PlayerControlSystem
});
var old_systems_PromotionSystem = function() {
	this.mIsReady = false;
	this.mTimer = null;
	old_systems_System.call(this);
	this.mTimer = new openfl_utils_Timer(600000,0);
	this.mTimer.addEventListener("timer",$bind(this,this.onTimer));
	this.mTimer.start();
};
$hxClasses["old.systems.PromotionSystem"] = old_systems_PromotionSystem;
old_systems_PromotionSystem.__name__ = "old.systems.PromotionSystem";
old_systems_PromotionSystem.__super__ = old_systems_System;
old_systems_PromotionSystem.prototype = $extend(old_systems_System.prototype,{
	mTimer: null
	,mIsReady: null
	,get_isReady: function() {
		return this.mIsReady;
	}
	,ResetTimer: function() {
		this.mIsReady = false;
	}
	,onTimer: function(e) {
		this.mIsReady = true;
	}
	,__class__: old_systems_PromotionSystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_isReady:"get_isReady"})
});
var old_systems_EventInfo = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	this.type = type;
	this.listener = listener;
	this.useCapture = useCapture;
	this.priority = priority;
	this.useWeakReference = useWeakReference;
};
$hxClasses["old.systems.EventInfo"] = old_systems_EventInfo;
old_systems_EventInfo.__name__ = "old.systems.EventInfo";
old_systems_EventInfo.prototype = {
	type: null
	,listener: null
	,useCapture: null
	,priority: null
	,useWeakReference: null
	,__class__: old_systems_EventInfo
};
var old_systems_uI_IScreenUI = function() { };
$hxClasses["old.systems.uI.IScreenUI"] = old_systems_uI_IScreenUI;
old_systems_uI_IScreenUI.__name__ = "old.systems.uI.IScreenUI";
old_systems_uI_IScreenUI.__isInterface__ = true;
old_systems_uI_IScreenUI.prototype = {
	get_mainGraphics: null
	,get_backState: null
	,set_backState: null
	,get_isReady: null
	,get_nameScr: null
	,hide: null
	,afterHide: null
	,show: null
	,beforeShow: null
	,slideOut: null
	,slideIn: null
	,ready: null
	,afterReady: null
	,pause: null
	,resume: null
	,__class__: old_systems_uI_IScreenUI
	,__properties__: {get_nameScr:"get_nameScr",get_isReady:"get_isReady",set_backState:"set_backState",get_backState:"get_backState",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UIButton = function(background,label,x,y,origin,width,height,clickFunction,overFunction,toggleable,cantBeToggledOff,cantBeToggledOn) {
	if(cantBeToggledOn == null) {
		cantBeToggledOn = false;
	}
	if(cantBeToggledOff == null) {
		cantBeToggledOff = false;
	}
	if(toggleable == null) {
		toggleable = false;
	}
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(origin == null) {
		origin = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(label == null) {
		label = "";
	}
	this.mDescriptionToggledOver = null;
	this.mDescriptionToggled = null;
	this.mDescriptionIdleOver = null;
	this.mDescriptionIdle = null;
	this.mDescriptionDisabled = null;
	this.mDownFunction = null;
	this.mOverFunction = null;
	this.mClickFunction = null;
	this.mCantBeToggledOn = false;
	this.mCantBeToggledOff = false;
	this.mToggled = false;
	this.mToggleable = false;
	this.mResetMouseButtonWhenLeaving = false;
	this.mMouseOverState = false;
	this.mDisabled = false;
	this.mHeight = 0;
	this.mWidth = 0;
	this.mOrigin = 0;
	this.mY = 0;
	this.mX = 0;
	this.mData = null;
	this.mName = "";
	this.mId = 0;
	this.mLabelSizeOffsetY = 0;
	this.mLabelSizeOffsetX = 0;
	this.mLabeled = false;
	this.mLabel = null;
	this.mDefaultBackground = true;
	this.mBackground = null;
	this.mMainGraphics = null;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mX = x;
	this.mY = y;
	this.mOrigin = origin;
	this.mWidth = width;
	this.mHeight = height;
	this.mMainGraphics.set_y(this.mY);
	if(background == null) {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation("UIDefaultButton3");
		this.mDefaultBackground = true;
	} else {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation(background);
		if("UIDefaultButton" == background) {
			this.mDefaultBackground = true;
		} else {
			this.mDefaultBackground = false;
		}
	}
	this.mMainGraphics.addChild(this.mBackground);
	this.mBackground.gotoFrame(2);
	this.mBackground.stop();
	this.mLabel = new old_systems_uI_UILabel(label,0,0,"Ampersand",18,3750201,true);
	this.mLabel.set_x(-1 + this.mWidth / 2);
	this.mLabel.set_y(this.mHeight / 4);
	if(label == "") {
		this.mLabeled = false;
	} else {
		this.mLabeled = true;
	}
	this.mMainGraphics.addChild(this.mLabel.get_mainGraphics());
	this.mClickFunction = clickFunction;
	this.mOverFunction = overFunction;
	this.mToggleable = toggleable;
	this.mCantBeToggledOff = cantBeToggledOff;
	this.mCantBeToggledOn = cantBeToggledOn;
	this.updateDimensions();
	this.mMainGraphics.touchable = true;
	this.mBackground.touchable = true;
	this.mBackground.signalTouch.addSlot($bind(this,this.onMouseClick));
	this.mBackground.signalTouchDown.addSlot($bind(this,this.onMouseDown));
	this.mBackground.signalTouchUp.addSlot($bind(this,this.onMouseUp));
	this.mBackground.signalRollOut.addSlot($bind(this,this.onMouseOut));
	this.mBackground.signalRollIn.addSlot($bind(this,this.onMouseOver));
	this.mDescriptionDisabled = "";
	this.mDescriptionIdle = "";
	this.mDescriptionIdleOver = "";
	this.mDescriptionToggled = "";
	this.mDescriptionToggledOver = "";
};
$hxClasses["old.systems.uI.UIButton"] = old_systems_uI_UIButton;
old_systems_uI_UIButton.__name__ = "old.systems.uI.UIButton";
old_systems_uI_UIButton.prototype = {
	mMainGraphics: null
	,mBackground: null
	,mDefaultBackground: null
	,mLabel: null
	,mLabeled: null
	,mLabelSizeOffsetX: null
	,mLabelSizeOffsetY: null
	,mId: null
	,mName: null
	,mData: null
	,mX: null
	,mY: null
	,mOrigin: null
	,mWidth: null
	,mHeight: null
	,mDisabled: null
	,mMouseOverState: null
	,mResetMouseButtonWhenLeaving: null
	,mToggleable: null
	,mToggled: null
	,mCantBeToggledOff: null
	,mCantBeToggledOn: null
	,mClickFunction: null
	,mOverFunction: null
	,mDownFunction: null
	,mDescriptionDisabled: null
	,mDescriptionIdle: null
	,mDescriptionIdleOver: null
	,mDescriptionToggled: null
	,mDescriptionToggledOver: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_background: function() {
		return this.mBackground;
	}
	,get_label: function() {
		return this.mLabel;
	}
	,get_state: function() {
		return this.mToggled;
	}
	,get_visible: function() {
		return this.mMainGraphics.get_visible();
	}
	,set_visible: function(value) {
		this.mMainGraphics.set_visible(value);
		return value;
	}
	,get_disabled: function() {
		return this.mDisabled;
	}
	,get_labelSizeOffsetX: function() {
		return this.mLabelSizeOffsetX;
	}
	,set_labelSizeOffsetX: function(value) {
		this.mLabelSizeOffsetX = value;
		this.updateDimensions();
		return value;
	}
	,get_labelSizeOffsetY: function() {
		return this.mLabelSizeOffsetY;
	}
	,set_labelSizeOffsetY: function(value) {
		this.mLabelSizeOffsetY = value;
		this.updateDimensions();
		return value;
	}
	,get_resetMouseButtonWhenLeaving: function() {
		return this.mResetMouseButtonWhenLeaving;
	}
	,set_resetMouseButtonWhenLeaving: function(value) {
		this.mResetMouseButtonWhenLeaving = value;
		return value;
	}
	,get_id: function() {
		return this.mId;
	}
	,set_id: function(value) {
		this.mId = value;
		return value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		this.mName = value;
		return value;
	}
	,get_data: function() {
		return this.mData;
	}
	,set_data: function(value) {
		this.mData = value;
		return value;
	}
	,get_origin: function() {
		return this.mOrigin;
	}
	,set_origin: function(value) {
		this.mOrigin = value;
		this.updateDimensions();
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		this.updateDimensions();
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		this.mMainGraphics.set_y(this.mY);
		return value;
	}
	,get_text: function() {
		return this.mLabel.get_text();
	}
	,set_text: function(value) {
		this.mLabel.set_text(value);
		if(value == "") {
			this.mLabeled = false;
		} else {
			this.mLabeled = true;
		}
		this.updateDimensions();
		return value;
	}
	,get_width: function() {
		return this.mBackground.get_width() | 0;
	}
	,set_width: function(value) {
		this.mWidth = value;
		this.updateDimensions();
		return value;
	}
	,get_height: function() {
		return this.mBackground.get_height() | 0;
	}
	,set_height: function(value) {
		this.mHeight = value;
		this.updateDimensions();
		return value;
	}
	,get_downFunction: function() {
		return this.mDownFunction;
	}
	,set_downFunction: function(value) {
		this.mDownFunction = value;
		return value;
	}
	,get_descriptionDisabled: function() {
		return this.mDescriptionDisabled;
	}
	,set_descriptionDisabled: function(value) {
		this.mDescriptionDisabled = value;
		return value;
	}
	,get_descriptionIdle: function() {
		return this.mDescriptionIdle;
	}
	,set_descriptionIdle: function(value) {
		this.mDescriptionIdle = value;
		return value;
	}
	,get_descriptionIdleOver: function() {
		return this.mDescriptionIdleOver;
	}
	,set_descriptionIdleOver: function(value) {
		this.mDescriptionIdleOver = value;
		return value;
	}
	,get_descriptionToggled: function() {
		return this.mDescriptionToggled;
	}
	,set_descriptionToggled: function(value) {
		this.mDescriptionToggled = value;
		return value;
	}
	,get_descriptionToggledOver: function() {
		return this.mDescriptionToggledOver;
	}
	,set_descriptionToggledOver: function(value) {
		this.mDescriptionToggledOver = value;
		return value;
	}
	,get_toggleable: function() {
		return this.mToggleable;
	}
	,set_toggleable: function(value) {
		this.mToggleable = value;
		if(value == false) {
			if(this.mToggled) {
				this.toggle(false,true);
			}
		}
		return value;
	}
	,get_cantBeToggledOff: function() {
		return this.mCantBeToggledOff;
	}
	,set_cantBeToggledOff: function(value) {
		this.mCantBeToggledOff = value;
		return value;
	}
	,get_cantBeToggledOn: function() {
		return this.mCantBeToggledOn;
	}
	,set_cantBeToggledOn: function(value) {
		this.mCantBeToggledOn = value;
		if(value == true) {
			if(this.mToggled) {
				this.toggle(false,true);
			}
		}
		return value;
	}
	,updateDimensions: function() {
		var lCurFrame = this.mBackground.get_currentFrame();
		this.mBackground.gotoFrame(6);
		this.mBackground.stop();
		if(this.mDefaultBackground) {
			if(!(this.mWidth < 0)) {
				this.mLabel.set_maxWidth(this.mWidth + 12 - this.mLabelSizeOffsetX | 0);
				this.mBackground.set_width(this.mWidth);
			}
			if(this.mHeight < 0) {
				this.mBackground.set_height(this.mLabel.get_maxHeight() + this.mLabelSizeOffsetY | 0);
			} else {
				this.mBackground.set_height(this.mHeight | 0);
			}
			this.mLabel.set_x(-1 + this.mBackground.get_width() / 2);
			this.mLabel.set_y(this.mBackground.get_height() / 2 - this.mLabel.get_fontSize() / 2 - 9);
			this.mBackground.set_y(-5);
		} else {
			var tmp = !this.mLabeled;
		}
		if(this.mOrigin < 0) {
			this.mMainGraphics.set_x(this.mX);
		} else if(this.mOrigin == 0) {
			this.mMainGraphics.set_x(this.mX - this.mBackground.get_width() / 2);
		} else if(this.mOrigin > 0) {
			if(this.mWidth > 0) {
				this.mMainGraphics.set_x(this.mX - this.mWidth);
			} else {
				this.mMainGraphics.set_x(this.mX - this.mBackground.get_width());
			}
		}
		this.mBackground.gotoFrame(lCurFrame);
		this.mBackground.stop();
	}
	,hide: function() {
		this.mMainGraphics.set_visible(false);
	}
	,show: function() {
		this.mMainGraphics.set_visible(true);
	}
	,disable: function(reduceAlpha) {
		if(reduceAlpha == null) {
			reduceAlpha = -1;
		}
		this.mDisabled = true;
		this.mBackground.gotoFrame(1);
		this.mBackground.stop();
		if(reduceAlpha >= 0) {
			this.mMainGraphics.set_alpha(reduceAlpha);
		}
	}
	,enable: function(restoreAlpha) {
		if(restoreAlpha == null) {
			restoreAlpha = -1;
		}
		this.mDisabled = false;
		if(this.mToggled) {
			if(this.mMouseOverState) {
				this.mBackground.gotoFrame(5);
				this.mBackground.stop();
			} else {
				this.mBackground.gotoFrame(4);
				this.mBackground.stop();
			}
		} else if(this.mMouseOverState) {
			this.mBackground.gotoFrame(3);
			this.mBackground.stop();
		} else {
			this.mBackground.gotoFrame(2);
			this.mBackground.stop();
		}
		if(restoreAlpha >= 0) {
			this.mMainGraphics.set_alpha(restoreAlpha);
		}
	}
	,toggle: function(state,callFunction) {
		if(callFunction == null) {
			callFunction = false;
		}
		this.mToggled = state;
		if(this.mToggled) {
			if(this.mMouseOverState) {
				this.mBackground.gotoFrame(5);
				this.mBackground.stop();
			} else {
				this.mBackground.gotoFrame(4);
				this.mBackground.stop();
			}
		} else if(this.mMouseOverState) {
			this.mBackground.gotoFrame(3);
			this.mBackground.stop();
		} else {
			this.mBackground.gotoFrame(2);
			this.mBackground.stop();
		}
		if(callFunction && this.mClickFunction != null) {
			this.mClickFunction(this.mToggled,this);
		}
	}
	,onMouseOver: function(e) {
		this.mMouseOverState = true;
		if(this.mOverFunction != null) {
			this.mOverFunction(true,this);
		}
		if(this.mDisabled) {
			return;
		}
		if(this.mToggled) {
			this.mBackground.gotoFrame(5);
			this.mBackground.stop();
		} else {
			this.mBackground.gotoFrame(3);
			this.mBackground.stop();
		}
	}
	,onMouseOut: function(e) {
		this.mMouseOverState = false;
		if(this.mOverFunction != null) {
			this.mOverFunction(false,this);
		}
		if(this.mDisabled) {
			return;
		}
		if(this.mResetMouseButtonWhenLeaving && this.mDownFunction != null) {
			this.mDownFunction(false,this);
		}
		if(this.mToggled) {
			this.mBackground.gotoFrame(4);
			this.mBackground.stop();
		} else {
			this.mBackground.gotoFrame(2);
			this.mBackground.stop();
		}
	}
	,forceMouseOut: function() {
		this.mMouseOverState = false;
		if(this.mDisabled) {
			return;
		}
		if(this.mToggled) {
			this.mBackground.gotoFrame(4);
			this.mBackground.stop();
		} else {
			this.mBackground.gotoFrame(2);
			this.mBackground.stop();
		}
	}
	,onMouseClick: function(view,_x,_y,_id) {
		if(this.mDisabled) {
			return;
		}
		if(old_systems_uI_UIButton.FIX_MULTITOIUCH_BUG) {
			old_systems_uI_UIButton.FIX_MULTITOIUCH_BUG = false;
		} else if(_id == 1 && openfl_ui_Multitouch.get_supportsTouchEvents()) {
			return;
		}
		if(this.mToggleable) {
			if(this.mToggled) {
				if(!this.mCantBeToggledOff) {
					this.mToggled = false;
					if(this.mClickFunction != null) {
						this.mClickFunction(this.mToggled,this);
					}
					if(this.mMouseOverState) {
						this.mBackground.gotoFrame(3);
						this.mBackground.stop();
					} else {
						this.mBackground.gotoFrame(2);
						this.mBackground.stop();
					}
				}
			} else if(!this.mCantBeToggledOn) {
				this.mToggled = true;
				if(this.mClickFunction != null) {
					this.mClickFunction(this.mToggled,this);
				}
				if(this.mMouseOverState) {
					this.mBackground.gotoFrame(5);
					this.mBackground.stop();
				} else {
					this.mBackground.gotoFrame(4);
					this.mBackground.stop();
				}
			}
		} else if(this.mClickFunction != null) {
			this.mClickFunction(true,this);
		}
	}
	,onMouseDown: function(view,_x,_y,_id) {
		if(this.mDisabled) {
			return;
		}
		if(_id == 1 && openfl_ui_Multitouch.get_supportsTouchEvents()) {
			return;
		}
		old_singleton_SoundPlayer.get_instance().click(1);
		if(this.mToggleable) {
			return;
		}
		if(this.mDownFunction != null) {
			this.mDownFunction(true,this);
		}
	}
	,onMouseUp: function(view,_x,_y,_id) {
		if(this.mDisabled) {
			return;
		}
		if(_id == 1 && openfl_ui_Multitouch.get_supportsTouchEvents()) {
			return;
		}
		if(this.mToggleable) {
			return;
		}
		if(this.mDownFunction != null) {
			this.mDownFunction(false,this);
		}
	}
	,__class__: old_systems_uI_UIButton
	,__properties__: {set_cantBeToggledOn:"set_cantBeToggledOn",get_cantBeToggledOn:"get_cantBeToggledOn",set_cantBeToggledOff:"set_cantBeToggledOff",get_cantBeToggledOff:"get_cantBeToggledOff",set_toggleable:"set_toggleable",get_toggleable:"get_toggleable",set_descriptionToggledOver:"set_descriptionToggledOver",get_descriptionToggledOver:"get_descriptionToggledOver",set_descriptionToggled:"set_descriptionToggled",get_descriptionToggled:"get_descriptionToggled",set_descriptionIdleOver:"set_descriptionIdleOver",get_descriptionIdleOver:"get_descriptionIdleOver",set_descriptionIdle:"set_descriptionIdle",get_descriptionIdle:"get_descriptionIdle",set_descriptionDisabled:"set_descriptionDisabled",get_descriptionDisabled:"get_descriptionDisabled",set_downFunction:"set_downFunction",get_downFunction:"get_downFunction",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_text:"set_text",get_text:"get_text",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_origin:"set_origin",get_origin:"get_origin",set_data:"set_data",get_data:"get_data",set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id",set_resetMouseButtonWhenLeaving:"set_resetMouseButtonWhenLeaving",get_resetMouseButtonWhenLeaving:"get_resetMouseButtonWhenLeaving",set_labelSizeOffsetY:"set_labelSizeOffsetY",get_labelSizeOffsetY:"get_labelSizeOffsetY",set_labelSizeOffsetX:"set_labelSizeOffsetX",get_labelSizeOffsetX:"get_labelSizeOffsetX",get_disabled:"get_disabled",set_visible:"set_visible",get_visible:"get_visible",get_state:"get_state",get_label:"get_label",get_background:"get_background",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UIHelpTip = function() {
	this.mRandomTips = false;
	this.mTipNr = 0;
	this.mTransitionPhase = 0;
	this.mTransitionTimer = null;
	this.mLabel = null;
	this.mDelay = 0;
	this.mTimer = null;
	this.mY = 0;
	this.mX = 0;
	this.mBackground = null;
	this.mButton = null;
	this.mMainGraphics = null;
	this.mX = 0;
	this.mY = 0;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.touchable = false;
	this.mButton = new old_systems_uI_UIButton(null,"",this.mX,this.mY,0,610,45,$bind(this,this.onClick));
	this.mButton.get_background().set_alpha(0.75);
	this.mMainGraphics.addChild(this.mButton.get_mainGraphics());
	this.mLabel = this.mButton.get_label();
	this.mTransitionTimer = new openfl_utils_Timer(30,10);
	this.mTransitionTimer.addEventListener("timerComplete",$bind(this,this.onTransitionTimer));
	this.mTransitionTimer.addEventListener("timer",$bind(this,this.onTransitionTimerTick));
	this.mDelay = 4000;
	this.mRandomTips = true;
	this.mTimer = new openfl_utils_Timer(this.mDelay,2);
	this.mTimer.addEventListener("timer",$bind(this,this.onTimerEvent));
	this.mTimer.start();
	this.nextTip();
};
$hxClasses["old.systems.uI.UIHelpTip"] = old_systems_uI_UIHelpTip;
old_systems_uI_UIHelpTip.__name__ = "old.systems.uI.UIHelpTip";
old_systems_uI_UIHelpTip.__properties__ = {get_instance:"get_instance"};
old_systems_uI_UIHelpTip.get_instance = function() {
	if(old_systems_uI_UIHelpTip.mInstance == null) {
		old_systems_uI_UIHelpTip.mInstance = new old_systems_uI_UIHelpTip();
	}
	return old_systems_uI_UIHelpTip.mInstance;
};
old_systems_uI_UIHelpTip.prototype = {
	mMainGraphics: null
	,mButton: null
	,mBackground: null
	,mX: null
	,mY: null
	,mTimer: null
	,mDelay: null
	,mLabel: null
	,mTransitionTimer: null
	,mTransitionPhase: null
	,mTipNr: null
	,mRandomTips: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		this.mButton.set_x(this.mX);
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		this.mButton.set_y(this.mY);
		return value;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mDelay = value;
		this.mTimer.set_delay(this.mDelay);
		return value;
	}
	,set_shadow: function(value) {
		return value;
	}
	,set_random: function(value) {
		this.mRandomTips = value;
		return value;
	}
	,get_tipNr: function() {
		return this.mTipNr;
	}
	,init: function() {
	}
	,show: function() {
		this.mMainGraphics.set_visible(true);
		this.resume();
	}
	,hide: function() {
		this.mMainGraphics.set_visible(false);
		this.pause();
	}
	,onClick: function(state,button) {
		this.nextTip();
	}
	,onTimerEvent: function(e) {
		this.nextTip();
	}
	,nextTip: function() {
		this.mTransitionPhase = 0;
		this.mTransitionTimer.reset();
		this.mTransitionTimer.start();
		this.mTimer.reset();
		this.mTimer.start();
	}
	,onTransitionTimerTick: function(e) {
		if(this.mTransitionPhase == 0) {
			var _g = this.mLabel.get_mainGraphics();
			_g.set_alpha(_g.get_alpha() - 0.15);
			if(this.mLabel.get_mainGraphics().get_alpha() < 0) {
				this.mLabel.get_mainGraphics().set_alpha(0);
			}
		} else {
			var _g1 = this.mLabel.get_mainGraphics();
			_g1.set_alpha(_g1.get_alpha() + 0.15);
			if(this.mLabel.get_mainGraphics().get_alpha() > 1) {
				this.mLabel.get_mainGraphics().set_alpha(1);
			}
		}
	}
	,onTransitionTimer: function(e) {
		if(this.mTransitionPhase == 0) {
			this.mLabel.get_mainGraphics().set_alpha(0);
			this.getNewTip();
			this.mTransitionTimer.reset();
			this.mTransitionTimer.start();
			this.mTransitionPhase = 1;
		} else {
			this.mLabel.get_mainGraphics().set_alpha(1);
		}
	}
	,getNewTip: function() {
		var lLength = old_systems_uI_UIHelpTip.tipList.length;
		var lLastNr = this.mTipNr;
		if(this.mRandomTips) {
			this.mTipNr = old_helper_UsefulStuff.rnd(0,lLength - 1);
			if(this.mTipNr == lLastNr) {
				this.mTipNr = old_helper_UsefulStuff.rnd(0,lLength - 1);
			}
		} else {
			this.mTipNr++;
			if(this.mTipNr >= lLength) {
				this.mTipNr = 0;
			}
		}
		this.mButton.set_text("TIP: " + old_systems_uI_UIHelpTip.tipList[this.mTipNr]);
		this.mTimer.reset();
		this.mTimer.set_delay(Std.string(old_systems_uI_UIHelpTip.tipList[this.mTipNr]).length * 70);
		this.mTimer.start();
	}
	,pause: function() {
		this.mTimer.stop();
	}
	,resume: function() {
		this.mTimer.start();
	}
	,__class__: old_systems_uI_UIHelpTip
	,__properties__: {get_tipNr:"get_tipNr",set_random:"set_random",set_shadow:"set_shadow",set_delay:"set_delay",get_delay:"get_delay",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UIHint = function() {
	this.mNextHint = -1;
	this.mTweener = null;
	this.mTarget2Y = 0;
	this.mTarget2X = 0;
	this.mArrow2 = null;
	this.mTarget1Y = 0;
	this.mTarget1X = 0;
	this.mArrow1 = null;
	this.mY = 0;
	this.mX = 0;
	this.mButton = null;
	this.mTextLabel = null;
	this.mTitleLabel = null;
	this.mBackground = null;
	this.mMainGraphics = null;
	old_systems_System.call(this);
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onTweener));
	this.mTweener.addTween("Show","alpha",0,1,0.1,21);
	this.mTweener.addTween("Hide","alpha",1,0,0.2,21);
	this.mBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	this.mBackground.gotoFrame(8);
	this.mBackground.stop();
	this.mBackground.touchable = true;
	this.mMainGraphics.addChild(this.mBackground);
	this.mTitleLabel = new old_systems_uI_UILabel("Tutorial",0,5,"Ampersand",24,3750201);
	this.mBackground.addChild(this.mTitleLabel.get_mainGraphics());
	this.mTextLabel = new old_systems_uI_UILabel("",0,35,"Ampersand",17,3750201,false,false,"center",0,230);
	this.mBackground.addChild(this.mTextLabel.get_mainGraphics());
	this.mButton = new old_systems_uI_UIButton(null,"Continue",0,295,0,120,30,$bind(this,this.onButton));
	this.mBackground.addChild(this.mButton.get_mainGraphics());
	this.mArrow1 = old_MainOld.getInstance().builder.createAnimation("MenuElements");
	this.mMainGraphics.addChild(this.mArrow1);
	this.mArrow2 = old_MainOld.getInstance().builder.createAnimation("MenuElements");
	this.mMainGraphics.addChild(this.mArrow2);
	this.mMainGraphics.set_visible(false);
};
$hxClasses["old.systems.uI.UIHint"] = old_systems_uI_UIHint;
old_systems_uI_UIHint.__name__ = "old.systems.uI.UIHint";
old_systems_uI_UIHint.__super__ = old_systems_System;
old_systems_uI_UIHint.prototype = $extend(old_systems_System.prototype,{
	mMainGraphics: null
	,mBackground: null
	,mTitleLabel: null
	,mTextLabel: null
	,mButton: null
	,mX: null
	,mY: null
	,mArrow1: null
	,mTarget1X: null
	,mTarget1Y: null
	,mArrow2: null
	,mTarget2X: null
	,mTarget2Y: null
	,mTweener: null
	,mNextHint: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,setHint: function(id) {
		this.mArrow1.set_visible(false);
		this.mArrow2.set_visible(false);
		this.mButton.set_visible(false);
		this.mArrow1.set_scaleX(this.mArrow1.set_scaleY(0.6));
		this.mArrow2.set_scaleX(this.mArrow2.set_scaleY(0.6));
		this.mArrow1.set_rotation(0);
		this.mArrow2.set_rotation(0);
		this.mBackground.set_x(244);
		this.mBackground.set_y(64);
		this.mNextHint = -1;
		this.mButton.set_text("Continue");
		switch(id) {
		case 0:
			this.mTextLabel.set_text("");
			break;
		case 1:
			this.mArrow1.set_visible(true);
			this.mArrow1.set_x(430);
			this.mArrow1.set_y(333);
			this.mArrow2.set_visible(true);
			this.mArrow2.set_x(450);
			this.mArrow2.set_y(263);
			this.mArrow2.set_rotation(20 * Math.PI / 180);
			this.mTextLabel.set_text("You woke up in the middle of a zombie apocalypse. The broadcast said that you'll have to hold up for 40 days for the help to arive.\n<font color=\"" + "#661111" + "\">Time is your resource now!</font> Try to gain some time by killing the undead.\n\nClick <font color=\"" + "#661111" + "\">Next Wave</font> to greet the first wave of zombies!");
			break;
		case 2:
			this.mButton.set_visible(true);
			this.mTextLabel.set_text("It's clear for now!\nYou've gained some time, so you can send your search party to look for weapons and survivors.\n\nClick <font color=\"" + "#661111" + "\">Continue</font> and click a house on the map to send your search party there.\n\nYou'll have to fight off the next wave in the meantime!");
			break;
		case 3:
			this.mButton.set_visible(true);
			this.mArrow1.set_visible(true);
			this.mArrow1.set_x(430);
			this.mArrow1.set_y(360);
			this.mArrow1.set_rotation(40 * Math.PI / 180);
			this.mArrow2.set_visible(true);
			this.mArrow2.set_x(430);
			this.mArrow2.set_y(405);
			this.mArrow2.set_rotation(0);
			this.mTextLabel.set_text("Your search party is back!\n\nClick <font color=\"" + "#661111" + "\">Guns/Repairs</font> to manage any newfound weapons.\n\nClick <font color=\"" + "#661111" + "\">Survivors</font> to assign the newfound survivors to different tasks withing the group.");
			break;
		case 4:
			this.mButton.set_visible(true);
			this.mTextLabel.set_text("Your search party is back, but they haven't found anything useful.\n\nClick <font color=\"" + "#661111" + "\">Continue</font> and select the next house to keep looking.");
			break;
		case 5:
			this.mButton.set_visible(true);
			this.mTextLabel.set_text("You don't have enough time to send your search party anywhere.\nProceed to the next wave to gain some more time.\n\nYour search party will be distributed randomly to defensive roles while not on a journey.");
			break;
		case 6:case 7:case 8:
			this.mButton.set_visible(true);
			this.mTextLabel.set_text("Your barricades are almost destroyed. Click <font color=\"" + "#661111" + "\">Guns/Repairs</font> and use some time to get them fixed!");
			break;
		case 9:
			this.mBackground.set_x(320);
			this.mBackground.set_y(64);
			this.mButton.set_visible(true);
			this.mTextLabel.set_text("<font color=\"" + "#661111" + "\">Weapons:</font> Click a weapon to equip it to one of the two available slots. Click an already equipped weapon to unequip it.\n\n <font color=\"" + "#661111" + "\">Repairs:</font> You can repair your barricades, it will take time though, so you might be unable to send a search party if you spend to much time on repairing.");
			break;
		case 10:
			this.mBackground.set_x(470);
			this.mBackground.set_y(55);
			this.mButton.set_visible(true);
			this.mNextHint = 11;
			this.mButton.set_text("Continue 1/3");
			this.mTextLabel.set_text("Each survivor can be assigned to one of the 3 tasks:\n<font color=\"" + "#661111" + "\">Shooting</font> - uses the Fight skill to help you shoot off the walkers.\n<font color=\"" + "#661111" + "\">Repairing</font> - uses the Repair skill to minimize the damage done to the barricades.\n<font color=\"" + "#661111" + "\">Search party</font> - uses the fight and search skill to search for weapons and survivors.\n<font color=\"" + "#661111" + "\">Unassigned</font> survivors will be distributed randomly to defensive roles right before the attack.");
			break;
		case 11:
			this.mBackground.set_x(470);
			this.mBackground.set_y(55);
			this.mButton.set_visible(true);
			this.mArrow1.set_visible(true);
			this.mArrow1.set_x(245);
			this.mArrow1.set_y(80);
			this.mArrow1.set_rotation(180 * Math.PI / 180);
			this.mArrow2.set_visible(true);
			this.mArrow2.set_x(180);
			this.mArrow2.set_y(330);
			this.mArrow2.set_rotation(135 * Math.PI / 180);
			this.mButton.set_visible(true);
			this.mNextHint = 12;
			this.mButton.set_text("Continue 2/3");
			this.mTextLabel.set_text("To assign a survivor to a task, click the appropriate icon with the mouse and then click the respective task group button.\n\n<font color=\"" + "#661111" + "\">Shooting</font> and <font color=\"" + "#661111" + "\">Repairing</font> task groups are pretty <font color=\"" + "#661111" + "\">safe</font> for the survivors, while people assigned to the <font color=\"" + "#661111" + "\">Search party</font> always have a <font color=\"" + "#661111" + "\">chance to be ambushed</font> by the walkers. It is important to combine both good fighters and people with high search skill.");
			break;
		case 12:
			this.mBackground.set_x(470);
			this.mBackground.set_y(55);
			this.mButton.set_visible(true);
			this.mButton.set_text("Continue 3/3");
			this.mTextLabel.set_text("The higher is the <font color=\"" + "#661111" + "\">total fight skill</font> of the party in relation to the party size, the higher is the chance for the group to avoid any contacts with the walkers. In case they get ambushed, <font color=\"" + "#661111" + "\">personal fight skill</font> will determine the survival potential of each individual.  \n<font color=\"" + "#661111" + "\">A high search skill</font> will increase the chances to find a better weapon or more survivors earlier in the game.");
			break;
		}
		this.mTitleLabel.set_fontSize(this.mTitleLabel.get_fontSize());
		this.mTextLabel.set_fontSize(this.mTextLabel.get_fontSize());
		this.mButton.get_label().set_font(this.mButton.get_label().get_font());
	}
	,instaShowHint: function(id) {
		this.setHint(id);
		this.instaShow();
	}
	,showHint: function(id) {
		this.setHint(id);
		this.show();
	}
	,show: function() {
		this.mMainGraphics.set_visible(true);
		this.mTweener.start("Show");
	}
	,hide: function() {
		this.mTweener.start("Hide");
	}
	,instaShow: function() {
		this.mMainGraphics.set_visible(true);
		this.mTweener.fastForward("Show");
	}
	,instaHide: function() {
		this.mTweener.fastForward("Hide");
	}
	,onTweener: function(tweenSet) {
		if(tweenSet == "Hide") {
			if(this.mNextHint >= 0) {
				this.showHint(this.mNextHint);
			} else {
				this.mMainGraphics.set_visible(false);
			}
		}
	}
	,update: function(dt) {
		this.mTweener.update(dt);
	}
	,onButton: function(state,button) {
		old_MainOld.getInstance().get_Player().save();
		AdManager.showAd();
		this.hide();
	}
	,__class__: old_systems_uI_UIHint
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_mainGraphics:"get_mainGraphics"})
});
var old_systems_uI_UILabel = function(text,x,y,font,size,color,bold,italic,align,origin,width,height) {
	if(height == null) {
		height = 250;
	}
	if(width == null) {
		width = 200;
	}
	if(origin == null) {
		origin = 0;
	}
	if(align == null) {
		align = "center";
	}
	if(italic == null) {
		italic = false;
	}
	if(bold == null) {
		bold = false;
	}
	if(color == null) {
		color = 0;
	}
	if(size == null) {
		size = 16;
	}
	if(font == null) {
		font = "Berlin Sans FB Demi Bold";
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(text == null) {
		text = "";
	}
	this.mText = "";
	this.mOrigin = -1;
	this.mY = 0;
	this.mX = 0;
	this.mTextFormat = null;
	this.mTextField = null;
	this.mMainGraphics = null;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.set_scaleX(0.5);
	this.mMainGraphics.set_scaleY(0.5);
	this.mText = text;
	this.mX = x;
	this.mY = y;
	this.mOrigin = origin;
	this.mMainGraphics.set_y(this.mY);
	this.mTextFormat = new iriysoft_graphic_IsfTextFormat();
	this.mTextFormat.font = font;
	this.mTextFormat.size = size * 2;
	this.mTextFormat.color = color;
	this.mTextFormat.bold = bold;
	this.mTextFormat.italic = italic;
	this.mTextFormat.align = align;
	this.mTextField = old_MainOld.getInstance().builder.createTextField();
	this.mTextField.set_multiline(true);
	this.mTextField.set_wordWrap(true);
	this.mTextField.set_textFormat(this.mTextFormat);
	this.mTextField.set_htmlText(text);
	this.mMainGraphics.addChild(this.mTextField);
	this.mTextField.set_width((width + 6) * 2);
	this.mTextField.set_height(height * 2);
	this.updateDimensions();
};
$hxClasses["old.systems.uI.UILabel"] = old_systems_uI_UILabel;
old_systems_uI_UILabel.__name__ = "old.systems.uI.UILabel";
old_systems_uI_UILabel.prototype = {
	mMainGraphics: null
	,mTextField: null
	,mTextFormat: null
	,mX: null
	,mY: null
	,mOrigin: null
	,mText: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_textField: function() {
		return this.mTextField;
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		this.mText = value;
		this.mTextField.set_htmlText(this.mText);
		this.updateDimensions();
		return value;
	}
	,get_font: function() {
		return this.mTextFormat.font;
	}
	,set_font: function(value) {
		this.mTextFormat.font = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_leading: function() {
		return this.mTextFormat.leading;
	}
	,set_leading: function(value) {
		this.mTextFormat.leading = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_letterSpacing: function() {
		return this.mTextFormat.letterSpacing | 0;
	}
	,set_letterSpacing: function(value) {
		this.mTextFormat.letterSpacing = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_fontColor: function() {
		try {
			return js_Boot.__cast(this.mTextFormat.color , Int);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	,set_fontColor: function(value) {
		this.mTextFormat.color = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_fontSize: function() {
		return this.mTextFormat.size / 2 | 0;
	}
	,set_fontSize: function(value) {
		this.mTextFormat.size = value;
		this.mTextFormat.size *= 2;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		this.updateDimensions();
		return value;
	}
	,get_bold: function() {
		try {
			return js_Boot.__cast(this.mTextFormat.bold , Bool);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	,set_bold: function(value) {
		this.mTextFormat.bold = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_italic: function() {
		try {
			return js_Boot.__cast(this.mTextFormat.italic , Bool);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	,set_italic: function(value) {
		this.mTextFormat.italic = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		return value;
	}
	,get_origin: function() {
		return this.mOrigin;
	}
	,set_origin: function(value) {
		this.mOrigin = value;
		this.updateDimensions();
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		this.updateDimensions();
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		this.mMainGraphics.set_y(this.mY);
		return value;
	}
	,get_maxWidth: function() {
		return this.mTextField.get_width() | 0;
	}
	,set_maxWidth: function(value) {
		this.mTextField.set_width(value > 0 ? value * 2 : 1);
		this.updateDimensions();
		return value;
	}
	,get_textWidth: function() {
		return this.mTextField.get_width() | 0;
	}
	,get_maxHeight: function() {
		return this.mTextField.get_height() | 0;
	}
	,set_maxHeight: function(value) {
		this.mTextField.set_height(value > 0 ? value * 2 : 1);
		return value;
	}
	,get_textHeight: function() {
		return this.mTextField.get_height() | 0;
	}
	,get_indent: function() {
		return this.mTextFormat.indent;
	}
	,set_indent: function(value) {
		this.mTextFormat.indent = value;
		this.mTextField.set_textFormat(this.mTextFormat);
		this.set_text(this.mText);
		this.updateDimensions();
		return value;
	}
	,get_visible: function() {
		return this.mMainGraphics.get_visible();
	}
	,set_visible: function(value) {
		this.mMainGraphics.set_visible(value);
		return value;
	}
	,setStyle: function(font,size,color,bold,italic) {
		if(italic == null) {
			italic = false;
		}
		if(bold == null) {
			bold = false;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 16;
		}
		if(font == null) {
			font = "Berlin Sans FB Demi Bold";
		}
		this.mTextFormat.font = font;
		this.mTextFormat.size = size;
		this.mTextFormat.color = color;
		this.mTextFormat.bold = bold;
		this.mTextFormat.italic = italic;
		this.mTextField.set_textFormat(this.mTextFormat);
	}
	,updateDimensions: function() {
		if(this.mOrigin < 0) {
			this.mMainGraphics.set_x(this.mX);
		} else if(this.mOrigin == 0) {
			this.mMainGraphics.set_x(this.mX - this.mTextField.get_width() / 4);
		} else if(this.mOrigin > 0) {
			this.mMainGraphics.set_x(this.mX - this.mTextField.get_width() / 2);
		}
	}
	,__class__: old_systems_uI_UILabel
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_indent:"set_indent",get_indent:"get_indent",get_textHeight:"get_textHeight",set_maxHeight:"set_maxHeight",get_maxHeight:"get_maxHeight",get_textWidth:"get_textWidth",set_maxWidth:"set_maxWidth",get_maxWidth:"get_maxWidth",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_origin:"set_origin",get_origin:"get_origin",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontColor:"set_fontColor",get_fontColor:"get_fontColor",set_letterSpacing:"set_letterSpacing",get_letterSpacing:"get_letterSpacing",set_leading:"set_leading",get_leading:"get_leading",set_font:"set_font",get_font:"get_font",set_text:"set_text",get_text:"get_text",get_textField:"get_textField",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UIPageArea = function(x,y,origin,width,height,speed) {
	if(speed == null) {
		speed = 200;
	}
	if(height == null) {
		height = 200;
	}
	if(width == null) {
		width = 200;
	}
	if(origin == null) {
		origin = -1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.mHeight = 200;
	this.mWidth = 200;
	this.mOrigin = 0;
	this.mY = 0;
	this.mX = 0;
	this.mOffset = 50;
	this.mScrollTween = null;
	this.mCurPage = 0;
	this.mScrollSpeed = 200;
	this.mTotalPages = 0;
	this.mPageLabel = null;
	this.mLastPageBtn = null;
	this.mNextPageBtn = null;
	this.mPrevPageBtn = null;
	this.mFirstPageBtn = null;
	this.mContent = null;
	this.mMainGraphics = null;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mX = x;
	this.mY = y;
	this.mOrigin = origin;
	this.mWidth = width;
	this.mHeight = height;
	this.mMainGraphics.set_y(this.mY);
	this.mScrollSpeed = speed;
	this.mContent = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mContent);
	this.mFirstPageBtn = new old_systems_uI_UIButton("UIDefaultArrowLeftLeft","",0,0,1,-1,-1,$bind(this,this.onFirstPage));
	this.mMainGraphics.addChild(this.mFirstPageBtn.get_mainGraphics());
	this.mPrevPageBtn = new old_systems_uI_UIButton("UIDefaultArrowLeft","",0,0,1,-1,-1,$bind(this,this.onPrevPage));
	this.mMainGraphics.addChild(this.mPrevPageBtn.get_mainGraphics());
	this.mPageLabel = new old_systems_uI_UILabel("0/0",this.mWidth / 2 | 0,this.mHeight | 0,"Berlin Sans FB Demi Bold",16,16777215,true,false,"center",0);
	this.mMainGraphics.addChild(this.mPageLabel.get_mainGraphics());
	this.mNextPageBtn = new old_systems_uI_UIButton("UIDefaultArrowRight","",0,0,-1,-1,-1,$bind(this,this.onNextPage));
	this.mMainGraphics.addChild(this.mNextPageBtn.get_mainGraphics());
	this.mLastPageBtn = new old_systems_uI_UIButton("UIDefaultArrowRightRight","",0,0,-1,-1,-1,$bind(this,this.onLastPage));
	this.mMainGraphics.addChild(this.mLastPageBtn.get_mainGraphics());
	this.mFirstPageBtn.get_mainGraphics().set_visible(false);
	this.mPrevPageBtn.get_mainGraphics().set_visible(false);
	this.mPageLabel.get_mainGraphics().set_visible(false);
	this.mNextPageBtn.get_mainGraphics().set_visible(false);
	this.mLastPageBtn.get_mainGraphics().set_visible(false);
	this.mScrollTween = new old_helper_Tweener(this.mContent,null);
	this.mScrollTween.addTween("TurnPage","x",0,0,0.2,23);
	this.updateDimensions();
};
$hxClasses["old.systems.uI.UIPageArea"] = old_systems_uI_UIPageArea;
old_systems_uI_UIPageArea.__name__ = "old.systems.uI.UIPageArea";
old_systems_uI_UIPageArea.prototype = {
	mMainGraphics: null
	,mContent: null
	,mFirstPageBtn: null
	,mPrevPageBtn: null
	,mNextPageBtn: null
	,mLastPageBtn: null
	,mPageLabel: null
	,mTotalPages: null
	,mScrollSpeed: null
	,mCurPage: null
	,mScrollTween: null
	,mOffset: null
	,mX: null
	,mY: null
	,mOrigin: null
	,mWidth: null
	,mHeight: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_content: function() {
		return this.mContent;
	}
	,get_origin: function() {
		return this.mOrigin;
	}
	,set_origin: function(value) {
		this.mOrigin = value;
		this.updateDimensions();
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		this.updateDimensions();
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		this.mMainGraphics.set_y(this.mY);
		return value;
	}
	,get_width: function() {
		return this.mWidth | 0;
	}
	,set_width: function(value) {
		this.mWidth = value;
		this.updateDimensions();
		return value;
	}
	,get_contentWidth: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight | 0;
	}
	,set_height: function(value) {
		this.mHeight = value;
		this.updateDimensions();
		return value;
	}
	,get_contentHeight: function() {
		return this.mHeight - this.mNextPageBtn.get_height();
	}
	,get_pageNumber: function() {
		return this.mCurPage;
	}
	,get_totalPages: function() {
		return this.mTotalPages;
	}
	,addContentToPage: function(page,obj) {
		if(page < 0) {
			return;
		}
		if(this.mTotalPages < page) {
			this.mTotalPages = page;
			this.updateButtons();
		}
		this.mContent.addChild(obj);
		var _g = obj;
		_g.set_x(_g.get_x() + page * (this.mWidth + this.mOffset));
		this.updateDimensions();
	}
	,onFirstPage: function(state,button) {
		if(this.mCurPage > 0) {
			this.mScrollTween.getTween("TurnPage","x").set_minValue(this.mScrollTween.getTween("TurnPage","x").get_maxValue());
			this.mScrollTween.getTween("TurnPage","x").set_maxValue(0);
			this.mCurPage = 0;
			this.mScrollTween.start("TurnPage");
			this.updateButtons();
		}
	}
	,onPrevPage: function(state,button) {
		if(this.mCurPage > 0) {
			this.mScrollTween.getTween("TurnPage","x").set_minValue(this.mScrollTween.getTween("TurnPage","x").get_maxValue());
			var _g = this.mScrollTween.getTween("TurnPage","x");
			_g.set_maxValue(_g.get_maxValue() + (this.mWidth + this.mOffset));
			this.mCurPage--;
			this.mScrollTween.start("TurnPage");
			this.updateButtons();
		}
	}
	,onNextPage: function(state,button) {
		if(this.mCurPage < this.mTotalPages) {
			this.mScrollTween.getTween("TurnPage","x").set_minValue(this.mScrollTween.getTween("TurnPage","x").get_maxValue());
			var _g = this.mScrollTween.getTween("TurnPage","x");
			_g.set_maxValue(_g.get_maxValue() - (this.mWidth + this.mOffset));
			this.mCurPage++;
			this.mScrollTween.start("TurnPage");
			this.updateButtons();
		}
	}
	,onLastPage: function(state,button) {
		if(this.mCurPage < this.mTotalPages) {
			this.mScrollTween.getTween("TurnPage","x").set_minValue(this.mScrollTween.getTween("TurnPage","x").get_maxValue());
			this.mScrollTween.getTween("TurnPage","x").set_maxValue(-this.mTotalPages * (this.mWidth + this.mOffset));
			this.mCurPage = this.mTotalPages;
			this.mScrollTween.start("TurnPage");
			this.updateButtons();
		}
	}
	,firstPage: function(instant) {
		if(instant == null) {
			instant = false;
		}
		if(instant) {
			this.mCurPage = 0;
			this.mScrollTween.getTween("TurnPage","x").set_maxValue(this.mContent.set_x(0));
			this.updateButtons();
		} else {
			this.onFirstPage(false,null);
		}
	}
	,prevPage: function(instant) {
		if(instant == null) {
			instant = false;
		}
		if(instant) {
			this.mCurPage--;
			var tmp = this.mScrollTween.getTween("TurnPage","x");
			var _g = this.mContent;
			tmp.set_maxValue(_g.set_x(_g.get_x() + (this.mWidth + this.mOffset)));
			this.updateButtons();
		} else {
			this.onPrevPage(false,null);
		}
	}
	,nextPage: function(instant) {
		if(instant == null) {
			instant = false;
		}
		if(instant) {
			this.mCurPage++;
			var tmp = this.mScrollTween.getTween("TurnPage","x");
			var _g = this.mContent;
			tmp.set_maxValue(_g.set_x(_g.get_x() - (this.mWidth + this.mOffset)));
			this.updateButtons();
		} else {
			this.onNextPage(false,null);
		}
	}
	,lastPage: function(instant) {
		if(instant == null) {
			instant = false;
		}
		if(instant) {
			this.mCurPage = this.mTotalPages;
			this.mScrollTween.getTween("TurnPage","x").set_maxValue(this.mContent.set_x(-this.mTotalPages * (this.mWidth + this.mOffset)));
			this.updateButtons();
		} else {
			this.onLastPage(false,null);
		}
	}
	,update: function(dt) {
		this.mScrollTween.update(dt);
	}
	,updateDimensions: function() {
		this.updateButtons();
		this.mPrevPageBtn.set_x(this.mWidth / 2 - this.mPageLabel.get_textWidth());
		this.mPrevPageBtn.set_y(this.mHeight);
		this.mFirstPageBtn.set_x(this.mPrevPageBtn.get_x() - this.mFirstPageBtn.get_width());
		this.mFirstPageBtn.set_y(this.mHeight);
		this.mPageLabel.set_x(this.mWidth / 2);
		this.mPageLabel.set_y(this.mHeight);
		this.mNextPageBtn.set_x(this.mWidth / 2 + this.mPageLabel.get_textWidth());
		this.mNextPageBtn.set_y(this.mHeight);
		this.mLastPageBtn.set_x(this.mNextPageBtn.get_x() + this.mLastPageBtn.get_width());
		this.mLastPageBtn.set_y(this.mHeight);
		if(this.mOrigin < 0) {
			this.mMainGraphics.set_x(this.mX);
		} else if(this.mOrigin == 0) {
			this.mMainGraphics.set_x(this.mX - this.mWidth / 2);
		} else if(this.mOrigin > 0) {
			this.mMainGraphics.set_x(this.mX - this.mWidth);
		}
	}
	,updateButtons: function() {
		this.mPageLabel.set_text(this.mCurPage + 1 + "/" + (this.mTotalPages + 1));
		if(this.mTotalPages <= 0) {
			this.mFirstPageBtn.disable(0.25);
			this.mPrevPageBtn.disable(0.25);
			this.mNextPageBtn.disable(0.25);
			this.mLastPageBtn.disable(0.25);
		} else {
			this.mFirstPageBtn.enable(1);
			this.mPrevPageBtn.enable(1);
			this.mNextPageBtn.enable(1);
			this.mLastPageBtn.enable(1);
			if(this.mCurPage >= this.mTotalPages) {
				this.mNextPageBtn.disable(0.25);
				this.mLastPageBtn.disable(0.25);
			} else if(this.mCurPage <= 0) {
				this.mFirstPageBtn.disable(0.25);
				this.mPrevPageBtn.disable(0.25);
			}
		}
	}
	,__class__: old_systems_uI_UIPageArea
	,__properties__: {get_totalPages:"get_totalPages",get_pageNumber:"get_pageNumber",get_contentHeight:"get_contentHeight",set_height:"set_height",get_height:"get_height",get_contentWidth:"get_contentWidth",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_origin:"set_origin",get_origin:"get_origin",get_content:"get_content",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UIPopup = function(graphics,x,y,width,height,popupHiddenFunction) {
	if(height == null) {
		height = 300;
	}
	if(width == null) {
		width = 200;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.mHeight = 0;
	this.mWidth = 0;
	this.mY = 0;
	this.mX = 0;
	this.mPopupHiddenFunction = null;
	this.mButtonClicked = null;
	this.mContentTween = null;
	this.mBackground = null;
	this.mContent = null;
	this.mShadowTween = null;
	this.mShadow = null;
	this.mMainGraphics = null;
	this.mReady = false;
	old_systems_System.call(this);
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.touchable = false;
	this.mShadow = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mShadow.set_scaleX(this.mShadow.set_scaleY(1000));
	this.mShadow.set_alpha(0.75);
	this.mShadow.set_x(-500);
	this.mMainGraphics.addChild(this.mShadow);
	this.mShadowTween = new old_helper_Tweener(this.mShadow,$bind(this,this.onHideFinished));
	this.mShadowTween.addTween("Show","alpha",0,1,0.2,22);
	this.mShadowTween.addTween("Hide","alpha",1,0,0.2,21);
	this.mContent = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mContent);
	this.mContentTween = new old_helper_Tweener(this.mContent);
	this.mContentTween.addTween("Show","alpha",0,1,0.2,22);
	this.mContentTween.addTween("Hide","alpha",1,0,0.2,21);
	if(graphics == null) {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation("UIDefaultShape");
		this.mBackground.set_x(x);
		this.mBackground.set_y(y);
		this.mBackground.set_width(width);
		this.mBackground.set_height(height);
		this.mBackground.set_alpha(0.75);
	} else {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation(graphics);
		this.mBackground.set_x(x);
		this.mBackground.set_y(y);
	}
	this.mContent.addChild(this.mBackground);
	this.mContent.touchable = true;
	this.mPopupHiddenFunction = popupHiddenFunction;
	this.mMainGraphics.set_visible(false);
};
$hxClasses["old.systems.uI.UIPopup"] = old_systems_uI_UIPopup;
old_systems_uI_UIPopup.__name__ = "old.systems.uI.UIPopup";
old_systems_uI_UIPopup.__super__ = old_systems_System;
old_systems_uI_UIPopup.prototype = $extend(old_systems_System.prototype,{
	mReady: null
	,mMainGraphics: null
	,mShadow: null
	,mShadowTween: null
	,mContent: null
	,mBackground: null
	,mContentTween: null
	,mButtonClicked: null
	,mPopupHiddenFunction: null
	,mX: null
	,mY: null
	,mWidth: null
	,mHeight: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,show: function() {
		this.mShadowTween.start("Show");
		this.mContentTween.start("Show");
		this.mMainGraphics.set_visible(true);
	}
	,hide: function() {
		this.mReady = false;
		this.mShadowTween.start("Hide");
		this.mContentTween.start("Hide");
	}
	,instaShow: function() {
		this.mShadowTween.fastForward("Show");
		this.mContentTween.fastForward("Show");
		this.mMainGraphics.set_visible(true);
		this.mMainGraphics.touchable = true;
	}
	,instaHide: function() {
		this.mMainGraphics.set_visible(false);
		this.mMainGraphics.touchable = false;
	}
	,update: function(dt) {
		this.mShadowTween.update(dt);
		this.mContentTween.update(dt);
	}
	,onHideFinished: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mReady = true;
			this.mMainGraphics.touchable = true;
		} else if(tweenSet == "Hide") {
			this.mMainGraphics.touchable = false;
			this.mMainGraphics.set_visible(false);
			if(this.mPopupHiddenFunction != null) {
				this.mPopupHiddenFunction(this.mButtonClicked);
			}
		}
	}
	,beforeShow: function() {
	}
	,__class__: old_systems_uI_UIPopup
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_mainGraphics:"get_mainGraphics"})
});
var old_systems_uI_UIPopup2 = function(graphics,x,y,width,height,popupHiddenFunction) {
	if(height == null) {
		height = 300;
	}
	if(width == null) {
		width = 200;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.mHeight = 0;
	this.mWidth = 0;
	this.mY = 0;
	this.mX = 0;
	this.mPopupHiddenFunction = null;
	this.mBitmap = null;
	this.mButtonClicked = null;
	this.mContentTween = null;
	this.mBackground = null;
	this.mContent = null;
	this.mShadowTween = null;
	this.mShadow = null;
	this.mMainGraphics = null;
	this.mReady = false;
	old_systems_System.call(this);
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.touchable = false;
	this.mShadow = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mShadow.set_scaleX(this.mShadow.set_scaleY(1000));
	this.mShadow.set_alpha(0.5);
	this.mShadow.set_x(-500);
	this.mShadow.set_y(-500);
	this.mMainGraphics.addChild(this.mShadow);
	this.mShadowTween = new old_helper_Tweener(this.mShadow);
	this.mShadowTween.addTween("Show","alpha",0,0.5,0.2,22);
	this.mShadowTween.addTween("Hide","alpha",0.5,0,0.2,21);
	this.mContent = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mContent);
	this.mBitmap = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mBitmap);
	this.mContentTween = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onHideFinished));
	this.mContentTween.addTween("Show","alpha",0,1,0.5,22);
	this.mContentTween.addTween("Hide","alpha",1,0,0.3,21);
	if(graphics == null) {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation("UIDefaultShape");
		this.mBackground.set_x(x);
		this.mBackground.set_y(y);
		this.mBackground.set_width(width);
		this.mBackground.set_height(height);
		this.mBackground.set_alpha(0.75);
	} else {
		this.mBackground = old_MainOld.getInstance().builder.createAnimation(graphics);
		this.mBackground.set_x(x);
		this.mBackground.set_y(y);
	}
	this.mBackground.touchable = true;
	this.mBackground.set_scaleX(this.mBackground.set_scaleY(0.8));
	this.mContent.addChild(this.mBackground);
	this.mPopupHiddenFunction = popupHiddenFunction;
	this.mMainGraphics.set_visible(false);
	this.mBitmap.set_visible(false);
};
$hxClasses["old.systems.uI.UIPopup2"] = old_systems_uI_UIPopup2;
old_systems_uI_UIPopup2.__name__ = "old.systems.uI.UIPopup2";
old_systems_uI_UIPopup2.__super__ = old_systems_System;
old_systems_uI_UIPopup2.prototype = $extend(old_systems_System.prototype,{
	mReady: null
	,mMainGraphics: null
	,mShadow: null
	,mShadowTween: null
	,mContent: null
	,mBackground: null
	,mContentTween: null
	,mButtonClicked: null
	,mBitmap: null
	,mPopupHiddenFunction: null
	,mX: null
	,mY: null
	,mWidth: null
	,mHeight: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,show: function() {
		this.beforeShow();
		this.bakeToBitmap();
		this.mBitmap.set_visible(true);
		this.mShadowTween.start("Show");
		this.mContentTween.start("Show");
		this.mMainGraphics.set_visible(true);
	}
	,hide: function() {
		this.bakeToBitmap();
		this.mBitmap.set_visible(true);
		this.mReady = false;
		this.mShadowTween.start("Hide");
		this.mContentTween.start("Hide");
	}
	,instaHide: function() {
		this.mMainGraphics.set_visible(false);
	}
	,instaShow: function() {
		this.beforeShow();
		this.bakeToBitmap();
		this.mBitmap.set_visible(true);
		this.mShadowTween.fastForward("Show");
		this.mContentTween.fastForward("Show");
		this.mMainGraphics.set_visible(true);
	}
	,update: function(dt) {
		this.mShadowTween.update(dt);
		this.mContentTween.update(dt);
	}
	,onHideFinished: function(tweenSet) {
		haxe_Log.trace("onHideFinished " + tweenSet,{ fileName : "src/old/systems/uI/UIPopup2.hx", lineNumber : 181, className : "old.systems.uI.UIPopup2", methodName : "onHideFinished"});
		if(tweenSet == "Show") {
			this.mMainGraphics.touchable = true;
			this.mReady = true;
			this.mContent.set_x(this.mBitmap.get_x());
			this.mContent.set_y(this.mBitmap.get_y());
			this.mBitmap.set_visible(false);
		} else if(tweenSet == "Hide") {
			this.mMainGraphics.touchable = false;
			this.mMainGraphics.set_visible(false);
			if(this.mPopupHiddenFunction != null) {
				this.mPopupHiddenFunction(this.mButtonClicked);
			}
		}
	}
	,bakeToBitmap: function() {
	}
	,beforeShow: function() {
	}
	,__class__: old_systems_uI_UIPopup2
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_mainGraphics:"get_mainGraphics"})
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__shaderBlendMode: null
	,__smooth: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = "openfl.filters.DropShadowFilter";
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.__distance,this.__angle,this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout,this.__hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var point = new openfl_geom_Point(destPoint.x + this.__offsetX,destPoint.y + this.__offsetY);
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),point.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_angle: function() {
		return this.__angle;
	}
	,set_angle: function(value) {
		if(value != this.__angle) {
			this.__angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_distance: function() {
		return this.__distance;
	}
	,set_distance: function(value) {
		if(value != this.__distance) {
			this.__distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_hideObject: function() {
		return this.__hideObject;
	}
	,set_hideObject: function(value) {
		if(value != this.__hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.__hideObject = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_hideObject:"set_hideObject",get_hideObject:"get_hideObject",set_distance:"set_distance",get_distance:"get_distance",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_angle:"set_angle",get_angle:"get_angle",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var old_systems_uI_UIProperties = function() {
};
$hxClasses["old.systems.uI.UIProperties"] = old_systems_uI_UIProperties;
old_systems_uI_UIProperties.__name__ = "old.systems.uI.UIProperties";
old_systems_uI_UIProperties.prototype = {
	__class__: old_systems_uI_UIProperties
};
var old_systems_uI_UIScreen = function(uiSystem) {
	this.mNameScr = "";
	this.mReady = false;
	this.mTransitionSignal = new hxsignal_impl_Signal2();
	this.mBackState = 0;
	this.mMainGraphics = null;
	this.mUISystem = null;
	old_systems_System.call(this);
	this.mUISystem = uiSystem;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(1.6666666666666667));
	this.mMainGraphics.touchable = true;
};
$hxClasses["old.systems.uI.UIScreen"] = old_systems_uI_UIScreen;
old_systems_uI_UIScreen.__name__ = "old.systems.uI.UIScreen";
old_systems_uI_UIScreen.__interfaces__ = [old_systems_uI_IScreenUI];
old_systems_uI_UIScreen.__super__ = old_systems_System;
old_systems_uI_UIScreen.prototype = $extend(old_systems_System.prototype,{
	mUISystem: null
	,mMainGraphics: null
	,mBackState: null
	,mTransitionSignal: null
	,mReady: null
	,mNameScr: null
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_backState: function() {
		return this.mBackState;
	}
	,set_backState: function(value) {
		this.mBackState = value;
		return value;
	}
	,get_nameScr: function() {
		return this.mNameScr;
	}
	,get_isReady: function() {
		return this.mReady;
	}
	,hide: function(nextState,instaHide) {
		if(instaHide == null) {
			instaHide = false;
		}
		if(instaHide) {
			this.mReady = false;
			this.mMainGraphics.set_visible(false);
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		} else {
			this.slideOut(nextState);
		}
	}
	,afterHide: function() {
	}
	,show: function(prevState,instaShow) {
		if(instaShow == null) {
			instaShow = false;
		}
		if(instaShow) {
			this.mReady = false;
			this.beforeShow();
			this.mMainGraphics.set_visible(true);
			this.mTransitionSignal.emit(1,this);
		} else {
			this.beforeShow();
			this.slideIn(prevState);
		}
	}
	,beforeShow: function() {
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		haxe_Log.trace("UIScr slideOut",{ fileName : "src/old/systems/uI/UIScreen.hx", lineNumber : 124, className : "old.systems.uI.UIScreen", methodName : "slideOut"});
		this.mTransitionSignal.emit(0,this);
	}
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		haxe_Log.trace("UIScr slideIn",{ fileName : "src/old/systems/uI/UIScreen.hx", lineNumber : 129, className : "old.systems.uI.UIScreen", methodName : "slideIn"});
		this.mTransitionSignal.emit(1,this);
	}
	,ready: function() {
		this.mReady = true;
		this.afterReady();
	}
	,afterReady: function() {
	}
	,__class__: old_systems_uI_UIScreen
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_nameScr:"get_nameScr",get_isReady:"get_isReady",set_backState:"set_backState",get_backState:"get_backState",get_mainGraphics:"get_mainGraphics"})
});
var old_systems_uI_UISlider = function(mouseMoveFunction,verticalDirection,x,y,initValue,origin,maxLength,minValue,maxValue) {
	if(maxValue == null) {
		maxValue = 100;
	}
	if(minValue == null) {
		minValue = 0;
	}
	if(maxLength == null) {
		maxLength = 200;
	}
	if(origin == null) {
		origin = -1;
	}
	if(initValue == null) {
		initValue = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(verticalDirection == null) {
		verticalDirection = false;
	}
	this.mDisabled = false;
	this.mMouseMoveFunction = null;
	this.mDragging = false;
	this.mCurDistance = 0;
	this.mTotalDistance = 0;
	this.mTotalValue = 100;
	this.mMaxValue = 100;
	this.mMinValue = 0;
	this.mClickableArea = null;
	this.mLine = null;
	this.mDefaultSlider = true;
	this.mSlider = null;
	this.mColor = 0;
	this.mDirectionVertical = false;
	this.mMaxLength = 200;
	this.mHeight = 200;
	this.mWidth = 200;
	this.mOrigin = 0;
	this.mY = 0;
	this.mX = 0;
	this.mMainGraphics = null;
	this.mMainGraphics = old_MainOld.getInstance().builder.createSprite();
	if(!old_MainOld.getInstance().context.vs_mgr.signalMove.hasSlot($bind(this,this.updatePosition))) {
		old_MainOld.getInstance().context.vs_mgr.signalMove.addSlot($bind(this,this.updatePosition));
	}
	this.mX = x;
	this.mY = y;
	this.mOrigin = origin;
	this.mMainGraphics.set_y(this.mY);
	this.mMaxLength = maxLength;
	this.mDirectionVertical = verticalDirection;
	this.mMinValue = minValue;
	this.mMaxValue = maxValue;
	this.mTotalValue = this.mMaxValue - this.mMinValue;
	this.mMouseMoveFunction = mouseMoveFunction;
	this.mClickableArea = old_MainOld.getInstance().builder.createAnimation("UIDefaultButton3");
	this.mClickableArea.set_alpha(0);
	this.mClickableArea.set_y(15);
	this.mClickableArea.set_x(15);
	this.mMainGraphics.addChild(this.mClickableArea);
	this.mClickableArea.gotoFrame(1);
	this.mClickableArea.stop();
	this.mClickableArea.touchable = true;
	this.mDefaultSlider = true;
	this.mSlider = old_MainOld.getInstance().builder.createAnimation("UIDefaultButton");
	this.mSlider.set_x(this.mSlider.get_width() / 2);
	this.mSlider.set_y(this.mSlider.get_height() / 2);
	this.mLine = old_MainOld.getInstance().builder.createAnimation("UIDefaultButton3");
	this.mLine.set_scaleY(0.5);
	this.mLine.set_x(this.mSlider.get_width() / 2);
	this.mLine.set_y(this.mSlider.get_height() / 2);
	this.mMainGraphics.addChild(this.mLine);
	this.mMainGraphics.addChild(this.mSlider);
	this.mLine.gotoFrame(1);
	this.mLine.stop();
	this.mSlider.gotoFrame(5);
	this.mSlider.stop();
	if(!verticalDirection) {
		this.mClickableArea.set_width(this.mMaxLength + this.mSlider.get_width());
	} else {
		this.mClickableArea.set_height(this.mMaxLength);
	}
	if(!verticalDirection) {
		this.mTotalDistance = this.mMaxLength - this.mSlider.get_width();
	} else {
		this.mTotalDistance = this.mMaxLength - this.mSlider.get_height();
	}
	this.mCurDistance = 0;
	this.updateDimensions();
	this.set_curValue(initValue);
	this.mClickableArea.signalTouchDown.addSlot($bind(this,this.onMouseDown));
	this.mClickableArea.signalRollOut.addSlot($bind(this,this.onMouseOut));
	this.mClickableArea.signalTouchUp.addSlot($bind(this,this.onMouseUp));
};
$hxClasses["old.systems.uI.UISlider"] = old_systems_uI_UISlider;
old_systems_uI_UISlider.__name__ = "old.systems.uI.UISlider";
old_systems_uI_UISlider.prototype = {
	mMainGraphics: null
	,mX: null
	,mY: null
	,mOrigin: null
	,mWidth: null
	,mHeight: null
	,mMaxLength: null
	,mDirectionVertical: null
	,mColor: null
	,mSlider: null
	,mDefaultSlider: null
	,mLine: null
	,mClickableArea: null
	,mMinValue: null
	,mMaxValue: null
	,mTotalValue: null
	,mTotalDistance: null
	,mCurDistance: null
	,mDragging: null
	,mMouseMoveFunction: null
	,mDisabled: null
	,updatePosition: function(_x,_y) {
		old_systems_uI_UISlider.stageX = _x;
		old_systems_uI_UISlider.stageY = _y;
		this.onMouseMove();
	}
	,disable: function(reduceAlpha) {
		if(reduceAlpha == null) {
			reduceAlpha = -1;
		}
		this.mDisabled = true;
		if(reduceAlpha >= 0) {
			this.mMainGraphics.set_alpha(reduceAlpha);
		}
	}
	,enable: function(restoreAlpha) {
		if(restoreAlpha == null) {
			restoreAlpha = -1;
		}
		this.mDisabled = false;
		if(restoreAlpha >= 0) {
			this.mMainGraphics.set_alpha(restoreAlpha);
		}
	}
	,onMouseDown: function(e,_x,_y,_id) {
		if(this.mDisabled) {
			return;
		}
		this.mDragging = true;
		var lX = _x / 100 * this.mMaxLength;
		var lY = _y / 100 * this.mMaxLength;
		if(!this.mDirectionVertical) {
			if(lX < this.mSlider.get_width() / 2) {
				this.mCurDistance = 0;
			} else if(lX > this.mMaxLength - this.mSlider.get_width() / 2) {
				this.mCurDistance = this.mTotalDistance;
			} else {
				this.mCurDistance = lX - this.mSlider.get_width() / 2;
			}
			this.mSlider.set_x(this.mCurDistance + this.mSlider.get_width() / 2);
		} else {
			if(lY < this.mSlider.get_height() / 2) {
				this.mCurDistance = 0;
			} else if(lY > this.mMaxLength - this.mSlider.get_height() / 2) {
				this.mCurDistance = this.mTotalDistance;
			} else {
				this.mCurDistance = lY - this.mSlider.get_height() / 2;
			}
			this.mSlider.set_y(this.mCurDistance + this.mSlider.get_height() / 2);
		}
		if(this.mMouseMoveFunction != null) {
			this.mMouseMoveFunction(this.get_curValue());
		}
	}
	,onMouseOut: function(e) {
		if(this.mDisabled) {
			return;
		}
		this.onMouseUp(e,0,0,0);
	}
	,onMouseUp: function(e,_x,_y,_id) {
		if(this.mDisabled) {
			return;
		}
		this.mDragging = false;
	}
	,onMouseMove: function() {
		if(this.mDisabled) {
			return;
		}
		if(this.mDragging) {
			var lGlobalPoint = this.mMainGraphics.localToGlobal(new openfl_geom_Point(this.mClickableArea.get_x(),this.mClickableArea.get_y()));
			var lX = (old_systems_uI_UISlider.stageX - lGlobalPoint.x) * 0.6;
			var lY = old_systems_uI_UISlider.stageY - lGlobalPoint.y;
			if(!this.mDirectionVertical) {
				if(lX < this.mSlider.get_width() / 2) {
					this.mCurDistance = 0;
				} else if(lX > this.mMaxLength - this.mSlider.get_width() / 2) {
					this.mCurDistance = this.mTotalDistance;
				} else {
					this.mCurDistance = lX - this.mSlider.get_width() / 2;
				}
				this.mSlider.set_x(this.mCurDistance + this.mSlider.get_width() / 2);
			} else {
				if(lY < this.mSlider.get_height() / 2) {
					this.mCurDistance = 0;
				} else if(lY > this.mMaxLength - this.mSlider.get_height() / 2) {
					this.mCurDistance = this.mTotalDistance;
				} else {
					this.mCurDistance = lY - this.mSlider.get_height() / 2;
				}
				this.mSlider.set_y(this.mCurDistance + this.mSlider.get_height() / 2);
			}
			if(this.mMouseMoveFunction != null) {
				this.mMouseMoveFunction(this.get_curValue());
			}
		}
	}
	,updateDimensions: function() {
		if(!this.mDirectionVertical) {
			this.mTotalDistance = this.mMaxLength - this.mSlider.get_width();
			this.mLine.set_width(this.mMaxLength + 5);
			this.mClickableArea.set_width(this.mMaxLength + 5);
			this.mClickableArea.set_height(this.mSlider.get_height());
		} else {
			this.mTotalDistance = this.mMaxLength - this.mSlider.get_height();
			this.mLine.set_height(this.mMaxLength - this.mSlider.get_height());
			this.mClickableArea.set_width(this.mSlider.get_width());
			this.mClickableArea.set_height(this.mMaxLength);
		}
		this.mCurDistance = 0;
		if(this.mMouseMoveFunction != null) {
			this.mMouseMoveFunction(this.get_curValue());
		}
		if(this.mOrigin < 0) {
			this.mMainGraphics.set_x(this.mX);
		} else if(this.mOrigin == 0) {
			this.mMainGraphics.set_x(this.mX - this.mMainGraphics.get_width() / 2);
		} else if(this.mOrigin > 0) {
			this.mMainGraphics.set_x(this.mX - this.mMainGraphics.get_width());
		}
	}
	,get_mainGraphics: function() {
		return this.mMainGraphics;
	}
	,get_origin: function() {
		return this.mOrigin;
	}
	,set_origin: function(value) {
		this.mOrigin = value;
		this.updateDimensions();
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		this.mX = value;
		this.updateDimensions();
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		this.mY = value;
		this.mMainGraphics.set_y(this.mY);
		return value;
	}
	,get_maxLength: function() {
		return this.mMaxLength;
	}
	,set_maxLength: function(value) {
		this.mMaxLength = value;
		this.updateDimensions();
		return value;
	}
	,get_width: function() {
		if(!this.mDirectionVertical) {
			return this.mMaxLength | 0;
		} else {
			return this.mMainGraphics.get_width() | 0;
		}
	}
	,get_height: function() {
		if(!this.mDirectionVertical) {
			return this.mMainGraphics.get_height() | 0;
		} else {
			return this.mMaxLength | 0;
		}
	}
	,get_minValue: function() {
		return this.mMinValue;
	}
	,set_minValue: function(value) {
		this.mMinValue = value;
		this.mTotalValue = this.mMaxValue - this.mMinValue;
		return value;
	}
	,get_maxValue: function() {
		return this.mMaxValue;
	}
	,set_maxValue: function(value) {
		this.mMaxValue = value;
		this.mTotalValue = this.mMaxValue - this.mMinValue;
		return value;
	}
	,get_curValue: function() {
		return this.mCurDistance / this.mTotalDistance * this.mTotalValue + this.mMinValue;
	}
	,set_curValue: function(value) {
		this.mCurDistance = (value - this.mMinValue) / this.mTotalValue * this.mTotalDistance;
		if(!this.mDirectionVertical) {
			this.mSlider.set_x(this.mCurDistance + this.mSlider.get_width() / 2);
		} else {
			this.mSlider.set_y(this.mCurDistance + this.mSlider.get_height() / 2);
		}
		this.mMouseMoveFunction(value);
		return value;
	}
	,get_directionVertical: function() {
		return this.mDirectionVertical;
	}
	,set_directionVertical: function(value) {
		this.mDirectionVertical = value;
		this.updateDimensions();
		return value;
	}
	,get_slider: function() {
		return this.mSlider;
	}
	,set_slider: function(value) {
		this.mSlider.set_x(this.mSlider.get_width() / 2);
		this.mSlider.set_y(this.mSlider.get_height() / 2);
		this.updateDimensions();
		return value;
	}
	,__class__: old_systems_uI_UISlider
	,__properties__: {set_slider:"set_slider",get_slider:"get_slider",set_directionVertical:"set_directionVertical",get_directionVertical:"get_directionVertical",set_curValue:"set_curValue",get_curValue:"get_curValue",set_maxValue:"set_maxValue",get_maxValue:"get_maxValue",set_minValue:"set_minValue",get_minValue:"get_minValue",get_height:"get_height",get_width:"get_width",set_maxLength:"set_maxLength",get_maxLength:"get_maxLength",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_origin:"set_origin",get_origin:"get_origin",get_mainGraphics:"get_mainGraphics"}
};
var old_systems_uI_UISystem = function(graphicsContainer,gameSystem) {
	this.mGoingBack = false;
	this.signalIsfChangeScreen = new hxsignal_impl_Signal1();
	this.newGameState = false;
	this.mNextScreen = null;
	this.mCurScreen = null;
	this.mScreens = null;
	this.mScreenContainer = null;
	this.mTransitionTween = null;
	this.mTransitionShape = null;
	this.mShowWeather = true;
	this.mTitleTweener = null;
	this.mBlurFilter = null;
	this.mWeatherNear = null;
	this.mWeatherFar = null;
	this.mBackground = null;
	this.mTitle = null;
	this.mBackgroundContainer = null;
	this.mMainGraphics = null;
	this.mNextState = 0;
	this.mState = 0;
	this.mNewState = -1;
	this.mGameSystem = null;
	old_systems_System.call(this);
	old_singleton_LocalStorage.get_instance().init();
	this.mGameSystem = gameSystem;
	this.mMainGraphics = graphicsContainer;
	this.mBlurFilter = new openfl_filters_BlurFilter(5,5,2);
	this.mBackgroundContainer = old_MainOld.getInstance().builder.createSprite();
	this.mBackground = old_MainOld.getInstance().builder.createSprite();
	this.mBackgroundContainer.addChild(this.mBackground);
	this.mTitle = old_MainOld.getInstance().builder.createSprite();
	this.mTitle.set_x(50);
	this.mTitle.set_y(10);
	this.mBackground.addChild(this.mTitle);
	this.mTitleTweener = new old_helper_Tweener(this.mTitle,$bind(this,this.onTitleTweener));
	this.mTitleTweener.addTween("Show","alpha",0,1,0.2,22);
	this.mTitleTweener.addTween("Hide","alpha",1,0,0.2,21);
	this.mScreens = [];
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens.push(null);
	this.mScreens[0] = new old_systems_uI_screens_MainMenuScreen(this,null,this.mGameSystem);
	this.mScreens[0].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[1] = new old_systems_uI_screens_OptionsScreen(this,null,this.mGameSystem);
	this.mScreens[1].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[2] = new old_systems_uI_screens_InstructionsScreen(this,null);
	this.mScreens[2].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[3] = new old_systems_uI_screens_CreditsScreen(this,null);
	this.mScreens[3].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[4] = new old_systems_uI_screens_MapScreen(this,null,this.mGameSystem);
	this.mScreens[4].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[5] = new old_systems_uI_screens_GameScreen(this,null,this.mGameSystem);
	this.mScreens[5].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[7] = new old_systems_uI_screens_LevelCompletedScreen(this,null,this.mGameSystem);
	this.mScreens[7].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[8] = new old_systems_uI_screens_LevelFailedScreen(this,null,this.mGameSystem);
	this.mScreens[8].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[9] = new old_systems_uI_screens_GIPConfirmationScreen(this,null,this.mGameSystem);
	this.mScreens[9].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[10] = new old_systems_uI_screens_SurvivorsScreen(this,null,this.mGameSystem);
	this.mScreens[10].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[6] = new old_systems_uI_screens_ResScreen(this,null,this.mGameSystem);
	this.mScreens[6].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreens[11] = new old_systems_uI_screens_GameCompletedScreen(this,null,this.mGameSystem);
	this.mScreens[11].mTransitionSignal.connect($bind(this,this.onTransitionEnded));
	this.mScreenContainer = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mScreenContainer);
	var _g = 0;
	var _g1 = this.mScreens.length;
	while(_g < _g1) {
		var i = _g++;
		if(this.mScreens[i] != null) {
			this.addChildSystem(this.mScreens[i]);
			this.mScreenContainer.addChild(this.mScreens[i].get_mainGraphics());
			this.mScreens[i].pause();
			this.mScreenContainer.removeChild(this.mScreens[i].get_mainGraphics());
		}
	}
	this.mMainGraphics.addChild(this.mBackgroundContainer);
	this.mMainGraphics.addChild(this.mScreenContainer);
	this.mState = 0;
	this.mCurScreen = this.mScreens[this.mState];
	this.mScreenContainer.addChild(this.mCurScreen.get_mainGraphics());
	this.mCurScreen.resume();
	this.mCurScreen.show(-1);
	if(this.mState == 5) {
		this.mBackground.set_visible(false);
	}
	this.mTransitionShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mTransitionShape.set_scaleX(this.mTransitionShape.set_scaleY(1000));
	this.mMainGraphics.addChild(this.mTransitionShape);
	this.mTransitionTween = new old_helper_Tweener(this.mTransitionShape,null);
	this.mTransitionTween.addTween("FadeIn","alpha",0,1,0.2);
	this.mTransitionTween.addTween("FadeOut","alpha",1,0,0.2);
	this.addEventListener(old_events_UIEvent.SWAP_TO,$bind(this,this.onSwapTo));
	this.addEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
	this.showWeather(old_singleton_LocalStorage.get_instance().get_weather());
	this.mTransitionShape.set_visible(false);
};
$hxClasses["old.systems.uI.UISystem"] = old_systems_uI_UISystem;
old_systems_uI_UISystem.__name__ = "old.systems.uI.UISystem";
old_systems_uI_UISystem.__super__ = old_systems_System;
old_systems_uI_UISystem.prototype = $extend(old_systems_System.prototype,{
	mGameSystem: null
	,get_NewState: function() {
		return this.mNewState;
	}
	,mNewState: null
	,mState: null
	,mNextState: null
	,mMainGraphics: null
	,mBackgroundContainer: null
	,mTitle: null
	,mBackground: null
	,mWeatherFar: null
	,mWeatherNear: null
	,mBlurFilter: null
	,mTitleTweener: null
	,mShowWeather: null
	,mTransitionShape: null
	,mTransitionTween: null
	,mScreenContainer: null
	,mScreens: null
	,mCurScreen: null
	,mNextScreen: null
	,newGameState: null
	,signalIsfChangeScreen: null
	,gameScreen: function() {
		if(this.mScreens.length >= 5) {
			return js_Boot.__cast(this.mScreens[5] , old_systems_uI_screens_GameScreen);
		} else {
			return null;
		}
	}
	,get_curScreen: function() {
		return this.mCurScreen;
	}
	,mGoingBack: null
	,showWeather: function(show) {
	}
	,onTitleTweener: function(tweenSet) {
		var tmp = tweenSet == "Hide";
	}
	,swapTo: function(state) {
		haxe_Log.trace("swapTo " + state,{ fileName : "src/old/systems/uI/UISystem.hx", lineNumber : 256, className : "old.systems.uI.UISystem", methodName : "swapTo"});
		haxe_Log.trace("mState " + this.mState,{ fileName : "src/old/systems/uI/UISystem.hx", lineNumber : 257, className : "old.systems.uI.UISystem", methodName : "swapTo"});
		haxe_Log.trace("newGameState " + Std.string(this.newGameState),{ fileName : "src/old/systems/uI/UISystem.hx", lineNumber : 258, className : "old.systems.uI.UISystem", methodName : "swapTo"});
		if(state < 0) {
			this.mNewState = 0;
		} else if((state == 5 || this.mState == 5) && !this.newGameState) {
			this.mNewState = state;
			this.signalIsfChangeScreen.emit(state);
			this.newGameState = true;
		} else {
			if(state >= 0) {
				this.mNextState = state;
				this.mGoingBack = false;
			} else {
				this.mNextState = this.mCurScreen.get_backState();
				this.mGoingBack = true;
			}
			if(this.mState == 5 && this.mNextState != 5) {
				this.mBackgroundContainer.addChild(this.mBackground);
			}
			if(this.mNextState == 0) {
				this.mTitleTweener.start("Show");
			} else if(this.mState == 0) {
				this.mTitleTweener.start("Hide");
			}
			this.mNextScreen = this.mScreens[this.mNextState];
			this.mCurScreen.hide(this.mNextState);
		}
	}
	,onTransitionEnded: function(phase,scr) {
		haxe_Log.trace("onTransitionEnded " + scr.get_nameScr() + ", phase " + phase,{ fileName : "src/old/systems/uI/UISystem.hx", lineNumber : 291, className : "old.systems.uI.UISystem", methodName : "onTransitionEnded"});
		if(phase == 0) {
			this.mCurScreen.pause();
			this.mScreenContainer.removeChild(this.mCurScreen.get_mainGraphics());
			this.mScreenContainer.addChild(this.mNextScreen.get_mainGraphics());
			this.mNextScreen.show(this.mState);
			this.mNextScreen.resume();
			if(!this.mGoingBack) {
				this.mNextScreen.set_backState(this.mState);
			}
			this.mCurScreen = this.mNextScreen;
			this.mState = this.mNextState;
		} else {
			if(this.mState == 5) {
				this.mBackgroundContainer.removeChild(this.mBackground);
			}
			scr.ready();
		}
	}
	,onSwapTo: function(e) {
		this.swapTo(e.nextState);
	}
	,update: function(dt) {
		this.mTransitionTween.update(dt);
		this.mTitleTweener.update(dt);
	}
	,onKeyDown: function(e) {
		if(e.get_keyCode() == 83 || e.get_keyCode() == 77) {
			old_singleton_LocalStorage.get_instance().set_sound(!old_singleton_LocalStorage.get_instance().get_sound());
			old_singleton_SoundPlayer.get_instance().soundOn(old_singleton_LocalStorage.get_instance().get_sound());
		}
		if(e.get_keyCode() == 27) {
			if(this.mState == 0 && this.mGameSystem.get_gameInProgress() && this.mScreens[0].get_isReady()) {
				this.swapTo(5);
			} else if(this.mState == 5 && this.mScreens[5].get_isReady()) {
				this.swapTo(0);
			}
		}
	}
	,destroy: function() {
		this.removeEventListener(old_events_UIEvent.SWAP_TO,$bind(this,this.onSwapTo));
		this.removeEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
	}
	,__class__: old_systems_uI_UISystem
	,__properties__: $extend(old_systems_System.prototype.__properties__,{get_curScreen:"get_curScreen",get_NewState:"get_NewState"})
});
var old_systems_uI_popups_PromotionPopup = function(popupHiddenFunction) {
	this.popupHideCallback = null;
	this.mContentTweenScaleY = null;
	this.mContentTweenScaleX = null;
	this.mContentTweenY = null;
	this.mContentTweenX = null;
	this.mSearchIcon = null;
	this.mBottomLabel = null;
	this.mSubtitleLabel = null;
	this.mTitleLabel = null;
	this.mCloseBtn = null;
	this.mGoogleBtn = null;
	this.mAppleBtn = null;
	this.popupHideCallback = popupHiddenFunction;
	old_systems_uI_UIPopup2.call(this,"MenuBack",0,0,-1,-1,null);
	this.mBackground.gotoFrame(9);
	this.mBackground.stop();
	var lX1 = 320;
	var lX2 = 0;
	var lY1 = 320;
	var lY2 = 0;
	this.mContent.set_x(320);
	this.mContent.set_y(320);
	this.mContentTweenX = new old_helper_Tweener(this.mContent);
	this.mContentTweenX.addTween("Show","x",lX1,lX2,0.5,22);
	this.mContentTweenX.addTween("Hide","x",lX2,lX1,0.6,21);
	this.mContentTweenY = new old_helper_Tweener(this.mContent);
	this.mContentTweenY.addTween("Show","y",lY1,lY2,0.5,22);
	this.mContentTweenY.addTween("Hide","y",lY2,lY1,0.6,21);
	this.mContentTweenScaleX = new old_helper_Tweener(this.mContent);
	this.mContentTweenScaleX.addTween("Show","scaleX",0,1,0.5,22);
	this.mContentTweenScaleX.addTween("Hide","scaleX",1,0,0.6,21);
	this.mContentTweenScaleY = new old_helper_Tweener(this.mContent);
	this.mContentTweenScaleY.addTween("Show","scaleY",0,1,0.5,22);
	this.mContentTweenScaleY.addTween("Hide","scaleY",1,0,0.6,21);
	this.mAppleBtn = new old_systems_uI_UIButton("PromotionApple"," ",159,260,-1,260,211,$bind(this,this.onApple));
	this.mAppleBtn.get_mainGraphics().set_scaleX(this.mAppleBtn.get_mainGraphics().set_scaleY(0.75));
	this.mContent.addChild(this.mAppleBtn.get_mainGraphics());
	this.mGoogleBtn = new old_systems_uI_UIButton("PromotionGoogle"," ",484,260,-1,260,211,$bind(this,this.onGoogle));
	this.mGoogleBtn.get_mainGraphics().set_scaleX(this.mGoogleBtn.get_mainGraphics().set_scaleY(0.75));
	this.mContent.addChild(this.mGoogleBtn.get_mainGraphics());
	this.mCloseBtn = new old_systems_uI_UIButton("UIDefaultButton","X",605,55,0,30,30,$bind(this,this.onClose));
	this.mCloseBtn.get_label().set_font("Berlin Sans FB Demi Bold");
	this.mContent.addChild(this.mCloseBtn.get_mainGraphics());
	this.mTitleLabel = new old_systems_uI_UILabel("Get Dead Zed on your mobile",320,60,"Berlin Sans FB Demi Bold",24,10880512,false,false,"center",0,500);
	this.mContent.addChild(this.mTitleLabel.get_mainGraphics());
	this.mSubtitleLabel = new old_systems_uI_UILabel("40 New Locations, All New Weapons and More!\nThe biggest and best Dead Zed yet",320,95,"Berlin Sans FB Demi Bold",18,3750201,false,false,"center",0,500);
	this.mContent.addChild(this.mSubtitleLabel.get_mainGraphics());
	this.mBottomLabel = new old_systems_uI_UILabel("Search <font color=\"" + "#A60600" + "\">Dead Zed</font> on the App Store or Google Play",320,390,"Berlin Sans FB Demi Bold",20,3750201,false,false,"center",0,500);
	this.mContent.addChild(this.mBottomLabel.get_mainGraphics());
	this.mSearchIcon = old_MainOld.getInstance().builder.createAnimation("SearchIcon");
	this.mSearchIcon.set_x(this.mBottomLabel.get_x() - this.mBottomLabel.get_maxWidth() * 0.25 + 10);
	this.mSearchIcon.set_y(this.mBottomLabel.get_y() + 12);
	this.mContent.addChild(this.mSearchIcon);
};
$hxClasses["old.systems.uI.popups.PromotionPopup"] = old_systems_uI_popups_PromotionPopup;
old_systems_uI_popups_PromotionPopup.__name__ = "old.systems.uI.popups.PromotionPopup";
old_systems_uI_popups_PromotionPopup.__super__ = old_systems_uI_UIPopup2;
old_systems_uI_popups_PromotionPopup.prototype = $extend(old_systems_uI_UIPopup2.prototype,{
	mAppleBtn: null
	,mGoogleBtn: null
	,mCloseBtn: null
	,mTitleLabel: null
	,mSubtitleLabel: null
	,mBottomLabel: null
	,mSearchIcon: null
	,mContentTweenX: null
	,mContentTweenY: null
	,mContentTweenScaleX: null
	,mContentTweenScaleY: null
	,popupHideCallback: null
	,show: function() {
		this.mContentTweenX.start("Show");
		this.mContentTweenY.start("Show");
		this.mContentTweenScaleX.start("Show");
		this.mContentTweenScaleY.start("Show");
		this.mShadowTween.start("Show");
		this.mContentTween.start("Show");
		this.mBitmap.set_visible(true);
		this.mMainGraphics.set_visible(true);
	}
	,hide: function() {
		this.mBitmap.set_visible(true);
		this.mReady = false;
		this.mShadowTween.start("Hide");
		this.mContentTween.start("Hide");
		this.mContentTweenX.start("Hide");
		this.mContentTweenY.start("Hide");
		this.mContentTweenScaleX.start("Hide");
		this.mContentTweenScaleY.start("Hide");
	}
	,update: function(dt) {
		this.mShadowTween.update(dt);
		this.mContentTweenX.update(dt);
		this.mContentTweenY.update(dt);
		this.mContentTweenScaleX.update(dt);
		this.mContentTweenScaleY.update(dt);
		this.mContentTween.update(dt);
	}
	,onApple: function(state,button) {
		this.mButtonClicked = "Apple";
		openfl_Lib.getURL(new openfl_net_URLRequest("https://itunes.apple.com/app/id1354745865?at=10l4Lj&ct=dzhtml5"),"_blank");
	}
	,onGoogle: function(state,button) {
		this.mButtonClicked = "Google";
		openfl_Lib.getURL(new openfl_net_URLRequest("https://play.google.com/store/apps/details?id=com.notdoppler.deadzed&referrer=utm_source%3Ddzhtml5%26utm_campaign%3Ddzhtml5"),"_blank");
	}
	,onClose: function(state,button) {
		this.mButtonClicked = "Close";
		if(this.popupHideCallback != null) {
			this.popupHideCallback(this.mButtonClicked);
		}
		this.hide();
	}
	,__class__: old_systems_uI_popups_PromotionPopup
});
var old_systems_uI_popups_PromotionPromptPopup = function(popupHiddenFunction) {
	this.popupHideCallback = null;
	this.mSubtitleLabel = null;
	this.mTitleLabel = null;
	this.mOkBtn = null;
	this.mGetItBtn = null;
	this.popupHideCallback = popupHiddenFunction;
	old_systems_uI_UIPopup2.call(this,"MenuBack",0,0,-1,-1,null);
	this.mBackground.gotoFrame(10);
	this.mBackground.stop();
	var lX1 = 320;
	var lX2 = 0;
	var lY1 = 240;
	var lY2 = 0;
	this.mContent.touchable = true;
	this.mContentTween.addTween("Show","x",lX1,lX2,0.3,22);
	this.mContentTween.addTween("Hide","x",lX2,lX1,0.6,21);
	this.mContentTween.addTween("Show","y",lY1,lY2,0.3,22);
	this.mContentTween.addTween("Hide","y",lY2,lY1,0.6,21);
	this.mContentTween.addTween("Show","scaleX",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleX",1,0.1,0.6,21);
	this.mContentTween.addTween("Show","scaleY",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleY",1,0.1,0.6,21);
	this.mGetItBtn = new old_systems_uI_UIButton(null,"Get It Now",320,247,0,200,45,$bind(this,this.onGetIt));
	this.mGetItBtn.get_label().set_font("Berlin Sans FB Demi Bold");
	this.mGetItBtn.get_label().set_fontColor(10880512);
	this.mGetItBtn.get_label().set_fontSize(24);
	this.mGetItBtn.set_labelSizeOffsetY(-3);
	this.mContent.addChild(this.mGetItBtn.get_mainGraphics());
	this.mOkBtn = new old_systems_uI_UIButton(null,"Close",320,305,0,100,35,$bind(this,this.onOk));
	this.mOkBtn.get_label().set_font("Berlin Sans FB Demi Bold");
	this.mContent.addChild(this.mOkBtn.get_mainGraphics());
	this.mTitleLabel = new old_systems_uI_UILabel("Want even more Dead Zed action?",320,150,"Berlin Sans FB Demi Bold",24,10880512,false,false,"center",0,400);
	this.mContent.addChild(this.mTitleLabel.get_mainGraphics());
	this.mSubtitleLabel = new old_systems_uI_UILabel("Check out the mobile version, with\n40 locations, new weapons and more!",320,185,"Berlin Sans FB Demi Bold",18,3750201,false,false,"center",0,400);
	this.mContent.addChild(this.mSubtitleLabel.get_mainGraphics());
	this.mBackground.set_y(25);
};
$hxClasses["old.systems.uI.popups.PromotionPromptPopup"] = old_systems_uI_popups_PromotionPromptPopup;
old_systems_uI_popups_PromotionPromptPopup.__name__ = "old.systems.uI.popups.PromotionPromptPopup";
old_systems_uI_popups_PromotionPromptPopup.__super__ = old_systems_uI_UIPopup2;
old_systems_uI_popups_PromotionPromptPopup.prototype = $extend(old_systems_uI_UIPopup2.prototype,{
	mGetItBtn: null
	,mOkBtn: null
	,mTitleLabel: null
	,mSubtitleLabel: null
	,popupHideCallback: null
	,onGetIt: function(state,button) {
		this.mButtonClicked = "GetIt";
		if(this.popupHideCallback != null) {
			this.popupHideCallback(this.mButtonClicked);
		}
	}
	,onOk: function(state,button) {
		this.mButtonClicked = "Ok";
		if(this.popupHideCallback != null) {
			this.popupHideCallback(this.mButtonClicked);
		}
		this.hide();
	}
	,__class__: old_systems_uI_popups_PromotionPromptPopup
});
var old_systems_uI_popups_SearchPartyResultsPopup = function(popupHiddenFunction,player) {
	this.lFontColorSearching = "#000066";
	this.lFontColorRepairing = "#006600";
	this.lFontColorFighting = "#660000";
	this.mCasualtiesLabelList = null;
	this.mCasualtiesList = null;
	this.mCasualtiesContainer = null;
	this.mWeaponImage = null;
	this.mWeaponsList = null;
	this.mWeaponsContainer = null;
	this.mSurvivorsLabelList = null;
	this.mSurvivorsList = null;
	this.mSurvivorsContainer = null;
	this.mCasualtiesEmptyLabel = null;
	this.mWeaponsEmptyLabel = null;
	this.mSurvivorsEmptyLabel = null;
	this.mCasualtiesLabel = null;
	this.mWeaponsLabel = null;
	this.mSurvivorsLabel = null;
	this.mOkBtn = null;
	this.mTitleLabel = null;
	this.mPlayer = null;
	old_systems_uI_UIPopup2.call(this);
	old_systems_uI_UIPopup2.call(this,"MenuBack",0,0,-1,-1,popupHiddenFunction);
	this.mBackground.gotoFrame(5);
	this.mBackground.stop();
	this.mPlayer = player;
	var lX1 = 320;
	var lX2 = 0;
	var lY1 = 240;
	var lY2 = 0;
	this.mContentTween.addTween("Show","x",lX1,lX2,0.3,22);
	this.mContentTween.addTween("Hide","x",lX2,lX1,0.6,21);
	this.mContentTween.addTween("Show","y",lY1,lY2,0.3,22);
	this.mContentTween.addTween("Hide","y",lY2,lY1,0.6,21);
	this.mContentTween.addTween("Show","scaleX",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleX",1,0.1,0.6,21);
	this.mContentTween.addTween("Show","scaleY",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleY",1,0.1,0.6,21);
	this.mTitleLabel = new old_systems_uI_UILabel("Search party is back...",320,80,"Ampersand",24,3750201,true,false,"center",0,300);
	this.mContent.addChild(this.mTitleLabel.get_mainGraphics());
	this.mSurvivorsLabel = new old_systems_uI_UILabel("Survivors found:",320,118,"Ampersand",18,3750201,true);
	this.mContent.addChild(this.mSurvivorsLabel.get_mainGraphics());
	this.mWeaponsLabel = new old_systems_uI_UILabel("Weapons found",320,193,"Ampersand",18,3750201,true);
	this.mContent.addChild(this.mWeaponsLabel.get_mainGraphics());
	this.mCasualtiesLabel = new old_systems_uI_UILabel("Casualties",320,0,"Ampersand",18,3750201,true);
	this.mContent.addChild(this.mCasualtiesLabel.get_mainGraphics());
	this.mSurvivorsEmptyLabel = new old_systems_uI_UILabel("No survivors found",320,138,"Ampersand",18,6689041,true);
	this.mContent.addChild(this.mSurvivorsEmptyLabel.get_mainGraphics());
	this.mWeaponsEmptyLabel = new old_systems_uI_UILabel("No weapons found",320,213,"Ampersand",18,6689041,true);
	this.mContent.addChild(this.mWeaponsEmptyLabel.get_mainGraphics());
	this.mCasualtiesEmptyLabel = new old_systems_uI_UILabel("No casualties",320,0,"Ampersand",18,6689041,true);
	this.mContent.addChild(this.mCasualtiesEmptyLabel.get_mainGraphics());
	this.mSurvivorsContainer = old_MainOld.getInstance().builder.createSprite();
	this.mContent.addChild(this.mSurvivorsContainer);
	this.mWeaponsContainer = old_MainOld.getInstance().builder.createSprite();
	this.mContent.addChild(this.mWeaponsContainer);
	this.mCasualtiesContainer = old_MainOld.getInstance().builder.createSprite();
	this.mContent.addChild(this.mCasualtiesContainer);
	this.createLayout();
	this.mOkBtn = new old_systems_uI_UIButton(null,"Ok",320,370,0,130,30,$bind(this,this.onOk));
	this.mContent.addChild(this.mOkBtn.get_mainGraphics());
};
$hxClasses["old.systems.uI.popups.SearchPartyResultsPopup"] = old_systems_uI_popups_SearchPartyResultsPopup;
old_systems_uI_popups_SearchPartyResultsPopup.__name__ = "old.systems.uI.popups.SearchPartyResultsPopup";
old_systems_uI_popups_SearchPartyResultsPopup.__super__ = old_systems_uI_UIPopup2;
old_systems_uI_popups_SearchPartyResultsPopup.prototype = $extend(old_systems_uI_UIPopup2.prototype,{
	mPlayer: null
	,mTitleLabel: null
	,mOkBtn: null
	,mSurvivorsLabel: null
	,mWeaponsLabel: null
	,mCasualtiesLabel: null
	,mSurvivorsEmptyLabel: null
	,mWeaponsEmptyLabel: null
	,mCasualtiesEmptyLabel: null
	,mSurvivorsContainer: null
	,mSurvivorsList: null
	,mSurvivorsLabelList: null
	,mWeaponsContainer: null
	,mWeaponsList: null
	,mWeaponImage: null
	,mCasualtiesContainer: null
	,mCasualtiesList: null
	,mCasualtiesLabelList: null
	,lFontColorFighting: null
	,lFontColorRepairing: null
	,lFontColorSearching: null
	,createLayout: function() {
		this.mSurvivorsList = [];
		this.mSurvivorsLabelList = [];
		this.mSurvivorsContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsContainer.set_x(220);
		this.mSurvivorsContainer.set_y(143);
		this.mContent.addChild(this.mSurvivorsContainer);
		this.mWeaponsList = [];
		this.mWeaponsContainer = old_MainOld.getInstance().builder.createSprite();
		this.mWeaponsContainer.set_x(320);
		this.mWeaponsContainer.set_y(223);
		this.mContent.addChild(this.mWeaponsContainer);
		this.mCasualtiesList = [];
		this.mCasualtiesLabelList = [];
		this.mCasualtiesContainer = old_MainOld.getInstance().builder.createSprite();
		this.mCasualtiesContainer.set_x(320);
		this.mCasualtiesContainer.set_y(308);
		this.mContent.addChild(this.mCasualtiesContainer);
		this.mSurvivorsEmptyLabel.set_visible(false);
		var lSurvivorGraphic = null;
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var lSurvivor = null;
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			lSurvivor = new old_entities_survivors_Survivor();
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,null,$bind(this,this.onSurvivorOver),true,false,true);
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i * 40);
			lSurvivorGraphic.container.set_y(0);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			lSurvivorGraphic.get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorGraphic.get_frameContent().stop();
			this.mSurvivorsContainer.addChild(lSurvivorGraphic.container);
			this.mSurvivorsList.push(lSurvivorGraphic);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i * 40 - 9,27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mSurvivorsContainer.addChild(lSurvivorLabel.get_mainGraphics());
			this.mSurvivorsLabelList.push(lSurvivorLabel);
		}
		this.mWeaponsEmptyLabel.set_visible(false);
		var lWeaponLabel = null;
		lWeaponLabel = new old_systems_uI_UILabel("",0,40,"Ampersand",18,6689041,true);
		this.mWeaponsContainer.addChild(lWeaponLabel.get_mainGraphics());
		this.mWeaponsList.push(lWeaponLabel);
		lWeaponLabel = new old_systems_uI_UILabel("",0,60,"Ampersand",18,6689041,true);
		this.mWeaponsContainer.addChild(lWeaponLabel.get_mainGraphics());
		this.mWeaponsList.push(lWeaponLabel);
		lWeaponLabel = new old_systems_uI_UILabel("",0,80,"Ampersand",18,6689041,true);
		this.mWeaponsContainer.addChild(lWeaponLabel.get_mainGraphics());
		this.mWeaponsList.push(lWeaponLabel);
		this.mCasualtiesEmptyLabel.set_visible(false);
		var lCasualtiesButton = null;
		lSurvivor = null;
		var lCasualtiesLabel = null;
		var _g1 = 0;
		while(_g1 < 5) {
			var i1 = _g1++;
			lSurvivor = new old_entities_survivors_Survivor();
			lCasualtiesButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,null,$bind(this,this.onSurvivorOver),true,false,true);
			lCasualtiesButton.set_data(lSurvivor);
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i1 * 40);
			lSurvivorGraphic.container.set_y(0);
			lSurvivorGraphic.set_btn(lCasualtiesButton);
			lSurvivorGraphic.get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorGraphic.get_frameContent().stop();
			this.mCasualtiesContainer.addChild(lSurvivorGraphic.container);
			this.mCasualtiesList.push(lSurvivorGraphic);
			lCasualtiesLabel = new old_systems_uI_UILabel(lCasualtiesButton.get_descriptionIdle(),i1 * 40 - 9,27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mCasualtiesContainer.addChild(lCasualtiesLabel.get_mainGraphics());
			this.mCasualtiesLabelList.push(lCasualtiesLabel);
		}
	}
	,updateButtons: function() {
		var lLength = 0;
		var lLength2 = 0;
		var lSearchResults = this.mPlayer.get_map().get_searchResults();
		var lCasualties = this.mPlayer.get_map().get_survivorsLost();
		var lAdditionalSurvivors = this.mPlayer.get_map().get_additionalSurvivors();
		if(lSearchResults != null) {
			this.mTitleLabel.set_text("Search party is back!");
			this.mSurvivorsLabel.set_visible(true);
			this.mWeaponsLabel.set_visible(true);
			this.mCasualtiesLabel.set_text("Casualties");
			this.mCasualtiesLabel.set_y(288);
			this.mCasualtiesEmptyLabel.set_y(308);
			this.mCasualtiesContainer.set_y(313);
		} else if(lCasualties != null) {
			this.mTitleLabel.set_text("Search party\nnever came back...");
			this.mSurvivorsLabel.set_visible(false);
			this.mWeaponsLabel.set_visible(false);
			this.mCasualtiesLabel.set_text("Casualties");
			this.mCasualtiesLabel.set_y(200);
			this.mCasualtiesEmptyLabel.set_y(225);
			this.mCasualtiesContainer.set_y(225);
		} else if(lAdditionalSurvivors != null) {
			this.mTitleLabel.set_text("Some survivors stumbled\nupon your location...");
			this.mSurvivorsLabel.set_visible(false);
			this.mWeaponsLabel.set_visible(false);
			this.mCasualtiesLabel.set_text("Survivors:");
			this.mCasualtiesLabel.set_y(200);
			this.mCasualtiesEmptyLabel.set_y(225);
			this.mCasualtiesContainer.set_y(225);
		}
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var lSurvivor = null;
		lLength = this.mSurvivorsList.length;
		this.mSurvivorsEmptyLabel.set_visible(false);
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivorButton = this.mSurvivorsList[i].get_btn();
			this.mSurvivorsList[i].disable(0);
			this.mSurvivorsList[i].get_frameContent().gotoFrame(1);
			this.mSurvivorsList[i].get_frameContent().stop();
			lSurvivorLabel = this.mSurvivorsLabelList[i];
			lSurvivorLabel.set_visible(false);
		}
		if(lSearchResults != null) {
			var lSurvivorsFound;
			try {
				lSurvivorsFound = js_Boot.__cast(lSearchResults[0] , Array);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				lSurvivorsFound = null;
			}
			lLength2 = lSurvivorsFound.length;
			if(lLength2 > 0) {
				this.mSurvivorsContainer.set_x(320 - ((lLength2 - 1) * 40 - 5) / 2);
				this.mSurvivorsEmptyLabel.set_visible(false);
				var _g2 = 0;
				var _g3 = lLength2;
				while(_g2 < _g3) {
					var i1 = _g2++;
					lSurvivorButton = this.mSurvivorsList[i1].get_btn();
					try {
						lSurvivor = js_Boot.__cast(lSurvivorButton.get_data() , old_entities_survivors_Survivor);
					} catch( e2 ) {
						haxe_CallStack.lastException = e2;
						var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
						lSurvivor = null;
					}
					var tmp;
					try {
						tmp = js_Boot.__cast(lSurvivorsFound[i1] , old_entities_survivors_Survivor);
					} catch( e4 ) {
						haxe_CallStack.lastException = e4;
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
						tmp = null;
					}
					old_entities_survivors_SurvivorDescription.defineASurvivor(tmp.get_id(),lSurvivor);
					this.mSurvivorsList[i1].enable(1);
					this.mSurvivorsList[i1].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
					this.mSurvivorsList[i1].get_frameContent().stop();
					lSurvivorLabel = this.mSurvivorsLabelList[i1];
					lSurvivorLabel.set_visible(true);
					lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
				}
			} else {
				this.mSurvivorsEmptyLabel.set_visible(true);
			}
		}
		var lWeaponLabel = null;
		var lWeaponId = 0;
		lLength = this.mWeaponsList.length;
		this.mWeaponsEmptyLabel.set_visible(false);
		var _g21 = 0;
		var _g31 = lLength;
		while(_g21 < _g31) {
			var i2 = _g21++;
			lWeaponLabel = this.mWeaponsList[i2];
			lWeaponLabel.set_visible(false);
			lWeaponLabel.set_text("");
		}
		if(this.mWeaponImage != null && this.mWeaponImage.get_parent() != null) {
			this.mWeaponsContainer.removeChild(this.mWeaponImage);
		}
		if(lSearchResults != null) {
			var lWeapons;
			try {
				lWeapons = js_Boot.__cast(lSearchResults[1] , Array);
			} catch( e6 ) {
				haxe_CallStack.lastException = e6;
				var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
				lWeapons = null;
			}
			lLength2 = lWeapons.length;
			if(lLength2 > 0) {
				this.mWeaponsEmptyLabel.set_visible(false);
				lWeaponId = lWeapons[0];
				this.mWeaponImage = old_MainOld.getInstance().builder.createAnimation(old_entities_equipment_ItemDescription.getInventoryGraphics(lWeaponId));
				this.mWeaponImage.gotoFrame(2);
				this.mWeaponImage.stop();
				this.mWeaponsContainer.addChild(this.mWeaponImage);
				this.mWeaponImage.set_x(-60);
				this.mWeaponImage.set_y(0);
				var _g4 = 0;
				var _g5 = lLength2;
				while(_g4 < _g5) {
					var i3 = _g4++;
					lWeaponLabel = this.mWeaponsList[i3];
					lWeaponLabel.set_visible(true);
					lWeaponId = lWeapons[i3];
					if(lWeaponId == 0) {
						lWeaponLabel.set_text("AK74");
					} else if(lWeaponId == 1) {
						lWeaponLabel.set_text("M4");
					} else if(lWeaponId == 2) {
						lWeaponLabel.set_text("Scar H");
					} else if(lWeaponId == 3) {
						lWeaponLabel.set_text("PKM");
					} else if(lWeaponId == 4) {
						lWeaponLabel.set_text("M9");
					} else if(lWeaponId == 5) {
						lWeaponLabel.set_text("Ingram");
					} else if(lWeaponId == 6) {
						lWeaponLabel.set_text("M79");
					} else if(lWeaponId == 7) {
						lWeaponLabel.set_text("MP5");
					} else if(lWeaponId == 8) {
						lWeaponLabel.set_text("Springfield");
					} else if(lWeaponId == 9) {
						lWeaponLabel.set_text("Remington");
					}
				}
			} else {
				this.mWeaponsEmptyLabel.set_visible(true);
			}
		}
		var lCasualtiesButton = null;
		var lCasualtiesLabel = null;
		lSurvivor = null;
		lLength = this.mCasualtiesList.length;
		this.mCasualtiesEmptyLabel.set_visible(false);
		var _g41 = 0;
		var _g51 = lLength;
		while(_g41 < _g51) {
			var i4 = _g41++;
			lCasualtiesButton = this.mCasualtiesList[i4].get_btn();
			this.mCasualtiesList[i4].disable(0);
			this.mCasualtiesList[i4].get_frameContent().gotoFrame(1);
			this.mCasualtiesList[i4].get_frameContent().stop();
			lCasualtiesLabel = this.mCasualtiesLabelList[i4];
			lCasualtiesLabel.set_visible(false);
		}
		if(lCasualties != null) {
			lLength2 = lCasualties.length;
			this.mCasualtiesContainer.set_x(320 - ((lLength2 - 1) * 40 - 5) / 2);
			this.mCasualtiesEmptyLabel.set_visible(false);
			var _g6 = 0;
			var _g7 = lLength2;
			while(_g6 < _g7) {
				var i5 = _g6++;
				lCasualtiesButton = this.mCasualtiesList[i5].get_btn();
				try {
					lSurvivor = js_Boot.__cast(lCasualtiesButton.get_data() , old_entities_survivors_Survivor);
				} catch( e8 ) {
					haxe_CallStack.lastException = e8;
					var e9 = ((e8) instanceof js__$Boot_HaxeError) ? e8.val : e8;
					lSurvivor = null;
				}
				var tmp1;
				try {
					tmp1 = js_Boot.__cast(lCasualties[i5] , old_entities_survivors_Survivor);
				} catch( e10 ) {
					haxe_CallStack.lastException = e10;
					var e11 = ((e10) instanceof js__$Boot_HaxeError) ? e10.val : e10;
					tmp1 = null;
				}
				old_entities_survivors_SurvivorDescription.defineASurvivor(tmp1.get_id(),lSurvivor);
				this.mCasualtiesList[i5].enable(1);
				this.mCasualtiesList[i5].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
				this.mCasualtiesList[i5].get_frameContent().stop();
				this.mCasualtiesList[i5].cross.set_visible(true);
				lCasualtiesLabel = this.mCasualtiesLabelList[i5];
				lCasualtiesLabel.set_visible(true);
				lCasualtiesLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
			}
		} else {
			this.mCasualtiesEmptyLabel.set_visible(true);
		}
		if(lAdditionalSurvivors != null) {
			lLength2 = lAdditionalSurvivors.length;
			this.mCasualtiesContainer.set_x(320 - ((lLength2 - 1) * 40 - 5) / 2);
			this.mCasualtiesEmptyLabel.set_visible(false);
			var _g61 = 0;
			var _g71 = lLength2;
			while(_g61 < _g71) {
				var i6 = _g61++;
				lCasualtiesButton = this.mCasualtiesList[i6].get_btn();
				try {
					lSurvivor = js_Boot.__cast(lCasualtiesButton.get_data() , old_entities_survivors_Survivor);
				} catch( e12 ) {
					haxe_CallStack.lastException = e12;
					var e13 = ((e12) instanceof js__$Boot_HaxeError) ? e12.val : e12;
					lSurvivor = null;
				}
				var tmp2;
				try {
					tmp2 = js_Boot.__cast(lAdditionalSurvivors[i6] , old_entities_survivors_Survivor);
				} catch( e14 ) {
					haxe_CallStack.lastException = e14;
					var e15 = ((e14) instanceof js__$Boot_HaxeError) ? e14.val : e14;
					tmp2 = null;
				}
				old_entities_survivors_SurvivorDescription.defineASurvivor(tmp2.get_id(),lSurvivor);
				this.mCasualtiesList[i6].enable(1);
				this.mCasualtiesList[i6].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
				this.mCasualtiesList[i6].get_frameContent().stop();
				this.mCasualtiesList[i6].cross.set_visible(false);
				lCasualtiesLabel = this.mCasualtiesLabelList[i6];
				lCasualtiesLabel.set_visible(true);
				lCasualtiesLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
			}
		}
	}
	,beforeShow: function() {
		this.updateButtons();
		this.mPlayer.get_map().set_searchResults(null);
		this.mPlayer.get_map().set_survivorsLost(null);
		this.mPlayer.get_map().set_additionalSurvivors(null);
	}
	,onOk: function(state,button) {
		AdManager.showAd();
		this.mButtonClicked = "Ok";
		this.hide();
	}
	,onSurvivorOver: function(state,button) {
	}
	,onSurvivorSelected: function(state,button) {
	}
	,__class__: old_systems_uI_popups_SearchPartyResultsPopup
});
var old_systems_uI_popups_SurvivorsPopup = function(popupHiddenFunction,player) {
	this.lFontColorSearching = "#000066";
	this.lFontColorRepairing = "#006600";
	this.lFontColorFighting = "#660000";
	this.mSelectedButton = null;
	this.mSelectedFrom = -1;
	this.mAssignToSearching = null;
	this.mAssignToRepairing = null;
	this.mAssignToShooting = null;
	this.mAssignToFree = null;
	this.mSurvivorsSearchingContainer = null;
	this.mSurvivorsSearchingArrayLabels = null;
	this.mSurvivorsSearchingArray = null;
	this.mSurvivorsRepairingContainer = null;
	this.mSurvivorsRepairingArrayLabels = null;
	this.mSurvivorsRepairingArray = null;
	this.mSurvivorsShootingContainer = null;
	this.mSurvivorsShootingArrayLabels = null;
	this.mSurvivorsShootingArray = null;
	this.mSurvivorsFreeContainer = null;
	this.mSurvivorsFreeArrayLabels = null;
	this.mSurvivorsFreeArray = null;
	this.mSearchingHintLabel = null;
	this.mRepairingHintLabel = null;
	this.mShootingHintLabel = null;
	this.mFreeHintLabel = null;
	this.mSurvivorsSearchingLabel = null;
	this.mSurvivorsRepairingLabel = null;
	this.mSurvivorsShootingLabel = null;
	this.mSurvivorsFreeLabel = null;
	this.mOkBtn = null;
	this.mTitleLabel = null;
	this.mPlayer = null;
	old_systems_uI_UIPopup2.call(this,"MenuBack",0,0,-1,-1,popupHiddenFunction);
	this.mBackground.gotoFrame(6);
	this.mBackground.stop();
	this.mPlayer = player;
	var lX1 = 100;
	var lX2 = 0;
	var lY1 = 70;
	var lY2 = 0;
	this.mContentTween.addTween("Show","x",lX1,lX2,0.3,22);
	this.mContentTween.addTween("Hide","x",lX2,lX1,0.3,11);
	this.mContentTween.addTween("Show","y",lY1,lY2,0.3,22);
	this.mContentTween.addTween("Hide","y",lY2,lY1,0.3,11);
	this.mContentTween.addTween("Show","scaleX",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleX",1,0.1,0.3,11);
	this.mContentTween.addTween("Show","scaleY",0.1,1,0.3,22);
	this.mContentTween.addTween("Hide","scaleY",1,0.1,0.3,11);
	var lShadowFilter = new openfl_filters_DropShadowFilter(0,0,0,1,6,6,1,2);
	this.mTitleLabel = new old_systems_uI_UILabel("Survivors",320,20,"Ampersand",24,3750201,true);
	this.mContent.addChild(this.mTitleLabel.get_mainGraphics());
	this.createLayout();
	this.mOkBtn = new old_systems_uI_UIButton(null,"Ok",320,425,0,130,30,$bind(this,this.onOk));
	this.mContent.addChild(this.mOkBtn.get_mainGraphics());
};
$hxClasses["old.systems.uI.popups.SurvivorsPopup"] = old_systems_uI_popups_SurvivorsPopup;
old_systems_uI_popups_SurvivorsPopup.__name__ = "old.systems.uI.popups.SurvivorsPopup";
old_systems_uI_popups_SurvivorsPopup.__super__ = old_systems_uI_UIPopup2;
old_systems_uI_popups_SurvivorsPopup.prototype = $extend(old_systems_uI_UIPopup2.prototype,{
	mPlayer: null
	,mTitleLabel: null
	,mOkBtn: null
	,mSurvivorsFreeLabel: null
	,mSurvivorsShootingLabel: null
	,mSurvivorsRepairingLabel: null
	,mSurvivorsSearchingLabel: null
	,mFreeHintLabel: null
	,mShootingHintLabel: null
	,mRepairingHintLabel: null
	,mSearchingHintLabel: null
	,mSurvivorsFreeArray: null
	,mSurvivorsFreeArrayLabels: null
	,mSurvivorsFreeContainer: null
	,mSurvivorsShootingArray: null
	,mSurvivorsShootingArrayLabels: null
	,mSurvivorsShootingContainer: null
	,mSurvivorsRepairingArray: null
	,mSurvivorsRepairingArrayLabels: null
	,mSurvivorsRepairingContainer: null
	,mSurvivorsSearchingArray: null
	,mSurvivorsSearchingArrayLabels: null
	,mSurvivorsSearchingContainer: null
	,mAssignToFree: null
	,mAssignToShooting: null
	,mAssignToRepairing: null
	,mAssignToSearching: null
	,mSelectedFrom: null
	,mSelectedButton: null
	,lFontColorFighting: null
	,lFontColorRepairing: null
	,lFontColorSearching: null
	,createLayout: function() {
		this.mSurvivorsFreeLabel = new old_systems_uI_UILabel("Unassigned",120,63,"Ampersand",18,3750201,true);
		this.mContent.addChild(this.mSurvivorsFreeLabel.get_mainGraphics());
		this.mSurvivorsShootingLabel = new old_systems_uI_UILabel("Shooting",120,173,"Ampersand",18,3750201,true);
		this.mContent.addChild(this.mSurvivorsShootingLabel.get_mainGraphics());
		this.mSurvivorsRepairingLabel = new old_systems_uI_UILabel("Repairing",120,253,"Ampersand",18,3750201,true);
		this.mContent.addChild(this.mSurvivorsRepairingLabel.get_mainGraphics());
		this.mSurvivorsSearchingLabel = new old_systems_uI_UILabel("Search party",120,333,"Ampersand",18,3750201,true);
		this.mContent.addChild(this.mSurvivorsSearchingLabel.get_mainGraphics());
		this.mAssignToFree = new old_systems_uI_UIButton(null,"",this.mSurvivorsFreeLabel.get_x(),60,0,120,90,$bind(this,this.onAssignToGroup));
		this.mAssignToFree.set_id(0);
		this.mContent.addChild(this.mAssignToFree.get_mainGraphics());
		this.mAssignToShooting = new old_systems_uI_UIButton(null,"",this.mSurvivorsShootingLabel.get_x(),170,0,120,60,$bind(this,this.onAssignToGroup));
		this.mAssignToShooting.set_id(1);
		this.mContent.addChild(this.mAssignToShooting.get_mainGraphics());
		this.mAssignToRepairing = new old_systems_uI_UIButton(null,"",this.mSurvivorsRepairingLabel.get_x(),250,0,120,60,$bind(this,this.onAssignToGroup));
		this.mAssignToRepairing.set_id(2);
		this.mContent.addChild(this.mAssignToRepairing.get_mainGraphics());
		this.mAssignToSearching = new old_systems_uI_UIButton(null,"",this.mSurvivorsSearchingLabel.get_x(),330,0,120,85,$bind(this,this.onAssignToGroup));
		this.mAssignToSearching.set_id(3);
		this.mContent.addChild(this.mAssignToSearching.get_mainGraphics());
		this.mFreeHintLabel = new old_systems_uI_UILabel("",190,98,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mContent.addChild(this.mFreeHintLabel.get_mainGraphics());
		this.mShootingHintLabel = new old_systems_uI_UILabel("",190,213,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mContent.addChild(this.mShootingHintLabel.get_mainGraphics());
		this.mRepairingHintLabel = new old_systems_uI_UILabel("",190,293,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mContent.addChild(this.mRepairingHintLabel.get_mainGraphics());
		this.mSearchingHintLabel = new old_systems_uI_UILabel("",190,373,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mContent.addChild(this.mSearchingHintLabel.get_mainGraphics());
		var lSurvivors = this.mPlayer.get_survivors();
		this.mSurvivorsFreeArray = [];
		this.mSurvivorsFreeArrayLabels = [];
		this.mSurvivorsFreeContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsFreeContainer.set_x(210);
		this.mSurvivorsFreeContainer.set_y(60);
		this.mContent.addChild(this.mSurvivorsFreeContainer);
		this.mSurvivorsShootingArray = [];
		this.mSurvivorsShootingArrayLabels = [];
		this.mSurvivorsShootingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsShootingContainer.set_x(210);
		this.mSurvivorsShootingContainer.set_y(170);
		this.mContent.addChild(this.mSurvivorsShootingContainer);
		this.mSurvivorsRepairingArray = [];
		this.mSurvivorsRepairingArrayLabels = [];
		this.mSurvivorsRepairingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsRepairingContainer.set_x(210);
		this.mSurvivorsRepairingContainer.set_y(250);
		this.mContent.addChild(this.mSurvivorsRepairingContainer);
		this.mSurvivorsSearchingArray = [];
		this.mSurvivorsSearchingArrayLabels = [];
		this.mSurvivorsSearchingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsSearchingContainer.set_x(210);
		this.mSurvivorsSearchingContainer.set_y(330);
		this.mContent.addChild(this.mSurvivorsSearchingContainer);
		var lSurvivorGraphic = null;
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var j = -1;
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			if(i % 10 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i);
			lSurvivorButton.set_name("free");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i % 10 * 40);
			lSurvivorGraphic.container.set_y(j * 49);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsFreeArray.push(lSurvivorGraphic);
			this.mSurvivorsFreeContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i % 10 * 40 - 4,j * 49 + 27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mSurvivorsFreeArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsFreeContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g1 = 0;
		while(_g1 < 7) {
			var i1 = _g1++;
			if(i1 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i1);
			lSurvivorButton.set_name("shooting");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i1 % 10 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsShootingArray.push(lSurvivorGraphic);
			this.mSurvivorsShootingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i1 % 8 * 40 - 4,j * 35 + 27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mSurvivorsShootingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsShootingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g2 = 0;
		while(_g2 < 7) {
			var i2 = _g2++;
			if(i2 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i2);
			lSurvivorButton.set_name("repairing");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i2 % 10 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsRepairingArray.push(lSurvivorGraphic);
			this.mSurvivorsRepairingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i2 % 8 * 40 - 4,j * 35 + 27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mSurvivorsRepairingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsRepairingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g3 = 0;
		while(_g3 < 7) {
			var i3 = _g3++;
			if(i3 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i3);
			lSurvivorButton.set_name("searching");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i3 % 10 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsSearchingArray.push(lSurvivorGraphic);
			this.mSurvivorsSearchingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i3 % 8 * 40 - 4,j * 35 + 27,"Ampersand",13,3750201,false,false,"center",0,32);
			this.mSurvivorsSearchingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsSearchingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
	}
	,beforeShow: function() {
		this.mSelectedButton = null;
		this.mSelectedFrom = -1;
		this.updateButtons();
	}
	,onOk: function(state,button) {
		this.mPlayer.get_survivors().save();
		this.mButtonClicked = "Ok";
		this.hide();
		AdManager.showAd();
	}
	,onSurvivorOver: function(state,button) {
	}
	,onSurvivorSelected: function(state,button) {
		if(state) {
			var tmp;
			try {
				tmp = js_Boot.__cast(button.get_data() , old_entities_survivors_Survivor);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				tmp = null;
			}
			this.mSelectedFrom = tmp.get_category();
			if(this.mSelectedButton != null) {
				this.mSelectedButton.toggle(false);
			}
			this.mSelectedButton = button;
		} else {
			this.mSelectedButton = null;
			this.mSelectedFrom = -1;
		}
		this.updateButtons();
	}
	,onAssignToGroup: function(state,button) {
		var lSurvivors = this.mPlayer.get_survivors();
		var lSurvivor = null;
		if(this.mSelectedButton.get_data() == null) {
			return;
		}
		try {
			lSurvivor = js_Boot.__cast(this.mSelectedButton.get_data() , old_entities_survivors_Survivor);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			lSurvivor = null;
		}
		lSurvivors.changeCategory(lSurvivor,lSurvivor.get_category(),button.get_id());
		this.mSelectedButton.toggle(false);
		this.mSelectedButton = null;
		this.mSelectedFrom = -1;
		this.updateButtons();
	}
	,updateButtons: function() {
		var lSurvivor = null;
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var lLength = 0;
		var lLength2 = 0;
		var lSurvivors = this.mPlayer.get_survivors();
		lLength = this.mSurvivorsFreeArray.length;
		var lLength21;
		try {
			lLength21 = js_Boot.__cast(lSurvivors.getCategory(0) , Array);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			lLength21 = null;
		}
		lLength2 = lLength21.length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivorButton = this.mSurvivorsFreeArray[i].get_btn();
			this.mSurvivorsFreeArray[i].disable(0);
			this.mSurvivorsFreeArray[i].get_frameContent().gotoFrame(1);
			lSurvivorLabel = this.mSurvivorsFreeArrayLabels[i];
			lSurvivorLabel.set_visible(false);
		}
		var _g2 = 0;
		var _g3 = lLength2;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lSurvivor = lSurvivors.getSurvivor(i1,0);
			lSurvivorButton = this.mSurvivorsFreeArray[i1].get_btn();
			this.mSurvivorsFreeArray[i1].enable(1);
			this.mSurvivorsFreeArray[i1].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsFreeArrayLabels[i1];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsShootingArray.length;
		var lLength22;
		try {
			lLength22 = js_Boot.__cast(lSurvivors.getCategory(1) , Array);
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			lLength22 = null;
		}
		lLength2 = lLength22.length;
		var _g4 = 0;
		var _g5 = lLength;
		while(_g4 < _g5) {
			var i2 = _g4++;
			lSurvivorButton = this.mSurvivorsShootingArray[i2].get_btn();
			this.mSurvivorsShootingArray[i2].disable(0);
			this.mSurvivorsShootingArray[i2].get_frameContent().gotoFrame(1);
			lSurvivorLabel = this.mSurvivorsShootingArrayLabels[i2];
			lSurvivorLabel.set_visible(false);
		}
		var _g6 = 0;
		var _g7 = lLength2;
		while(_g6 < _g7) {
			var i3 = _g6++;
			lSurvivor = lSurvivors.getSurvivor(i3,1);
			lSurvivorButton = this.mSurvivorsShootingArray[i3].get_btn();
			this.mSurvivorsShootingArray[i3].enable(1);
			this.mSurvivorsShootingArray[i3].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsShootingArrayLabels[i3];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsRepairingArray.length;
		var lLength23;
		try {
			lLength23 = js_Boot.__cast(lSurvivors.getCategory(2) , Array);
		} catch( e4 ) {
			haxe_CallStack.lastException = e4;
			var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
			lLength23 = null;
		}
		lLength2 = lLength23.length;
		var _g8 = 0;
		var _g9 = lLength;
		while(_g8 < _g9) {
			var i4 = _g8++;
			lSurvivorButton = this.mSurvivorsRepairingArray[i4].get_btn();
			this.mSurvivorsRepairingArray[i4].disable(0);
			this.mSurvivorsRepairingArray[i4].get_frameContent().gotoFrame(1);
			lSurvivorLabel = this.mSurvivorsRepairingArrayLabels[i4];
			lSurvivorLabel.set_visible(false);
		}
		var _g10 = 0;
		var _g11 = lLength2;
		while(_g10 < _g11) {
			var i5 = _g10++;
			lSurvivor = lSurvivors.getSurvivor(i5,2);
			lSurvivorButton = this.mSurvivorsRepairingArray[i5].get_btn();
			this.mSurvivorsRepairingArray[i5].enable(1);
			this.mSurvivorsRepairingArray[i5].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsRepairingArrayLabels[i5];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsSearchingArray.length;
		var lLength24;
		try {
			lLength24 = js_Boot.__cast(lSurvivors.getCategory(3) , Array);
		} catch( e6 ) {
			haxe_CallStack.lastException = e6;
			var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
			lLength24 = null;
		}
		lLength2 = lLength24.length;
		var _g12 = 0;
		var _g13 = lLength;
		while(_g12 < _g13) {
			var i6 = _g12++;
			lSurvivorButton = this.mSurvivorsSearchingArray[i6].get_btn();
			this.mSurvivorsSearchingArray[i6].disable(0);
			this.mSurvivorsSearchingArray[i6].get_frameContent().gotoFrame(1);
			lSurvivorLabel = this.mSurvivorsSearchingArrayLabels[i6];
			lSurvivorLabel.set_visible(false);
		}
		var _g14 = 0;
		var _g15 = lLength2;
		while(_g14 < _g15) {
			var i7 = _g14++;
			lSurvivor = lSurvivors.getSurvivor(i7,3);
			lSurvivorButton = this.mSurvivorsSearchingArray[i7].get_btn();
			this.mSurvivorsSearchingArray[i7].enable(1);
			this.mSurvivorsSearchingArray[i7].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsSearchingArrayLabels[i7];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		this.mAssignToFree.enable(1);
		this.mAssignToShooting.enable(1);
		this.mAssignToRepairing.enable(1);
		this.mAssignToSearching.enable(1);
		if(this.mSelectedFrom == 0) {
			this.mAssignToFree.disable(0.25);
		} else if(this.mSelectedFrom == 1) {
			this.mAssignToShooting.disable(0.25);
		} else if(this.mSelectedFrom == 2) {
			this.mAssignToRepairing.disable(0.25);
		} else if(this.mSelectedFrom == 3) {
			this.mAssignToSearching.disable(0.25);
		} else if(this.mSelectedFrom == -1) {
			this.mAssignToFree.disable(0.25);
			this.mAssignToShooting.disable(0.25);
			this.mAssignToRepairing.disable(0.25);
			this.mAssignToSearching.disable(0.25);
		}
		if(lSurvivors.isLimitReached(1)) {
			this.mAssignToShooting.disable(0.25);
		}
		if(lSurvivors.isLimitReached(2)) {
			this.mAssignToRepairing.disable(0.25);
		}
		if(lSurvivors.isLimitReached(3)) {
			this.mAssignToSearching.disable(0.25);
		}
	}
	,__class__: old_systems_uI_popups_SurvivorsPopup
});
var old_systems_uI_popups_Tutorial2Popup = function(popupHiddenFunction) {
	this.mContinueBtn = null;
	old_systems_uI_UIPopup.call(this,null,0,0,300,200,popupHiddenFunction);
	this.mShadow.set_visible(false);
	this.mContentTween.removeTween("Show","alpha");
	this.mContentTween.removeTween("Hide","alpha");
	this.mContentTween.addTween("Show","alpha",0,1,0.3,0);
	this.mContentTween.addTween("Hide","alpha",1,0,0.3,0);
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Continue",320,430,0,140,40,$bind(this,this.onContinue));
	this.mContent.addChild(this.mContinueBtn.get_mainGraphics());
	old_events_EventManager.get_instance().addEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
};
$hxClasses["old.systems.uI.popups.Tutorial2Popup"] = old_systems_uI_popups_Tutorial2Popup;
old_systems_uI_popups_Tutorial2Popup.__name__ = "old.systems.uI.popups.Tutorial2Popup";
old_systems_uI_popups_Tutorial2Popup.__super__ = old_systems_uI_UIPopup;
old_systems_uI_popups_Tutorial2Popup.prototype = $extend(old_systems_uI_UIPopup.prototype,{
	mContinueBtn: null
	,onContinue: function(state,button) {
		this.mButtonClicked = "Ok";
		this.hide();
	}
	,onKeyDown: function(e) {
		if(this.mReady && e.get_keyCode() == 32) {
			this.mButtonClicked = "Ok";
			this.hide();
		}
	}
	,__class__: old_systems_uI_popups_Tutorial2Popup
});
var old_systems_uI_popups_TutorialPopup = function(popupHiddenFunction) {
	this.mLabel = null;
	this.mSkipBtn = null;
	this.mContinueBtn = null;
	old_systems_uI_UIPopup.call(this,"Tutorial1Img",175,55,300,200,popupHiddenFunction);
	this.mBackground.gotoFrame(7);
	this.mBackground.stop();
	this.mShadow.set_visible(false);
	this.mContentTween.removeTween("Show","alpha");
	this.mContentTween.removeTween("Hide","alpha");
	this.mContentTween.addTween("Show","alpha",0,1,0.3,0);
	this.mContentTween.addTween("Hide","alpha",1,0,0.3,0);
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Continue",320,290,0,120,30,$bind(this,this.onContinue));
	this.mContent.addChild(this.mContinueBtn.get_mainGraphics());
	old_events_EventManager.get_instance().addEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
};
$hxClasses["old.systems.uI.popups.TutorialPopup"] = old_systems_uI_popups_TutorialPopup;
old_systems_uI_popups_TutorialPopup.__name__ = "old.systems.uI.popups.TutorialPopup";
old_systems_uI_popups_TutorialPopup.__super__ = old_systems_uI_UIPopup;
old_systems_uI_popups_TutorialPopup.prototype = $extend(old_systems_uI_UIPopup.prototype,{
	mContinueBtn: null
	,mSkipBtn: null
	,mLabel: null
	,onContinue: function(state,button) {
		this.mButtonClicked = "Ok";
		this.hide();
	}
	,onSkip: function(state,button) {
		this.mButtonClicked = "Skip";
		if(this.mPopupHiddenFunction != null) {
			this.mPopupHiddenFunction(this.mButtonClicked);
		}
	}
	,onKeyDown: function(e) {
		if(this.mReady && e.get_keyCode() == 32) {
			this.mButtonClicked = "Ok";
			this.hide();
		}
	}
	,__class__: old_systems_uI_popups_TutorialPopup
});
var old_systems_uI_screens_CreditsScreen = function(uiSystem,transitionCallback) {
	this.mSlideTweener = null;
	this.mBackBtn = null;
	this.mCredits = null;
	this.mLogo = null;
	this.mScreenTitle = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	var lOffsetX = 100;
	var lOffsetY = 45;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Credits",320,lOffsetY + 15,"Ampersand",32,3750201,true);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mLogo = new old_systems_uI_UIButton("UIDefaultLogo","",320,lOffsetY + 45,0,-1,-1,$bind(this,this.onLogo));
	this.mLogo.get_background().set_scaleX(this.mLogo.get_background().set_scaleY(0.75));
	this.mLogo.set_x(320);
	this.mMainGraphics.addChild(this.mLogo.get_mainGraphics());
	this.mCredits = new old_systems_uI_UILabel("",320,lOffsetY + 125,"Ampersand",18,3750201,true);
	this.mCredits.set_text("<font color=\"" + "#661111" + "\">Programming:</font>\nDmitri Kurteanu\n\n<font color=\"" + "#661111" + "\">Graphics:</font>\nEgor Kurteanu\nDmitri Kurteanu\n\n<font color=\"" + "#661111" + "\">Music:</font>\nKevin MacLeod" + "\n\nPorted by IriySoft");
	this.mMainGraphics.addChild(this.mCredits.get_mainGraphics());
	this.mBackBtn = new old_systems_uI_UIButton(null,"Back",320,450,0,160,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
};
$hxClasses["old.systems.uI.screens.CreditsScreen"] = old_systems_uI_screens_CreditsScreen;
old_systems_uI_screens_CreditsScreen.__name__ = "old.systems.uI.screens.CreditsScreen";
old_systems_uI_screens_CreditsScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_CreditsScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mScreenTitle: null
	,mLogo: null
	,mCredits: null
	,mBackBtn: null
	,mSlideTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
			if(ui_StartScr.VersionTxt != null) {
				ui_StartScr.VersionTxt.set_visible(true);
			}
		} else {
			this.afterHide();
			if(ui_StartScr.VersionTxt != null) {
				ui_StartScr.VersionTxt.set_visible(false);
			}
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
	}
	,onLogo: function(state,button) {
		openfl_Lib.getURL(new openfl_net_URLRequest("http://3kggames.com/"),"_blank");
	}
	,onBack: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_CreditsScreen
});
var old_systems_uI_screens_GIPConfirmationScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mSlideTweener = null;
	this.mBackBtn = null;
	this.mRestartBtn = null;
	this.mContinueBtn = null;
	this.mQuestion = null;
	this.mScreenTitle = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	var lShade = new openfl_display_Shape();
	lShade.get_graphics().beginFill(0,0.5);
	lShade.get_graphics().drawRect(0,0,old_Core.SCR_WIDTH,old_Core.SCR_HEIGHT);
	lShade.get_graphics().endFill();
	var lOffsetX = 120;
	var lOffsetY = 95;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Game in progress",320,lOffsetY + 15,"Ampersand",32,3750201,true,false,"center",0,260);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mQuestion = new old_systems_uI_UILabel("If you continue,\nall progress will be lost.\n\nAre you sure?",320,lOffsetY + 55,"Ampersand",18,3750201,true,false,"center",0,260);
	this.mMainGraphics.addChild(this.mQuestion.get_mainGraphics());
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Continue",315,lOffsetY + 195,1,125,30,$bind(this,this.onContinue));
	this.mMainGraphics.addChild(this.mContinueBtn.get_mainGraphics());
	this.mRestartBtn = new old_systems_uI_UIButton(null,"Restart",325,lOffsetY + 195,-1,125,30,$bind(this,this.onRestart));
	this.mMainGraphics.addChild(this.mRestartBtn.get_mainGraphics());
	this.mBackBtn = new old_systems_uI_UIButton(null,"Back",320,390,0,190,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
};
$hxClasses["old.systems.uI.screens.GIPConfirmationScreen"] = old_systems_uI_screens_GIPConfirmationScreen;
old_systems_uI_screens_GIPConfirmationScreen.__name__ = "old.systems.uI.screens.GIPConfirmationScreen";
old_systems_uI_screens_GIPConfirmationScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_GIPConfirmationScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mScreenTitle: null
	,mQuestion: null
	,mContinueBtn: null
	,mRestartBtn: null
	,mBackBtn: null
	,mSlideTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
		if(this.mGameSystem.get_levelNumber() == 0 && this.mGameSystem.get_gameInProgress()) {
			this.mQuestion.set_text("There is a game in progress!\n\nYou can <font color=\"" + "#661111" + "\">continue</font> or <font color=\"" + "#661111" + "\">restart</font> the game!");
		} else {
			this.mQuestion.set_text("You reached\n<font color=\"" + "#661111" + "\">day " + (this.mGameSystem.get_levelNumber() + 1) + "/40</font>\nin your last session!\n\nYou can <font color=\"" + "#661111" + "\">continue</font> from that wave\nor <font color=\"" + "#661111" + "\">restart</font> the game!");
		}
	}
	,onContinue: function(state,button) {
		if(this.mGameSystem.get_gameInProgress()) {
			this.mGameSystem.get_player().load();
		}
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onRestart: function(state,button) {
		this.mGameSystem.get_player().set_difficulty(0);
		this.dispatchEvent(new old_events_GameEvent("GameResetProgress"));
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onBack: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_GIPConfirmationScreen
});
var old_systems_uI_screens_GameCompletedScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mPromotionShowed = false;
	this.mContinueClicked = false;
	this.mPromotionTimer = null;
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mSlideTweener = null;
	this.mContinueBtn = null;
	this.mTotalScoreLabel = null;
	this.mTotalKills = null;
	this.mSurvivorsLost = null;
	this.mSurvivorsAlive = null;
	this.mScreenSubtitle = null;
	this.mTitleLabel = null;
	this.mLifeLabel = null;
	this.mMoneyLabel = null;
	this.mScreenTitle = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	var lOffsetX = 120;
	var lOffsetY = 55;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Congratulations!!!",320,lOffsetY + 15,"Ampersand",32,3750201,true,false,"center",0,360);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mScreenSubtitle = new old_systems_uI_UILabel("The regular army has reached the town. They're clearing what's left of the walkers.\nYou've made it!",320,lOffsetY + 50,"Ampersand",18,3750201,true,false,"center",0,360);
	this.mMainGraphics.addChild(this.mScreenSubtitle.get_mainGraphics());
	this.mSurvivorsAlive = new old_systems_uI_UILabel("Survivors saved: 0",320,lOffsetY + 135,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mSurvivorsAlive.get_mainGraphics());
	this.mTotalKills = new old_systems_uI_UILabel("Walkers neutralized: 0",320,lOffsetY + 155,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mTotalKills.get_mainGraphics());
	this.mSurvivorsLost = new old_systems_uI_UILabel("Survivors lost: 0",320,lOffsetY + 175,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mSurvivorsLost.get_mainGraphics());
	this.mTotalScoreLabel = new old_systems_uI_UILabel("Total Score: 0",320,lOffsetY + 195,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mTotalScoreLabel.get_mainGraphics());
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Main Menu",320,360,0,190,40,$bind(this,this.onContinue));
	this.mMainGraphics.addChild(this.mContinueBtn.get_mainGraphics());
	this.mPromotionPrompt = new old_systems_uI_popups_PromotionPromptPopup($bind(this,this.onPromotionPromptClosed));
	this.mMainGraphics.addChild(this.mPromotionPrompt.get_mainGraphics());
	this.addChildSystem(this.mPromotionPrompt);
	this.mPromotionPopup = new old_systems_uI_popups_PromotionPopup(null);
	this.mMainGraphics.addChild(this.mPromotionPopup.get_mainGraphics());
	this.addChildSystem(this.mPromotionPopup);
	this.mPromotionPopup.get_mainGraphics().set_x(-15);
	this.mPromotionPopup.get_mainGraphics().set_y(-15);
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleX(this.mBlackShape.set_scaleY(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
	this.mPromotionTimer = new openfl_utils_Timer(1500,1);
	this.mPromotionTimer.addEventListener("timerComplete",$bind(this,this.onTimer));
};
$hxClasses["old.systems.uI.screens.GameCompletedScreen"] = old_systems_uI_screens_GameCompletedScreen;
old_systems_uI_screens_GameCompletedScreen.__name__ = "old.systems.uI.screens.GameCompletedScreen";
old_systems_uI_screens_GameCompletedScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_GameCompletedScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mScreenTitle: null
	,mMoneyLabel: null
	,mLifeLabel: null
	,mTitleLabel: null
	,mScreenSubtitle: null
	,mSurvivorsAlive: null
	,mSurvivorsLost: null
	,mTotalKills: null
	,mTotalScoreLabel: null
	,mContinueBtn: null
	,mPromotionPrompt: null
	,mPromotionPopup: null
	,mSlideTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,mPromotionTimer: null
	,mContinueClicked: null
	,mPromotionShowed: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mMainGraphics.set_alpha(1);
		this.mBlackTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mBlackShape.set_visible(false);
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mBlackShape.set_visible(true);
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
		this.mSurvivorsAlive.set_text("Survivors saved: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_survivors().get_allSurvivors().length + "</font>");
		this.mTotalKills.set_text("Walkers neutralized: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_kills() + "</font>");
		this.mSurvivorsLost.set_text("Survivors lost: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_survivors().get_survivorsLost() + "</font>");
		this.mTotalScoreLabel.set_text("Total score: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_score() + "</font>");
		this.mContinueClicked = false;
		this.mPromotionShowed = false;
	}
	,afterReady: function() {
		this.mGameSystem.get_player().save();
		this.mPromotionTimer.start();
	}
	,onTimer: function(e) {
		this.mPromotionPrompt.show();
		this.mPromotionShowed = true;
	}
	,onPromotionPromptClosed: function(v) {
		if(v == "GetIt") {
			this.mPromotionPopup.show();
			this.mPromotionShowed = true;
		} else if(this.mContinueClicked) {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
		}
	}
	,onContinue: function(state,button) {
		this.mContinueClicked = true;
		if(this.mPromotionShowed) {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
		} else {
			this.mPromotionTimer.stop();
			this.mPromotionPrompt.show();
			this.mPromotionShowed = true;
		}
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_GameCompletedScreen
});
var old_systems_uI_screens_GameScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.lWeaponNumber = null;
	this.mTutorialShown = false;
	this.mTutorial2Popup = null;
	this.mTutorialPopup = null;
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mSlideTweener = null;
	this.mSkipTutorialButton = null;
	this.mBrandingPause = null;
	this.mBrandingBtn = null;
	this.mMenuButton = null;
	this.mMuteButton = null;
	this.mLevelNumberLabel = null;
	this.mGameWorldContainer = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mNameScr = old_systems_uI_screens_GameScreen.NAME;
	this.mGameSystem = gameSystem;
	this.mGameWorldContainer = old_singleton_GameWorld.get_instance().get_worldContainer();
	this.mMainGraphics.addChild(this.mGameWorldContainer);
	var lStatsShape0 = old_MainOld.getInstance().builder.createAnimation("UIDefaultShape3");
	lStatsShape0.set_x(10);
	lStatsShape0.set_y(12);
	lStatsShape0.set_width(140);
	lStatsShape0.set_height(40);
	lStatsShape0.set_alpha(0.75);
	this.mMainGraphics.addChild(lStatsShape0);
	this.lWeaponNumber = new old_systems_uI_UILabel("   1                    2",80,33,"Ampersand",10,13421772,true);
	this.mMainGraphics.addChild(this.lWeaponNumber.get_mainGraphics());
	var lStatsShape = old_MainOld.getInstance().builder.createAnimation("UIDefaultShape3");
	lStatsShape.set_x(160);
	lStatsShape.set_y(12);
	lStatsShape.set_width(290);
	lStatsShape.set_height(40);
	lStatsShape.set_alpha(0.75);
	this.mMainGraphics.addChild(lStatsShape);
	var lStatsShape3 = old_MainOld.getInstance().builder.createAnimation("UIDefaultShape3");
	lStatsShape3.set_x(460);
	lStatsShape3.set_y(12);
	lStatsShape3.set_width(170);
	lStatsShape3.set_height(40);
	lStatsShape3.set_alpha(0.75);
	this.mMainGraphics.addChild(lStatsShape3);
	this.mMainGraphics.addChild(this.mGameSystem.get_player().get_moneyLabel().get_mainGraphics());
	this.mMainGraphics.addChild(this.mGameSystem.get_player().get_lifeLabel().get_mainGraphics());
	this.mLevelNumberLabel = new old_systems_uI_UILabel("Wave:",310,21,"Ampersand",18,13421772,true);
	this.mLevelNumberLabel.set_fontSize(18);
	this.mMainGraphics.addChild(this.mLevelNumberLabel.get_mainGraphics());
	this.mMuteButton = new old_systems_uI_UIButton("UIButtonMute","",470,18,-1,-1,-1,$bind(this,this.onMute),null,true);
	this.mMainGraphics.addChild(this.mMuteButton.get_mainGraphics());
	this.mMenuButton = new old_systems_uI_UIButton("UIButtonQuit","",510,18,-1,-1,-1,$bind(this,this.onQuit));
	this.mMainGraphics.addChild(this.mMenuButton.get_mainGraphics());
	this.mBrandingBtn = old_MainOld.getInstance().builder.createAnimation("BrandingLogo");
	this.mBrandingBtn.gotoFrame(5);
	this.mBrandingBtn.stop();
	this.mBrandingPause = old_MainOld.getInstance().builder.createSprite();
	this.mBrandingPause.set_x(540);
	this.mBrandingPause.set_y(12);
	this.mBrandingPause.addChild(this.mBrandingBtn);
	this.mBrandingBtn.touchable = true;
	this.mBrandingPause.touchable = true;
	this.mBrandingBtn.signalTouch.addSlot($bind(this,this.onBranding));
	this.mBrandingBtn.set_visible(false);
	this.mMainGraphics.addChild(this.mBrandingPause);
	this.mSkipTutorialButton = new old_systems_uI_UIButton(null,"Skip Tutorial",320,60,0,-1,40,$bind(this,this.onSkipTutorial),$bind(this,this.onOverSkipTutorial));
	this.mSkipTutorialButton.set_visible(false);
	this.mMainGraphics.addChild(this.mSkipTutorialButton.get_mainGraphics());
	this.mTutorialPopup = new old_systems_uI_popups_TutorialPopup($bind(this,this.onTutorialPopup));
	this.addChildSystem(this.mTutorialPopup);
	this.mMainGraphics.addChild(this.mTutorialPopup.get_mainGraphics());
	this.mTutorial2Popup = new old_systems_uI_popups_Tutorial2Popup($bind(this,this.onTutorial2Popup));
	this.addChildSystem(this.mTutorial2Popup);
	this.mMainGraphics.addChild(this.mTutorial2Popup.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleY(this.mBlackShape.set_scaleX(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_x(-500);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
	this.addEventListener("GameLevelCompleted",$bind(this,this.onLevelCompleted));
	this.addEventListener("GameLevelFailed",$bind(this,this.onLevelFailed));
	this.addEventListener("GameLevelSkipped",$bind(this,this.onLevelSkipped));
	this.addEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
	this.addEventListener(old_events_ConfigEvent.SOUND_TOGGLED,$bind(this,this.onSoundToggled));
};
$hxClasses["old.systems.uI.screens.GameScreen"] = old_systems_uI_screens_GameScreen;
old_systems_uI_screens_GameScreen.__name__ = "old.systems.uI.screens.GameScreen";
old_systems_uI_screens_GameScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_GameScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mGameWorldContainer: null
	,mLevelNumberLabel: null
	,levelNumberLabel: function() {
		return this.mLevelNumberLabel;
	}
	,mMuteButton: null
	,mMenuButton: null
	,mBrandingBtn: null
	,mBrandingPause: null
	,mSkipTutorialButton: null
	,mSlideTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,mTutorialPopup: null
	,mTutorial2Popup: null
	,mTutorialShown: null
	,lWeaponNumber: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		haxe_Log.trace("Gamescr slideIn",{ fileName : "src/old/systems/uI/screens/GameScreen.hx", lineNumber : 178, className : "old.systems.uI.screens.GameScreen", methodName : "slideIn"});
		this.mBlackTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		haxe_Log.trace("Gamescr slideOut",{ fileName : "src/old/systems/uI/screens/GameScreen.hx", lineNumber : 186, className : "old.systems.uI.screens.GameScreen", methodName : "slideOut"});
		this.mTransitionSignal.emit(0,this);
	}
	,onSlideTweener: function(tweenSet) {
		haxe_Log.trace("Gamescr onSlideTweener",{ fileName : "src/old/systems/uI/screens/GameScreen.hx", lineNumber : 196, className : "old.systems.uI.screens.GameScreen", methodName : "onSlideTweener"});
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
		}
	}
	,onSettings: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,1));
	}
	,onMute: function(state,button) {
		if(old_singleton_LocalStorage.get_instance().get_checkboxLogic() && state) {
			old_MainOld.getInstance().context.save_data.data().lastsoundValue = 100;
			old_MainOld.getInstance().context.save_data.data().lastmusicValue = 100;
			old_singleton_LocalStorage.get_instance().set_checkboxLogic(false);
		}
		old_singleton_LocalStorage.get_instance().set_sound(state);
		old_singleton_SoundPlayer.get_instance().soundOn(state);
		old_singleton_LocalStorage.get_instance().flush();
	}
	,onQuit: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,onBranding: function(_,_1,_2,_3) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,beforeShow: function() {
		this.lWeaponNumber.set_fontSize(10);
		this.mLevelNumberLabel.set_fontSize(10);
		this.mLevelNumberLabel.set_fontSize(18);
		this.mLevelNumberLabel.set_text("Day: <font color=\"" + "#ffffff" + "\">" + (this.mGameSystem.get_levelNumber() + 1) + "/40</font>");
		this.mTutorialPopup.mContinueBtn.get_label().set_fontSize(18);
		this.mGameSystem.get_player().get_moneyLabel().set_fontSize(18);
		this.mMainGraphics.addChild(this.mGameSystem.get_player().get_weaponHud());
		this.mGameSystem.get_player().get_weaponHud().set_x(20);
		this.mGameSystem.get_player().get_weaponHud().set_y(18);
		if(old_MainOld.getInstance().context.save_data.data().musicValue == 0 && old_MainOld.getInstance().context.save_data.data().soundValue == 0 && old_singleton_LocalStorage.get_instance().get_sound()) {
			old_singleton_LocalStorage.get_instance().set_sound(false);
			old_singleton_LocalStorage.get_instance().set_checkboxLogic(true);
		} else {
			old_singleton_LocalStorage.get_instance().set_checkboxLogic(false);
		}
		this.mMuteButton.toggle(old_singleton_LocalStorage.get_instance().get_sound(),false);
		this.dispatchEvent(new old_events_GameEvent("GameResume"));
		openfl_ui_Mouse.hide();
		if(this.mGameSystem.get_levelNumber() == 0) {
			this.dispatchEvent(new old_events_GameEvent("GamePause"));
			this.mTutorialPopup.instaShow();
			openfl_ui_Mouse.show();
		}
	}
	,afterHide: function() {
	}
	,afterReady: function() {
	}
	,beforePause: function() {
		openfl_ui_Mouse.show();
		this.dispatchEvent(new old_events_GameEvent("GamePause"));
	}
	,onSoundToggled: function(e) {
		this.mMuteButton.toggle(e.boolValue);
	}
	,onLevelFailed: function(e) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,8));
	}
	,onLevelCompleted: function(e) {
		if(this.mGameSystem.get_player().get_levelNumber() >= 40) {
			this.mGameSystem.set_gameFinished(true);
			old_singleton_LocalStorage.get_instance().set_gameFinished(this.mGameSystem.get_gameFinished());
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,11));
		} else {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
		}
	}
	,onLevelSkipped: function(e) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onSkipTutorial: function(state,button) {
		this.dispatchEvent(new old_events_GameEvent("GameSkipLevel"));
		openfl_ui_Mouse.show();
	}
	,onOverSkipTutorial: function(state,button) {
	}
	,onTutorialPopup: function(button) {
		if(button == null) {
			button = "";
		}
		this.dispatchEvent(new old_events_GameEvent("GameResume"));
		openfl_ui_Mouse.hide();
	}
	,onTutorial2Popup: function(button) {
		if(button == null) {
			button = "";
		}
		this.dispatchEvent(new old_events_GameEvent("GameResume"));
		haxe_Log.trace("mouse_down " + "Mouse.hide()",{ fileName : "src/old/systems/uI/screens/GameScreen.hx", lineNumber : 380, className : "old.systems.uI.screens.GameScreen", methodName : "onTutorial2Popup"});
		openfl_ui_Mouse.hide();
	}
	,onKeyDown: function(e) {
		var tmp = e.get_keyCode() == 77;
		var tmp1 = e.get_keyCode() == 27;
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
		if(this.mBlackTweener.get_running()) {
			this.mGameSystem.get_player().get_weaponHud().set_alpha(1.0 - this.mBlackShape.get_alpha());
		}
		if(this.mGameSystem.get_levelNumber() == 0) {
			if(this.mTutorialPopup.get_mainGraphics().get_visible()) {
				openfl_ui_Mouse.show();
			}
		}
	}
	,destroy: function() {
		this.removeEventListener("GameLevelCompleted",$bind(this,this.onLevelCompleted));
		this.removeEventListener("GameLevelFailed",$bind(this,this.onLevelFailed));
		this.removeEventListener("GameLevelSkipped",$bind(this,this.onLevelSkipped));
		this.removeEventListener("GlobalKeyDown",$bind(this,this.onKeyDown));
		this.removeEventListener(old_events_ConfigEvent.SOUND_TOGGLED,$bind(this,this.onSoundToggled));
	}
	,__class__: old_systems_uI_screens_GameScreen
});
var old_systems_uI_screens_InstructionsScreen = function(uiSystem,transitionCallback) {
	this.mSlideTweener = null;
	this.mBackBtn = null;
	this.mPageArea = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	var lOffsetX = 15;
	var lOffsetY = 10;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mPageArea = new old_systems_uI_UIPageArea(lOffsetX + 10,lOffsetY + 35,-1,590,350,200);
	this.mMainGraphics.addChild(this.mPageArea.get_mainGraphics());
	var lTitle00 = new old_systems_uI_UILabel("Controls",295,15,"Ampersand",24,3750201,true,false,"center",0,520,280);
	this.mPageArea.addContentToPage(0,lTitle00.get_mainGraphics());
	var lLabel00 = new old_systems_uI_UILabel("",295,45,"Ampersand",18,6689041,true,false,"center",0,520,280);
	lLabel00.set_text("Mouse<font color=\"" + "#393939" + "\"> - Aim and shoot</font>\nR<font color=\"" + "#393939" + "\"> - Reload</font>\nF<font color=\"" + "#393939" + "\"> - Change fire mode</font>\n1,2<font color=\"" + "#393939" + "\"> - Change weapons</font>\nM<font color=\"" + "#393939" + "\"> - Mute</font>\nEsc<font color=\"" + "#393939" + "\"> - Menu</font>");
	this.mPageArea.addContentToPage(0,lLabel00.get_mainGraphics());
	var lTitle01 = new old_systems_uI_UILabel("Goal",295,190,"Ampersand",24,3750201,true,false,"center",0,520,280);
	this.mPageArea.addContentToPage(0,lTitle01.get_mainGraphics());
	var lLabel01 = new old_systems_uI_UILabel("",295,220,"Ampersand",18,3750201,true,false,"center",0,520,280);
	lLabel01.set_text("Your goal is to survive for 40 days, destroying waves of walkers to defend your farm. Search the neighbourhood for weapons and survivors to make your survival a little bit easier: the newfound survivors can be assigned to defense or can help with the searching.");
	this.mPageArea.addContentToPage(0,lLabel01.get_mainGraphics());
	this.mBackBtn = new old_systems_uI_UIButton(null,"Back",320,450,0,190,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
};
$hxClasses["old.systems.uI.screens.InstructionsScreen"] = old_systems_uI_screens_InstructionsScreen;
old_systems_uI_screens_InstructionsScreen.__name__ = "old.systems.uI.screens.InstructionsScreen";
old_systems_uI_screens_InstructionsScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_InstructionsScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mPageArea: null
	,mBackBtn: null
	,mSlideTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,onBack: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,beforeShow: function() {
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mPageArea.update(dt);
	}
	,destroy: function() {
	}
	,__class__: old_systems_uI_screens_InstructionsScreen
});
var old_systems_uI_screens_LevelCompletedScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mSlideTweener = null;
	this.mContinueBtn = null;
	this.mAchievementLabel = null;
	this.mTotalScoreLabel = null;
	this.mLevelKillsLabel = null;
	this.mLevelMoneyLabel = null;
	this.mLevelNumberLabel = null;
	this.mTitleLabel = null;
	this.mLifeLabel = null;
	this.mMoneyLabel = null;
	this.mScreenTitle = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	this.mMoneyLabel = new old_systems_uI_UILabel("Money: <font color=\"" + "#661111" + "\">0</font>",195,20,"Ampersand",18,3750201,true,false,"left",-1);
	this.mLifeLabel = new old_systems_uI_UILabel("Life: <font color=\"" + "#661111" + "\">0</font>",445,20,"Ampersand",18,3750201,true,false,"right",1);
	var lOffsetX = 120;
	var lOffsetY = 55;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Day Completed!",320,lOffsetY + 15,"Ampersand",32,3750201,true,false,"center",0,260);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mLevelNumberLabel = new old_systems_uI_UILabel("Day: 0",320,lOffsetY + 55,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mLevelNumberLabel.get_mainGraphics());
	this.mLevelMoneyLabel = new old_systems_uI_UILabel("Time gained: 0",320,lOffsetY + 75,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mLevelMoneyLabel.get_mainGraphics());
	this.mLevelKillsLabel = new old_systems_uI_UILabel("Walkers neutralized: 0",320,lOffsetY + 95,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mLevelKillsLabel.get_mainGraphics());
	this.mTotalScoreLabel = new old_systems_uI_UILabel("Total Score: 0",320,lOffsetY + 115,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mTotalScoreLabel.get_mainGraphics());
	this.mAchievementLabel = new old_systems_uI_UILabel("",320,lOffsetY + 165,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mAchievementLabel.get_mainGraphics());
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Continue",320,360,0,190,40,$bind(this,this.onContinue));
	this.mMainGraphics.addChild(this.mContinueBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleY(this.mBlackShape.set_scaleX(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
};
$hxClasses["old.systems.uI.screens.LevelCompletedScreen"] = old_systems_uI_screens_LevelCompletedScreen;
old_systems_uI_screens_LevelCompletedScreen.__name__ = "old.systems.uI.screens.LevelCompletedScreen";
old_systems_uI_screens_LevelCompletedScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_LevelCompletedScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mScreenTitle: null
	,mMoneyLabel: null
	,mLifeLabel: null
	,mTitleLabel: null
	,mLevelNumberLabel: null
	,mLevelMoneyLabel: null
	,mLevelKillsLabel: null
	,mTotalScoreLabel: null
	,mAchievementLabel: null
	,mContinueBtn: null
	,mSlideTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mMainGraphics.set_alpha(1);
		this.mBlackTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
		if(this.mGameSystem.get_player().get_lastLevelNumber() == 0) {
			this.mLevelNumberLabel.set_text("Day: <font color=\"" + "#661111" + "\">1/40</font>");
			this.mLevelMoneyLabel.set_text("");
			this.mLevelKillsLabel.set_text("");
			this.mTotalScoreLabel.set_text("");
		} else {
			this.mLevelNumberLabel.set_text("Day: <font color=\"" + "#661111" + "\">" + (this.mGameSystem.get_player().get_lastLevelNumber() + 1) + "/40</font>");
			this.mLevelMoneyLabel.set_text("Time gained: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_roundMoney() + "</font>");
			this.mLevelKillsLabel.set_text("Walkers neutralized: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_roundKills() + "</font>");
			this.mTotalScoreLabel.set_text("Total score: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_score() + "</font>");
		}
	}
	,afterReady: function() {
		this.mGameSystem.get_player().save();
	}
	,onContinue: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onMainMenu: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_LevelCompletedScreen
});
var old_systems_uI_screens_LevelFailedScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mSlideTweener = null;
	this.mQuitBtn = null;
	this.mRetryBtn = null;
	this.mFinalScoreLabel = null;
	this.mTotalKillsLabel = null;
	this.mLevelNumberLabel = null;
	this.mTitleLabel = null;
	this.mLifeLabel = null;
	this.mMoneyLabel = null;
	this.mScreenTitle = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	this.mMoneyLabel = new old_systems_uI_UILabel("Money: <font color=\"" + "#661111" + "\">0</font>",195,20,"Ampersand",18,3750201,true,false,"left",-1);
	this.mLifeLabel = new old_systems_uI_UILabel("Life: <font color=\"" + "#661111" + "\">0</font>",445,20,"Ampersand",18,3750201,true,false,"right",1);
	var lOffsetX = 120;
	var lOffsetY = 55;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Day Failed!",320,lOffsetY + 15,"Ampersand",32,3750201,true,false,"center",0,260);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mLevelNumberLabel = new old_systems_uI_UILabel("Day: 0",320,lOffsetY + 55,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mLevelNumberLabel.get_mainGraphics());
	this.mTotalKillsLabel = new old_systems_uI_UILabel("Total kills: 0",320,lOffsetY + 75,"Ampersand",18,3750201,true);
	this.mFinalScoreLabel = new old_systems_uI_UILabel("Final score: 0",320,lOffsetY + 95,"Ampersand",18,3750201,true);
	this.mRetryBtn = new old_systems_uI_UIButton(null,"Retry",320,320,0,190,30,$bind(this,this.onRetry));
	this.mMainGraphics.addChild(this.mRetryBtn.get_mainGraphics());
	this.mQuitBtn = new old_systems_uI_UIButton(null,"Quit",320,360,0,190,30,$bind(this,this.onQuit));
	this.mMainGraphics.addChild(this.mQuitBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleY(this.mBlackShape.set_scaleX(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
};
$hxClasses["old.systems.uI.screens.LevelFailedScreen"] = old_systems_uI_screens_LevelFailedScreen;
old_systems_uI_screens_LevelFailedScreen.__name__ = "old.systems.uI.screens.LevelFailedScreen";
old_systems_uI_screens_LevelFailedScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_LevelFailedScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mScreenTitle: null
	,mMoneyLabel: null
	,mLifeLabel: null
	,mTitleLabel: null
	,mLevelNumberLabel: null
	,mTotalKillsLabel: null
	,mFinalScoreLabel: null
	,mRetryBtn: null
	,mQuitBtn: null
	,mSlideTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mMainGraphics.set_alpha(1);
		this.mBlackTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
		this.mLevelNumberLabel.set_text("Day: <font color=\"" + "#661111" + "\">" + (this.mGameSystem.get_levelNumber() + 1) + "/40</font>");
		this.mTotalKillsLabel.set_text("Total kills: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_kills() + "</font>");
		this.mFinalScoreLabel.set_text("Final score: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_score() + "</font>");
	}
	,onRetry: function(state,button) {
		this.mGameSystem.get_player().load();
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onQuit: function(state,button) {
		this.mGameSystem.get_player().load();
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_LevelFailedScreen
});
var old_systems_uI_screens_MainMenuScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mSlideTweener = null;
	this.mPromotion = null;
	this.mBrandingBtn = null;
	this.mMoreGamesBtn = null;
	this.mCreditsBtn = null;
	this.mInstructionsBtn = null;
	this.mOptionsBtn = null;
	this.mContinueBtn = null;
	this.mNewGameBtn = null;
	this.mContinueBar = null;
	this.mContinueShape = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	var lOffsetX = 190;
	var lOffsetY = 400;
	lOffsetX = 365;
	lOffsetY = 112;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(1);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mContinueBtn = new old_systems_uI_UIButton(null,"Continue",lOffsetX + 10,lOffsetY + 10,0,110,30,$bind(this,this.onContinue));
	this.mMainGraphics.addChild(this.mContinueBtn.get_mainGraphics());
	this.mContinueBtn.disable(0.25);
	this.mNewGameBtn = new old_systems_uI_UIButton(null,"New Game",lOffsetX + 10,lOffsetY + 52,0,110,30,$bind(this,this.onPlay));
	this.mMainGraphics.addChild(this.mNewGameBtn.get_mainGraphics());
	this.mOptionsBtn = new old_systems_uI_UIButton(null,"Options",lOffsetX + 10,lOffsetY + 94,0,110,30,$bind(this,this.onOptions));
	this.mMainGraphics.addChild(this.mOptionsBtn.get_mainGraphics());
	this.mInstructionsBtn = new old_systems_uI_UIButton(null,"Help",lOffsetX + 10,lOffsetY + 136,0,110,30,$bind(this,this.onInstructions));
	this.mMainGraphics.addChild(this.mInstructionsBtn.get_mainGraphics());
	this.mCreditsBtn = new old_systems_uI_UIButton(null,"Credits",lOffsetX + 10,lOffsetY + 178,0,110,30,$bind(this,this.onCredits));
	this.mMainGraphics.addChild(this.mCreditsBtn.get_mainGraphics());
	this.mMoreGamesBtn = new old_systems_uI_UIButton(null,"More Games",lOffsetX + 10,lOffsetY + 220,0,110,35,$bind(this,this.onMoreGames));
	this.mMainGraphics.addChild(this.mMoreGamesBtn.get_mainGraphics());
	this.mMoreGamesBtn.get_mainGraphics().set_visible(false);
	this.mBrandingBtn = old_MainOld.getInstance().builder.createAnimation("BrandingLogo");
	this.mBrandingBtn.gotoFrame(1);
	this.mBrandingBtn.stop();
	this.mBrandingBtn.set_x(470);
	this.mBrandingBtn.set_y(375);
	this.mBrandingBtn.touchable = true;
	this.mBrandingBtn.signalTouch.addSlot(function(_,_1,_2,_3) {
		openfl_Lib.getURL(new openfl_net_URLRequest("http://www.notdoppler.com/?ref=deadzed"),"_blank");
	});
	this.mMainGraphics.addChild(this.mBrandingBtn);
	var slcBtn = 1.25;
	this.mContinueBtn.get_mainGraphics().set_scaleX(this.mContinueBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mNewGameBtn.get_mainGraphics().set_scaleX(this.mNewGameBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mOptionsBtn.get_mainGraphics().set_scaleX(this.mOptionsBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mInstructionsBtn.get_mainGraphics().set_scaleX(this.mInstructionsBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mCreditsBtn.get_mainGraphics().set_scaleX(this.mCreditsBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mMoreGamesBtn.get_mainGraphics().set_scaleX(this.mMoreGamesBtn.get_mainGraphics().set_scaleY(slcBtn));
	this.mPromotion = new old_systems_uI_UIButton("PromotionBanner","",145,510,-1,350,100,$bind(this,this.onPromotion));
	this.mPromotion.get_mainGraphics().set_scaleX(this.mPromotion.get_mainGraphics().set_scaleY(0.8));
	this.mMainGraphics.addChild(this.mPromotion.get_mainGraphics());
	this.mPromotionPopup = new old_systems_uI_popups_PromotionPopup(null);
	this.mMainGraphics.addChild(this.mPromotionPopup.get_mainGraphics());
	this.addChildSystem(this.mPromotionPopup);
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleX(this.mBlackShape.set_scaleY(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
	old_singleton_SoundPlayer.get_instance().music(1);
	old_systems_uI_UIHelpTip.get_instance().init();
};
$hxClasses["old.systems.uI.screens.MainMenuScreen"] = old_systems_uI_screens_MainMenuScreen;
old_systems_uI_screens_MainMenuScreen.__name__ = "old.systems.uI.screens.MainMenuScreen";
old_systems_uI_screens_MainMenuScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_MainMenuScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mContinueShape: null
	,mContinueBar: null
	,mNewGameBtn: null
	,mContinueBtn: null
	,mOptionsBtn: null
	,mInstructionsBtn: null
	,mCreditsBtn: null
	,mMoreGamesBtn: null
	,mBrandingBtn: null
	,mPromotion: null
	,mPromotionPopup: null
	,mSlideTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		if(old_singleton_LocalStorage.ALLOW_STATISTIC == true) {
			old_singleton_LocalStorage.ALLOW_STATISTIC = false;
			
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      console.log('GOOGle Analitics');
      gtag('config', 'UA-174167323-1');
      ;
		}
		if(prevState == 5 || prevState == -1) {
			this.mMainGraphics.set_alpha(1);
			this.mBlackTweener.start("Show");
		} else {
			this.mBlackShape.set_alpha(0);
			this.mSlideTweener.start("Show");
		}
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		if(nextState == 5) {
			this.mMainGraphics.set_alpha(1);
			this.mBlackTweener.start("Hide");
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		} else {
			this.mBlackShape.set_alpha(0);
			this.mSlideTweener.start("Hide");
		}
	}
	,onSlideTweener: function(tweenSet) {
		haxe_Log.trace("Gamescr onSlideTweener",{ fileName : "src/old/systems/uI/screens/MainMenuScreen.hx", lineNumber : 203, className : "old.systems.uI.screens.MainMenuScreen", methodName : "onSlideTweener"});
		if(tweenSet == "Show") {
			this.mBlackShape.set_visible(false);
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mBlackShape.set_visible(true);
			this.mTransitionSignal.emit(0,this);
		}
	}
	,onContinue: function(state,button) {
		if(this.mGameSystem.get_gameInProgress()) {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,5));
		} else {
			AdManager.showAd();
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
		}
	}
	,onPlay: function(state,button) {
		AdManager.showAd();
		if(!this.mGameSystem.get_gameInProgress()) {
			if(this.mGameSystem.get_levelNumber() > 0 && !this.mGameSystem.get_gameFinished()) {
				this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,9));
			} else {
				this.mGameSystem.get_player().set_difficulty(0);
				this.dispatchEvent(new old_events_GameEvent("GameResetProgress"));
				this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
			}
		} else {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,9));
		}
	}
	,onOptions: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,1));
	}
	,onInstructions: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,2));
	}
	,onCredits: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,3));
	}
	,onMoreGames: function(state,button) {
		openfl_Lib.getURL(new openfl_net_URLRequest("http://www.notdoppler.com/?ref=deadzed"),"_blank");
	}
	,onPromotion: function(state,button) {
		this.mPromotionPopup.show();
	}
	,onGE: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,11));
	}
	,beforePause: function() {
	}
	,beforeShow: function() {
		if((this.mGameSystem.get_gameInProgress() || this.mGameSystem.get_levelNumber() > 0) && !this.mGameSystem.get_gameFinished()) {
			this.mContinueBtn.enable(1);
		} else {
			this.mContinueBtn.disable(0.25);
		}
		this.mContinueBtn.get_label().set_fontSize(this.mContinueBtn.get_label().get_fontSize());
		this.mNewGameBtn.get_label().set_fontSize(this.mNewGameBtn.get_label().get_fontSize());
		this.mOptionsBtn.get_label().set_fontSize(this.mOptionsBtn.get_label().get_fontSize());
		this.mInstructionsBtn.get_label().set_fontSize(this.mInstructionsBtn.get_label().get_fontSize());
		this.mCreditsBtn.get_label().set_fontSize(this.mCreditsBtn.get_label().get_fontSize());
		this.mMoreGamesBtn.get_label().set_fontSize(this.mMoreGamesBtn.get_label().get_fontSize());
	}
	,afterResume: function() {
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_MainMenuScreen
});
var old_systems_uI_screens_MapScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mRoundStarted = false;
	this.mPromotionPopup = null;
	this.mPromotionSystem = null;
	this.mTutorialNoTime = false;
	this.mTutorialSearchedOnce = false;
	this.mTutorialNothingFound = false;
	this.mTutorialAnythingFound = false;
	this.mTutorialStarted = false;
	this.mHint = null;
	this.mSearchPartyResultsPopup = null;
	this.mSurvivorsPopup = null;
	this.mBlackTweener = null;
	this.mBlackShape = null;
	this.mNotificationTweener = null;
	this.mMapContentTweener = null;
	this.mSlideTweener = null;
	this.mNotificationButton = null;
	this.mNotificationLabel = null;
	this.mNotificationBack = null;
	this.mNotificationState = 0;
	this.mSearchPartyTarget = null;
	this.mSearchPartyTargetButton = null;
	this.mSwitchAreaDirection = 0;
	this.mNextArea = null;
	this.mPrevArea = null;
	this.mLocationsContainer = null;
	this.mLocationMapList = null;
	this.mLocationButtonsList = null;
	this.mAreaId = 0;
	this.mMapContent = null;
	this.mBrandingBtn = null;
	this.mQuitBtn = null;
	this.mResourcesBtn = null;
	this.mSurvivorsBtn = null;
	this.mPlayBtn = null;
	this.mHoursLabel = null;
	this.mTimeRequirementLabel = null;
	this.mMapLegendLabel = null;
	this.mBarricadeState = null;
	this.mScoreLabel = null;
	this.mLevelNumberLabel = null;
	this.mScreenTitle = null;
	this.mLoadingTimer = null;
	this.mLevelLoaded = false;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mNameScr = old_systems_uI_screens_MapScreen.NAME;
	this.mGameSystem = gameSystem;
	var lOffsetX = 120;
	var lOffsetY = 15;
	this.mMainGraphics.set_x(-lOffsetX / 2);
	this.mMainGraphics.set_y(-lOffsetY / 2);
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(4);
	lBackground.stop();
	this.mMainGraphics.addChild(lBackground);
	lBackground.set_scaleX(lBackground.set_scaleY(0.6));
	this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(2.));
	this.mLevelNumberLabel = new old_systems_uI_UILabel("Days left: <font color=\"" + "#661111" + "\">...</font>",510,45,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mLevelNumberLabel.get_mainGraphics());
	this.mScoreLabel = new old_systems_uI_UILabel("Score: <font color=\"" + "#661111" + "\">0</font>",510,82,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mScoreLabel.get_mainGraphics());
	this.mBarricadeState = new old_systems_uI_UILabel("Barricade state: <font color=\"" + "#661111" + "\">0</font>",510,107,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mBarricadeState.get_mainGraphics());
	this.mMapLegendLabel = new old_systems_uI_UILabel("Select a location to send the search party to...",510,150,"Ampersand",18,3750201,true,false,"center",0,135);
	this.mMainGraphics.addChild(this.mMapLegendLabel.get_mainGraphics());
	this.mTimeRequirementLabel = new old_systems_uI_UILabel("",510,230,"Ampersand",18,3750201,true,false,"center",0,150);
	this.mMainGraphics.addChild(this.mTimeRequirementLabel.get_mainGraphics());
	this.mHoursLabel = new old_systems_uI_UILabel("Hours left: <font color=\"" + "#661111" + "\">0</font>",510,262,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mHoursLabel.get_mainGraphics());
	this.mPlayBtn = new old_systems_uI_UIButton(null,"Next wave",510,315,0,120,36,$bind(this,this.onPlay));
	this.mPlayBtn.get_label().set_fontColor(6689041);
	this.mMainGraphics.addChild(this.mPlayBtn.get_mainGraphics());
	this.mResourcesBtn = new old_systems_uI_UIButton(null,"Resources",513,360,0,125,26,$bind(this,this.onResources));
	this.mMainGraphics.addChild(this.mResourcesBtn.get_mainGraphics());
	this.mSurvivorsBtn = new old_systems_uI_UIButton(null,"Survivors",513,395,0,120,26,$bind(this,this.onSurvivors));
	this.mMainGraphics.addChild(this.mSurvivorsBtn.get_mainGraphics());
	this.mQuitBtn = new old_systems_uI_UIButton(null,"Save and Quit",518,430,0,120,26,$bind(this,this.onQuit));
	this.mMainGraphics.addChild(this.mQuitBtn.get_mainGraphics());
	this.mLocationButtonsList = [];
	this.mLocationMapList = [];
	this.mLocationsContainer = old_MainOld.getInstance().builder.createSprite();
	this.mMapContent = old_MainOld.getInstance().builder.createSprite();
	this.mMainGraphics.addChild(this.mMapContent);
	this.mMapContent.addChild(this.mLocationsContainer);
	this.populateMap();
	this.mSearchPartyTarget = old_MainOld.getInstance().builder.createAnimation("UILocationTarget");
	this.mSearchPartyTarget.set_visible(false);
	this.mMainGraphics.addChild(this.mSearchPartyTarget);
	this.mPrevArea = new old_systems_uI_UIButton("UIDefaultArrowLeft","",50,220,1,90,40,$bind(this,this.onPrevNextArea),$bind(this,this.onOverPrevNextArea));
	this.mPrevArea.set_id(-1);
	this.mNextArea = new old_systems_uI_UIButton("UIDefaultArrowRight","",430,220,1,90,40,$bind(this,this.onPrevNextArea),$bind(this,this.onOverPrevNextArea));
	this.mNextArea.set_id(1);
	this.mBrandingBtn = old_MainOld.getInstance().builder.createAnimation("BrandingLogo");
	this.mBrandingBtn.gotoFrame(2);
	this.mBrandingBtn.stop();
	this.mBrandingBtn.set_x(3);
	this.mBrandingBtn.set_y(3);
	this.mMainGraphics.addChild(this.mBrandingBtn);
	this.mMapContentTweener = new old_helper_Tweener(this.mMapContent,$bind(this,this.onMapContentTweener));
	this.mMapContentTweener.addTween("Show","alpha",0,1,0.3,21);
	this.mMapContentTweener.addTween("Hide","alpha",0.25,0,0.3,22);
	this.mNotificationBack = old_MainOld.getInstance().builder.createSprite();
	this.mNotificationBack.set_x(55);
	this.mNotificationBack.set_y(55);
	var notifBG = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	notifBG.gotoFrame(7);
	notifBG.stop();
	notifBG.touchable = true;
	this.mNotificationBack.addChild(notifBG);
	var notifBack = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	notifBG.gotoFrame(7);
	notifBG.stop();
	notifBG.touchable = true;
	var notifBack1 = old_MainOld.getInstance().builder.createBitmap("black_rect");
	notifBack1.set_scaleX(notifBack1.set_scaleY(1000));
	notifBack1.set_x(-500);
	this.mNotificationBack.addChild(notifBack1);
	notifBack1.set_alpha(0);
	this.mNotificationBack.addChild(notifBack1);
	this.mNotificationBack.addChild(notifBG);
	this.mMainGraphics.addChild(this.mNotificationBack);
	this.mNotificationLabel = new old_systems_uI_UILabel("",190,100,"Ampersand",18,3750201,false,false,"center",0,240);
	this.mNotificationBack.addChild(this.mNotificationLabel.get_mainGraphics());
	this.mNotificationButton = new old_systems_uI_UIButton(null,"",190,230,0,190,30,$bind(this,this.onNotificationButton));
	this.mNotificationBack.addChild(this.mNotificationButton.get_mainGraphics());
	this.mNotificationTweener = new old_helper_Tweener(this.mNotificationBack,$bind(this,this.onNotificationTweener));
	this.mNotificationTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mHint = new old_systems_uI_UIHint();
	this.mHint.get_mainGraphics().set_y(5);
	this.mHint.get_mainGraphics().set_x(5);
	this.mMainGraphics.addChild(this.mHint.get_mainGraphics());
	this.addChildSystem(this.mHint);
	this.mSurvivorsPopup = new old_systems_uI_popups_SurvivorsPopup(null,this.mGameSystem.get_player());
	this.mMainGraphics.addChild(this.mSurvivorsPopup.get_mainGraphics());
	this.addChildSystem(this.mSurvivorsPopup);
	this.mSearchPartyResultsPopup = new old_systems_uI_popups_SearchPartyResultsPopup(null,this.mGameSystem.get_player());
	this.mMainGraphics.addChild(this.mSearchPartyResultsPopup.get_mainGraphics());
	this.addChildSystem(this.mSearchPartyResultsPopup);
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mBlackShape = old_MainOld.getInstance().builder.createBitmap("black_rect");
	this.mBlackShape.set_scaleX(this.mBlackShape.set_scaleY(1000));
	this.mMainGraphics.addChild(this.mBlackShape);
	this.mBlackShape.set_alpha(0);
	this.mBlackShape.set_visible(false);
	this.mBlackTweener = new old_helper_Tweener(this.mBlackShape,$bind(this,this.onSlideTweener));
	this.mBlackTweener.addTween("Show","alpha",1,0,0.3,22);
	this.mBlackTweener.addTween("Hide","alpha",0,1,0.3,21);
	this.mLoadingTimer = new openfl_utils_Timer(50,10);
	this.mLoadingTimer.addEventListener("timerComplete",$bind(this,this.onLoadingComplete));
	this.addEventListener("GameLevelLoaded",$bind(this,this.onLevelLoaded));
	this.mResourcesBtn.disable(0.25);
	this.mSurvivorsBtn.disable(0.25);
	this.mPlayBtn.disable(0.25);
	this.mPromotionSystem = new old_systems_PromotionSystem();
	this.addChildSystem(this.mPromotionSystem);
	this.mPromotionPopup = new old_systems_uI_popups_PromotionPopup(null);
	this.mMainGraphics.addChild(this.mPromotionPopup.get_mainGraphics());
	this.mPromotionPopup.get_mainGraphics().set_x(50);
	this.mPromotionPopup.get_mainGraphics().set_scaleX(this.mPromotionPopup.get_mainGraphics().set_scaleY(0.75));
	this.addChildSystem(this.mPromotionPopup);
};
$hxClasses["old.systems.uI.screens.MapScreen"] = old_systems_uI_screens_MapScreen;
old_systems_uI_screens_MapScreen.__name__ = "old.systems.uI.screens.MapScreen";
old_systems_uI_screens_MapScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_MapScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mLevelLoaded: null
	,mLoadingTimer: null
	,mScreenTitle: null
	,mLevelNumberLabel: null
	,mScoreLabel: null
	,mBarricadeState: null
	,mMapLegendLabel: null
	,mTimeRequirementLabel: null
	,mHoursLabel: null
	,mPlayBtn: null
	,mSurvivorsBtn: null
	,mResourcesBtn: null
	,mQuitBtn: null
	,mBrandingBtn: null
	,mMapContent: null
	,mAreaId: null
	,mLocationButtonsList: null
	,mLocationMapList: null
	,mLocationsContainer: null
	,mPrevArea: null
	,mNextArea: null
	,mSwitchAreaDirection: null
	,mSearchPartyTargetButton: null
	,mSearchPartyTarget: null
	,mNotificationState: null
	,mNotificationBack: null
	,mNotificationLabel: null
	,mNotificationButton: null
	,mSlideTweener: null
	,mMapContentTweener: null
	,mNotificationTweener: null
	,mBlackShape: null
	,mBlackTweener: null
	,mSurvivorsPopup: null
	,mSearchPartyResultsPopup: null
	,mHint: null
	,mTutorialStarted: null
	,mTutorialAnythingFound: null
	,mTutorialNothingFound: null
	,mTutorialSearchedOnce: null
	,mTutorialNoTime: null
	,mPromotionSystem: null
	,mPromotionPopup: null
	,mRoundStarted: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mBlackShape.set_alpha(0);
		this.mBlackShape.set_visible(false);
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		if(nextState == 5) {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		} else {
			this.mBlackShape.set_alpha(0);
			this.mBlackShape.set_visible(false);
			this.mSlideTweener.start("Hide");
		}
	}
	,onSlideTweener: function(tweenSet) {
		haxe_Log.trace("Map onSlideTweener " + tweenSet,{ fileName : "src/old/systems/uI/screens/MapScreen.hx", lineNumber : 345, className : "old.systems.uI.screens.MapScreen", methodName : "onSlideTweener"});
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,onPlay: function(state,button) {
		this.mGameSystem.get_player().save();
		this.mResourcesBtn.disable(0.25);
		this.mSurvivorsBtn.disable(0.25);
		this.mPlayBtn.disable(0.25);
		this.mLevelLoaded = false;
		this.mGameSystem.get_player().get_survivors().assignUnassigned();
		if(this.mSearchPartyTargetButton == null && this.mGameSystem.get_player().get_levelNumber() > 0) {
			this.mGameSystem.get_player().get_survivors().assignSearchParty();
		}
		this.mGameSystem.get_player().get_friendliesSystem().createFriendlies();
		if(this.mSearchPartyTargetButton != null) {
			haxe_Log.trace("Searching",{ fileName : "src/old/systems/uI/screens/MapScreen.hx", lineNumber : 377, className : "old.systems.uI.screens.MapScreen", methodName : "onPlay"});
			this.mTutorialSearchedOnce = true;
			var lLocation;
			try {
				lLocation = js_Boot.__cast(this.mSearchPartyTargetButton.get_data() , old_entities_map_Location);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				lLocation = null;
			}
			this.mGameSystem.get_player().get_map().searchLocation(lLocation);
			this.mGameSystem.get_player().changeMoney(-lLocation.get_difficulty());
			this.mSearchPartyTargetButton = null;
		} else if(this.mGameSystem.get_player().get_survivors().get_allSurvivors().length == 0) {
			this.mGameSystem.get_player().get_map().stumbleUpon();
		}
		this.mRoundStarted = true;
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,5));
	}
	,onQuit: function(state,button) {
		this.mGameSystem.get_player().save();
		this.mResourcesBtn.disable(0.25);
		this.mSurvivorsBtn.disable(0.25);
		this.mPlayBtn.disable(0.25);
		this.mLevelLoaded = false;
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,onResources: function(state,button) {
		this.mGameSystem.get_player().get_map().set_weaponFound(0);
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,6));
	}
	,onSurvivors: function(state,button) {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,10));
	}
	,beforeShow: function() {
		this.mLevelNumberLabel.set_fontSize(18);
		this.mLevelNumberLabel.set_text("Day: <font color=\"" + "#661111" + "\">" + (this.mGameSystem.get_player().get_levelNumber() + 1) + "/40</font>");
		this.mScoreLabel.set_fontSize(18);
		this.mBarricadeState.set_fontSize(18);
		this.mScoreLabel.set_text("Score: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_score() + "</font>");
		this.mBarricadeState.set_text("Barricades: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
		this.mHoursLabel.set_fontSize(18);
		this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
		this.mGameSystem.get_player().get_survivors().unassignUnassigned();
		this.mGameSystem.get_player().get_survivors().unassignSearchParty();
		this.mPlayBtn.get_label().set_fontSize(18);
		this.mPlayBtn.get_label().set_text("Next wave");
		this.mQuitBtn.get_label().set_fontSize(18);
		this.mQuitBtn.get_label().set_text("Save and Quit");
		var lFreeSurvivors = this.mGameSystem.get_player().get_survivors().getCategory(0).length;
		if(lFreeSurvivors > 0) {
			this.mSurvivorsBtn.set_text("Survivors <font color=\"" + "#661111" + "\">(" + this.mGameSystem.get_player().get_survivors().getCategory(0).length + ")</font>");
		} else {
			this.mSurvivorsBtn.set_text("Survivors");
		}
		this.mSurvivorsBtn.get_label().set_fontSize(18);
		if(this.mGameSystem.get_player().get_map().get_weaponFound() > 0) {
			this.mResourcesBtn.get_label().set_fontSize(16);
			this.mResourcesBtn.set_text("Guns/Repairs <font color=\"" + "#661111" + "\">(" + this.mGameSystem.get_player().get_map().get_weaponFound() + ")</font>");
		} else {
			this.mResourcesBtn.get_label().set_fontSize(18);
			this.mResourcesBtn.set_text("Guns / Repairs");
		}
		this.updateMap();
		var lSearchPartySize = this.mGameSystem.get_player().get_survivors().getCategory(3).length;
		if(this.mSearchPartyTargetButton == null && this.mGameSystem.get_player().get_levelNumber() > 0 && lSearchPartySize > 0) {
			var lNextLocationSelected = false;
			var lArray = this.mGameSystem.get_player().get_map().get_curArea().get_locations();
			var lLength = lArray.length;
			var lLocation = null;
			var lLocationButton = null;
			var _g = 0;
			var _g1 = lLength;
			while(_g < _g1) {
				var i = _g++;
				try {
					lLocation = js_Boot.__cast(lArray[i] , old_entities_map_Location);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					lLocation = null;
				}
				lLocationButton = this.mLocationButtonsList[this.mAreaId][i];
				lLocationButton.set_data(lLocation);
				if(!lLocation.get_searched() && lLocation.get_difficulty() <= this.mGameSystem.get_player().get_money()) {
					lNextLocationSelected = true;
					this.mSearchPartyTargetButton = lLocationButton;
					this.mSearchPartyTarget.set_x(lLocationButton.get_x() - 17);
					this.mSearchPartyTarget.set_y(lLocationButton.get_y() - 12);
					this.mSearchPartyTarget.set_visible(true);
					this.mTutorialNoTime = false;
					break;
				}
			}
			if(!lNextLocationSelected) {
				this.mSearchPartyTarget.set_visible(false);
				this.mTutorialNoTime = true;
			}
		} else {
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
		}
		var lFoundWeapons = false;
		var lFoundSurvivors = false;
		if(this.mGameSystem.get_player().get_map().get_searchResults() != null || this.mGameSystem.get_player().get_map().get_survivorsLost() != null || this.mGameSystem.get_player().get_map().get_additionalSurvivors() != null) {
			haxe_Log.trace("Search results",{ fileName : "src/old/systems/uI/screens/MapScreen.hx", lineNumber : 510, className : "old.systems.uI.screens.MapScreen", methodName : "beforeShow"});
			if(this.mGameSystem.get_player().get_map().get_searchResults() != null && (js_Boot.__cast(this.mGameSystem.get_player().get_map().get_searchResults()[1] , Array)).length > 0) {
				lFoundWeapons = true;
			}
			if(this.mGameSystem.get_player().get_map().get_searchResults() != null && (js_Boot.__cast(this.mGameSystem.get_player().get_map().get_searchResults()[0] , Array)).length > 0) {
				lFoundSurvivors = true;
			}
			this.mSearchPartyResultsPopup.instaShow();
		}
		if(this.mGameSystem.get_player().get_levelNumber() == 0) {
			this.mHint.instaShowHint(1);
			this.mTutorialAnythingFound = false;
			this.mTutorialNothingFound = false;
			this.mTutorialNoTime = false;
		} else if(this.mGameSystem.get_player().get_levelNumber() == 1) {
			this.mHint.instaShowHint(2);
		} else if(this.mGameSystem.get_player().get_levelNumber() > 1 && this.mTutorialSearchedOnce && (!this.mTutorialAnythingFound || !this.mTutorialNothingFound)) {
			if((lFoundWeapons || lFoundSurvivors) && !this.mTutorialAnythingFound) {
				this.mTutorialAnythingFound = true;
				if(this.mGameSystem.get_player().get_levelNumber() < 5) {
					this.mHint.instaShowHint(3);
				}
			} else if(!(lFoundWeapons || lFoundSurvivors) && !this.mTutorialNothingFound) {
				this.mTutorialNothingFound = true;
				if(this.mGameSystem.get_player().get_levelNumber() < 5) {
					this.mHint.instaShowHint(4);
				}
			}
			this.mTutorialSearchedOnce = false;
		} else if(this.mGameSystem.get_player().get_life() < 25) {
			this.mHint.instaShowHint(8);
		} else if(this.mTutorialNoTime && !this.mGameSystem.get_player().get_map().get_curAreaCleared()) {
			this.mTutorialNoTime = true;
			this.mHint.instaShowHint(5);
		}
		this.mNotificationBack.touchable = true;
		if(this.mGameSystem.get_player().get_map().get_curAreaCleared()) {
			if(this.mGameSystem.get_player().get_map().get_curAreaId() == 2) {
				this.mNotificationState = 2;
				this.mNotificationLabel.set_text("All areas cleared!\n You have to hold up for another <font color=\"" + "#661111" + "\">" + (40 - this.mGameSystem.get_player().get_levelNumber()) + "</font> days");
				this.mNotificationBack.set_alpha(1);
				this.mNotificationLabel.get_mainGraphics().set_alpha(1);
				this.mNotificationButton.get_mainGraphics().set_alpha(1);
				this.mNotificationBack.set_visible(true);
				this.mNotificationLabel.set_visible(true);
				this.mNotificationButton.set_visible(false);
				this.mMapContent.set_alpha(0.25);
				this.mSearchPartyTargetButton = null;
				this.mSearchPartyTarget.set_visible(false);
				this.mNotificationBack.touchable = false;
			} else {
				this.mNotificationState = 2;
				this.mNotificationLabel.set_text("Area cleared!\nClick <font color=\"" + "#661111" + "\">Next</font> to proceed to the next area!");
				this.mNotificationButton.set_text("Next");
				this.mNotificationBack.set_alpha(1);
				this.mNotificationLabel.get_mainGraphics().set_alpha(1);
				this.mNotificationButton.get_mainGraphics().set_alpha(1);
				this.mNotificationBack.set_visible(true);
				this.mNotificationLabel.set_visible(true);
				this.mNotificationButton.set_visible(true);
				this.mMapContent.set_alpha(0.25);
				this.mSearchPartyTargetButton = null;
				this.mSearchPartyTarget.set_visible(false);
			}
		} else if(this.mGameSystem.get_player().get_survivors().get_allSurvivors().length == 0) {
			this.mNotificationState = 1;
			this.mNotificationLabel.set_text("You're alone now. Everyone you knew is dead. You'll have to wait and hope that there are still people out there and that they'll hear the gunshots and find you.");
			this.mNotificationButton.set_text("Survivors");
			this.mNotificationBack.set_alpha(1);
			this.mNotificationLabel.get_mainGraphics().set_alpha(1);
			this.mNotificationButton.get_mainGraphics().set_alpha(1);
			this.mNotificationBack.set_visible(true);
			this.mNotificationLabel.set_visible(true);
			this.mNotificationButton.set_visible(false);
			this.mMapContent.set_alpha(0.25);
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
		} else if(lSearchPartySize <= 0) {
			this.mNotificationState = 1;
			this.mNotificationLabel.set_text("No search party!\nClick <font color=\"" + "#661111" + "\">Survivors</font> to assemble a search party!");
			this.mNotificationButton.set_text("Survivors");
			this.mNotificationBack.set_alpha(1);
			this.mNotificationLabel.get_mainGraphics().set_alpha(1);
			this.mNotificationButton.get_mainGraphics().set_alpha(1);
			this.mNotificationBack.set_visible(true);
			this.mNotificationLabel.set_visible(true);
			this.mNotificationButton.set_visible(true);
			this.mMapContent.set_alpha(0.25);
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
		} else {
			this.mNotificationState = 0;
			this.mNotificationBack.set_visible(false);
			this.mNotificationLabel.set_visible(false);
			this.mNotificationButton.set_visible(false);
			this.mMapContent.set_alpha(1);
		}
		this.mNotificationLabel.set_fontSize(this.mNotificationLabel.get_fontSize());
		this.mNotificationButton.get_label().set_fontSize(this.mNotificationButton.get_label().get_fontSize());
		if(this.mPromotionSystem.get_isReady()) {
			this.mPromotionPopup.show();
			this.mPromotionSystem.ResetTimer();
		}
	}
	,afterHide: function() {
		this.mHint.instaHide();
	}
	,afterReady: function() {
		if(!this.mLevelLoaded) {
			this.mGameSystem.get_player().save();
			this.dispatchEvent(new old_events_GameEvent("GameLoadLevel"));
			this.mLoadingTimer.reset();
			this.mLoadingTimer.start();
		}
	}
	,onLevelLoaded: function(e) {
		this.mLevelLoaded = true;
	}
	,onLoadingComplete: function(e) {
		if(this.mLevelLoaded != true) {
			this.mLoadingTimer.reset();
			this.mLoadingTimer.start();
		} else {
			if(this.mGameSystem.get_player().get_levelNumber() > 1) {
				this.mResourcesBtn.enable(1);
				this.mSurvivorsBtn.enable(1);
			}
			this.mPlayBtn.enable(1);
		}
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
		this.mBlackTweener.update(dt);
		this.mMapContentTweener.update(dt);
		this.mNotificationTweener.update(dt);
	}
	,onLocationSelected: function(state,button) {
		if(this.mSearchPartyTargetButton == button) {
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_x(button.get_x() - 17);
			this.mSearchPartyTarget.set_y(button.get_y() - 12);
			this.mSearchPartyTarget.set_visible(false);
		} else if(button.get_state() == false) {
			this.mSearchPartyTargetButton = button;
			this.mSearchPartyTarget.set_x(button.get_x() - 17);
			this.mSearchPartyTarget.set_y(button.get_y() - 12);
			this.mSearchPartyTarget.set_visible(true);
		}
	}
	,onOverLocation: function(state,button) {
		if(state) {
			this.mMapLegendLabel.set_text("Might find:\n<font color=\"" + "#661111" + "\">" + button.get_descriptionIdleOver() + "</font>");
			this.mTimeRequirementLabel.set_text("Time required: <font color=\"" + "#661111" + "\">" + button.get_descriptionToggledOver() + "</font>");
		} else {
			this.mMapLegendLabel.set_text("Select a location to send the search party to...");
			this.mTimeRequirementLabel.set_text("");
		}
	}
	,onNotificationButton: function(state,button) {
		if(this.mNotificationState == 1) {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,10));
		} else if(this.mNotificationState == 2) {
			this.mNotificationTweener.start("Hide");
			this.mMapContentTweener.start("Hide");
			this.mSwitchAreaDirection = 1;
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
		} else if(this.mNotificationState == 4) {
			this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,5));
		} else if(this.mNotificationState == 5) {
			this.mNotificationTweener.start("Hide");
			this.mMapContentTweener.start("Show");
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
		}
		this.mMapContent.set_alpha(1);
	}
	,onPrevNextArea: function(state,button) {
		this.mMapContentTweener.start("Hide");
		this.mSwitchAreaDirection = button.get_id();
		this.mSearchPartyTargetButton = null;
		this.mSearchPartyTarget.set_visible(false);
	}
	,onOverPrevNextArea: function(state,button) {
		if(state) {
			if(button.get_id() < 0) {
				this.mMapLegendLabel.set_text("Switch to :\n<font color=\"" + "#661111" + "\">previuos area</font>");
			} else if(button.get_id() > 0) {
				this.mMapLegendLabel.set_text("Switch to :\n<font color=\"" + "#661111" + "\">next area</font>");
			}
		} else {
			this.mMapLegendLabel.set_text("Select a location to send the search party to...");
		}
	}
	,populateMap: function() {
		var lMap = this.mGameSystem.get_player().get_map();
		var lCurArea = lMap.get_curArea();
		this.mAreaId = lMap.get_curAreaId();
		var lAreas = lMap.get_areas();
		var lArea = null;
		var lLength1 = lAreas.length;
		var lLocations = null;
		var lLength2 = 0;
		var lLocation = null;
		var lAreaButtons = null;
		var lLocationButton = null;
		var lAreaImage = null;
		var _g = 0;
		var _g1 = lLength1;
		while(_g < _g1) {
			var i = _g++;
			lArea = lAreas[i];
			lLocations = lArea.get_locations();
			lLength2 = lLocations.length;
			lAreaButtons = [];
			this.mLocationButtonsList.push(lAreaButtons);
			lAreaImage = lArea.get_mainGraphics();
			lAreaImage.set_x(lAreaImage.set_y(50));
			this.mLocationMapList.push(lAreaImage);
			if(i == this.mAreaId) {
				this.mLocationsContainer.addChild(lAreaImage);
			}
			var _g2 = 0;
			var _g11 = lLength2;
			while(_g2 < _g11) {
				var j = _g2++;
				lLocation = lLocations[j];
				lLocationButton = new old_systems_uI_UIButton("UILocationImg","",lLocation.get_x(),lLocation.get_y(),-1,28,40,$bind(this,this.onLocationSelected),$bind(this,this.onOverLocation));
				lLocationButton.set_data(lLocation);
				lLocationButton.set_descriptionIdleOver(lLocation.get_description());
				lLocationButton.set_descriptionToggledOver(Std.string(lLocation.get_difficulty()));
				lAreaButtons.push(lLocationButton);
				if(i == this.mAreaId) {
					this.mLocationsContainer.addChild(lLocationButton.get_mainGraphics());
				}
			}
		}
	}
	,updateMap: function() {
		var lMap = this.mGameSystem.get_player().get_map();
		var lCurArea = lMap.get_curArea();
		if(lMap.get_curAreaId() > 0) {
			this.mPrevArea.enable(1.0);
		} else {
			this.mPrevArea.disable(0.25);
		}
		if(lMap.get_curAreaId() < lMap.get_areas().length - 1) {
			this.mNextArea.enable(1.0);
		} else {
			this.mNextArea.disable(0.25);
		}
		var lArray = lCurArea.get_locations();
		var lLength = lArray.length;
		var lLocation = null;
		var lLocationButton = null;
		if(this.mAreaId == lMap.get_curAreaId() && !lMap.get_wasReset()) {
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
			var _g = 0;
			var _g1 = lLength;
			while(_g < _g1) {
				var i = _g++;
				lLocation = js_Boot.__cast(lArray[i] , old_entities_map_Location);
				lLocationButton = this.mLocationButtonsList[this.mAreaId][i];
				lLocationButton.set_data(lLocation);
				if(lLocation.get_searched()) {
					lLocationButton.toggle(true);
				} else {
					lLocationButton.toggle(false);
					if(lLocation.get_difficulty() > this.mGameSystem.get_player().get_money()) {
						lLocationButton.disable(0.25);
					} else {
						lLocationButton.enable(1);
					}
				}
			}
		} else {
			this.mSearchPartyTargetButton = null;
			this.mSearchPartyTarget.set_visible(false);
			this.mAreaId = lMap.get_curAreaId();
			lMap.set_wasReset(false);
			while(this.mLocationsContainer.get_numChildren() > 0) this.mLocationsContainer.removeChildAt(0);
			this.mLocationsContainer.addChild(this.mLocationMapList[this.mAreaId]);
			lArray = lCurArea.get_locations();
			lLength = lArray.length;
			lLocation = null;
			lLocationButton = null;
			var _g2 = 0;
			var _g11 = lLength;
			while(_g2 < _g11) {
				var i1 = _g2++;
				lLocation = js_Boot.__cast(lArray[i1] , old_entities_map_Location);
				lLocationButton = this.mLocationButtonsList[this.mAreaId][i1];
				lLocationButton.set_data(lLocation);
				lLocationButton.set_descriptionIdleOver(lLocation.get_description());
				lLocationButton.set_descriptionToggledOver(Std.string(lLocation.get_difficulty()));
				this.mLocationsContainer.addChild(lLocationButton.get_mainGraphics());
				if(lLocation.get_searched()) {
					lLocationButton.toggle(true);
				} else {
					lLocationButton.toggle(false);
					if(lLocation.get_difficulty() > this.mGameSystem.get_player().get_money()) {
						lLocationButton.disable(0.25);
					} else {
						lLocationButton.enable(1);
					}
				}
			}
		}
	}
	,changeArea: function(dir) {
		var lMap = this.mGameSystem.get_player().get_map();
		lMap.set_wasReset(false);
		var lCurArea = null;
		if(dir > 0) {
			if(lMap.get_areas().length - 1 > lMap.get_curAreaId()) {
				lMap.nextArea();
				this.mAreaId = lMap.get_curAreaId();
				lCurArea = lMap.get_curArea();
			} else {
				return;
			}
		} else if(dir < 0) {
			if(lMap.get_areas().length > 0 && lMap.get_curAreaId() > 0) {
				lMap.prevArea();
				this.mAreaId = lMap.get_curAreaId();
				lCurArea = lMap.get_curArea();
			} else {
				return;
			}
		} else if(dir == 0) {
			return;
		}
		while(this.mLocationsContainer.get_numChildren() > 0) this.mLocationsContainer.removeChildAt(0);
		this.mLocationsContainer.addChild(this.mLocationMapList[this.mAreaId]);
		var lArray = lCurArea.get_locations();
		var lLength = lArray.length;
		var lLocation = null;
		var lLocationButton = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			try {
				lLocation = js_Boot.__cast(lArray[i] , old_entities_map_Location);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				lLocation = null;
			}
			lLocationButton = this.mLocationButtonsList[this.mAreaId][i];
			lLocationButton.set_data(lLocation);
			lLocationButton.set_descriptionIdleOver(lLocation.get_description());
			lLocationButton.set_descriptionToggledOver(Std.string(lLocation.get_difficulty()));
			this.mLocationsContainer.addChild(lLocationButton.get_mainGraphics());
			if(lLocation.get_searched()) {
				lLocationButton.toggle(true);
			} else {
				lLocationButton.toggle(false);
				if(lLocation.get_difficulty() > this.mGameSystem.get_player().get_money()) {
					lLocationButton.disable(0.25);
				} else {
					lLocationButton.enable(1);
				}
			}
		}
	}
	,onMapContentTweener: function(tweenSet) {
		haxe_Log.trace("onMapContentTweener " + tweenSet,{ fileName : "src/old/systems/uI/screens/MapScreen.hx", lineNumber : 1003, className : "old.systems.uI.screens.MapScreen", methodName : "onMapContentTweener"});
		if(tweenSet == "Hide") {
			this.changeArea(this.mSwitchAreaDirection);
			if(this.mGameSystem.get_player().get_map().get_curAreaId() > 0) {
				this.mPrevArea.enable(1.0);
			} else {
				this.mPrevArea.disable(0.25);
			}
			if(this.mGameSystem.get_player().get_map().get_curAreaId() < this.mGameSystem.get_player().get_map().get_areas().length - 1) {
				this.mNextArea.enable(1.0);
			} else {
				this.mNextArea.disable(0.25);
			}
			this.mNotificationBack.set_alpha(0);
			this.mNotificationLabel.get_mainGraphics().set_alpha(0);
			this.mNotificationButton.get_mainGraphics().set_alpha(0);
			this.mNotificationBack.set_visible(false);
			this.mNotificationLabel.set_visible(false);
			this.mNotificationButton.set_visible(false);
			this.mMapContentTweener.start("Show");
		} else if(tweenSet == "Show") {
			this.mSwitchAreaDirection = 0;
		}
	}
	,onNotificationTweener: function(tweenSet) {
		if(tweenSet == "Hide") {
			this.mNotificationBack.set_alpha(0);
			this.mNotificationLabel.get_mainGraphics().set_alpha(0);
			this.mNotificationButton.get_mainGraphics().set_alpha(0);
			this.mNotificationBack.set_visible(false);
			this.mNotificationLabel.set_visible(false);
			this.mNotificationButton.set_visible(false);
		}
	}
	,__class__: old_systems_uI_screens_MapScreen
});
var old_systems_uI_screens_OptionsScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mSlideTweener2 = null;
	this.mSlideTweener = null;
	this.mBackBtn = null;
	this.mMusic = null;
	this.mSound = null;
	this.mSoundTitle = null;
	this.mGraphicsWeather = null;
	this.mGraphicsDecals = null;
	this.mGraphicsTitle = null;
	this.mSliderSound = null;
	this.mSliderMusic = null;
	this.mQualityTitle = null;
	this.mScreenTitle = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	var lOffsetX = 160;
	var lOffsetY = 55;
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(2);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.8));
	this.mMainGraphics.addChild(lBackground);
	this.mScreenTitle = new old_systems_uI_UILabel("Options",320,lOffsetY + 40,"Ampersand",32,3750201,true);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.mSliderMusic = new old_systems_uI_UISlider($bind(this,this.onUpdateSliderMusic),false,205,lOffsetY + 120,100 * old_MainOld.getInstance().context.save_data.data().musicValue);
	this.mMainGraphics.addChild(this.mSliderMusic.get_mainGraphics());
	this.mSliderSound = new old_systems_uI_UISlider($bind(this,this.onUpdateSliderSound),false,205,lOffsetY + 220,100 * old_MainOld.getInstance().context.save_data.data().soundValue);
	this.mMainGraphics.addChild(this.mSliderSound.get_mainGraphics());
	this.mQualityTitle = new old_systems_uI_UILabel("Music",320,lOffsetY + 85,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mQualityTitle.get_mainGraphics());
	this.mGraphicsTitle = new old_systems_uI_UILabel("Graphics",320,lOffsetY + 140,"Ampersand",24,3750201,true);
	this.mGraphicsWeather = new old_systems_uI_UIButton(null,"Weather",315,lOffsetY + 170,1,140,30,$bind(this,this.onWeather),null,true);
	this.mGraphicsDecals = new old_systems_uI_UIButton(null,"Decals",325,lOffsetY + 170,-1,140,30,$bind(this,this.onDecals),null,true);
	this.mSoundTitle = new old_systems_uI_UILabel("Sound",320,lOffsetY + 180,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mSoundTitle.get_mainGraphics());
	this.mSound = new old_systems_uI_UIButton(null,"Sound",315,lOffsetY + 190,1,140,30,$bind(this,this.onSound),null,true);
	this.mMusic = new old_systems_uI_UIButton(null,"Music",325,lOffsetY + 190,-1,140,30,$bind(this,this.onMusic),null,true);
	this.mBackBtn = new old_systems_uI_UIButton(null,"Back",320,370,0,160,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.onAddedToStage();
	this.addEventListener(old_events_ConfigEvent.SOUND_TOGGLED,$bind(this,this.onSoundToggled));
};
$hxClasses["old.systems.uI.screens.OptionsScreen"] = old_systems_uI_screens_OptionsScreen;
old_systems_uI_screens_OptionsScreen.__name__ = "old.systems.uI.screens.OptionsScreen";
old_systems_uI_screens_OptionsScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_OptionsScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mScreenTitle: null
	,mQualityTitle: null
	,mSliderMusic: null
	,mSliderSound: null
	,mGraphicsTitle: null
	,mGraphicsDecals: null
	,mGraphicsWeather: null
	,mSoundTitle: null
	,mSound: null
	,mMusic: null
	,mBackBtn: null
	,mSlideTweener: null
	,mSlideTweener2: null
	,onUpdateSliderMusic: function(_state) {
		if(_state == null) {
			_state = 0;
		}
		if(_state == 100 && old_MainOld.getInstance().context.save_data.data().musicValue == 0 && !old_singleton_LocalStorage.get_instance().get_sound()) {
			old_MainOld.getInstance().context.save_data.data().lastmusicValue = _state;
			old_MainOld.getInstance().context.save_data.data().lastsoundValue = old_MainOld.getInstance().context.save_data.data().soundValue;
			old_singleton_LocalStorage.get_instance().set_sound(true);
			old_singleton_SoundPlayer.get_instance().soundOn(old_singleton_LocalStorage.get_instance().get_sound(),false);
		}
		old_MainOld.getInstance().context.music.set_master_volume(_state / 100);
		old_MainOld.getInstance().context.save_data.data().musicValue = _state / 100;
		old_MainOld.getInstance().context.save_data.Save();
	}
	,onUpdateSliderSound: function(_state) {
		if(_state == null) {
			_state = 0;
		}
		if(_state == 100 && old_MainOld.getInstance().context.save_data.data().soundValue == 0 && !old_singleton_LocalStorage.get_instance().get_sound()) {
			old_MainOld.getInstance().context.save_data.data().lastsoundValue = _state;
			old_MainOld.getInstance().context.save_data.data().lastmusicValue = old_MainOld.getInstance().context.save_data.data().musicValue;
			old_singleton_LocalStorage.get_instance().set_sound(true);
			old_singleton_SoundPlayer.get_instance().soundOn(old_singleton_LocalStorage.get_instance().get_sound(),false);
		}
		old_MainOld.getInstance().context.game_snd.set_master_volume(_state / 100);
		old_MainOld.getInstance().context.save_data.data().soundValue = _state / 100;
		old_MainOld.getInstance().context.save_data.Save();
	}
	,onSoundToggled: function(e) {
		if(e.boolValue) {
			this.mSliderSound.set_curValue(old_MainOld.getInstance().context.save_data.data().lastsoundValue);
			this.mSliderMusic.set_curValue(old_MainOld.getInstance().context.save_data.data().lastmusicValue);
		} else {
			old_MainOld.getInstance().context.save_data.data().lastsoundValue = this.mSliderSound.get_curValue();
			old_MainOld.getInstance().context.save_data.data().lastmusicValue = this.mSliderMusic.get_curValue();
			this.mSliderSound.set_curValue(0);
			this.mSliderMusic.set_curValue(0);
		}
	}
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,onAddedToStage: function() {
		this.mGraphicsWeather.toggle(old_singleton_LocalStorage.get_instance().get_weather(),true);
		this.mGraphicsDecals.toggle(old_singleton_LocalStorage.get_instance().get_decals(),true);
	}
	,onBack: function(state,button) {
		old_singleton_LocalStorage.get_instance().set_weather(this.mGraphicsWeather.get_state());
		old_singleton_LocalStorage.get_instance().set_decals(this.mGraphicsDecals.get_state());
		old_singleton_LocalStorage.get_instance().flush();
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,onCancel: function() {
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,0));
	}
	,beforeShow: function() {
		this.mGraphicsWeather.toggle(old_singleton_LocalStorage.get_instance().get_weather(),true);
		this.mGraphicsDecals.toggle(old_singleton_LocalStorage.get_instance().get_decals(),true);
	}
	,afterResume: function() {
		if(!old_singleton_LocalStorage.get_instance().get_sound()) {
			this.mSound.toggle(false);
			this.mMusic.disable();
		} else {
			this.mSound.toggle(true);
			this.mMusic.enable();
		}
	}
	,onWeather: function(state,button) {
	}
	,onDecals: function(state,button) {
	}
	,onSound: function(state,button) {
		if(state) {
			this.mMusic.enable();
		} else {
			this.mMusic.disable();
		}
		old_singleton_SoundPlayer.get_instance().soundOn(state);
	}
	,onMusic: function(state,button) {
		old_singleton_SoundPlayer.get_instance().musicOn(state);
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_OptionsScreen
});
var old_systems_uI_screens_ResScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.mHint = null;
	this.mTutorialGunsSeen = false;
	this.mSlideTweener = null;
	this.mGunStatsLabel = null;
	this.mGunStatsTitleLabel = null;
	this.mRepairAllAmount = 0;
	this.mRepairAllCost = 0;
	this.mRepairAllBtn = null;
	this.mRepair3Cost = 100;
	this.mRepair3Amount = 2000;
	this.mRepair3Btn = null;
	this.mRepair2Cost = 50;
	this.mRepair2Amount = 1000;
	this.mRepair2Btn = null;
	this.mRepair1Cost = 25;
	this.mRepair1Amount = 500;
	this.mRepair1Btn = null;
	this.mDamageCost = 0.05;
	this.mRepairsStateLabel = null;
	this.mRepairsLabel = null;
	this.mWeaponSlot2Mark = null;
	this.mWeaponSlot1Mark = null;
	this.mWeaponIconContainer = null;
	this.mWeaponIconList = null;
	this.mWeaponsContainer = null;
	this.mWeaponButtonList = null;
	this.mWeaponList = null;
	this.mWeaponsLabel = null;
	this.mBackBtn = null;
	this.mHoursLabel = null;
	this.mScreenTitle = null;
	this.mPlayer = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	this.mPlayer = this.mGameSystem.get_player();
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(3);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.66666666666666663));
	this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(2.));
	this.mMainGraphics.addChild(lBackground);
	this.mMainGraphics.set_x(-100);
	lBackground.set_x(50);
	lBackground.set_y(10);
	this.mHoursLabel = new old_systems_uI_UILabel("Time: <font color=\"" + "#661111" + "\">0</font>",458,40,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mHoursLabel.get_mainGraphics());
	this.mWeaponsLabel = new old_systems_uI_UILabel("Weapons",180,55,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mWeaponsLabel.get_mainGraphics());
	this.createWeaponList();
	this.mRepairsLabel = new old_systems_uI_UILabel("Repairs",460,105,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mRepairsLabel.get_mainGraphics());
	this.mRepairsStateLabel = new old_systems_uI_UILabel("Barricade state: <font color=\"" + "#661111" + "\">0</font>",460,130,"Ampersand",18,3750201,true);
	this.mMainGraphics.addChild(this.mRepairsStateLabel.get_mainGraphics());
	this.mRepair1Btn = new old_systems_uI_UIButton(null,"+ 5%",415,160,1,70,30,$bind(this,this.onRepair1),$bind(this,this.onOverRepair1));
	this.mMainGraphics.addChild(this.mRepair1Btn.get_mainGraphics());
	this.mRepair2Btn = new old_systems_uI_UIButton(null,"+ 10%",460,160,0,70,30,$bind(this,this.onRepair2),$bind(this,this.onOverRepair2));
	this.mMainGraphics.addChild(this.mRepair2Btn.get_mainGraphics());
	this.mRepair3Btn = new old_systems_uI_UIButton(null,"+ 20%",505,160,-1,70,30,$bind(this,this.onRepair3),$bind(this,this.onOverRepair3));
	this.mMainGraphics.addChild(this.mRepair3Btn.get_mainGraphics());
	this.mRepairAllBtn = new old_systems_uI_UIButton(null,"Auto fill",460,200,0,230,30,$bind(this,this.onRepairAll),$bind(this,this.onOverRepairAll));
	this.mMainGraphics.addChild(this.mRepairAllBtn.get_mainGraphics());
	this.mGunStatsTitleLabel = new old_systems_uI_UILabel("Weapon stats",460,250,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mGunStatsTitleLabel.get_mainGraphics());
	this.mGunStatsTitleLabel.set_visible(false);
	this.mGunStatsLabel = new old_systems_uI_UILabel("",460,285,"Ampersand",18,3750201);
	this.mMainGraphics.addChild(this.mGunStatsLabel.get_mainGraphics());
	this.mGunStatsLabel.set_visible(false);
	this.mBackBtn = new old_systems_uI_UIButton(null,"Return",450,422,0,160,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mHint = new old_systems_uI_UIHint();
	this.mMainGraphics.addChild(this.mHint.get_mainGraphics());
	this.addChildSystem(this.mHint);
};
$hxClasses["old.systems.uI.screens.ResScreen"] = old_systems_uI_screens_ResScreen;
old_systems_uI_screens_ResScreen.__name__ = "old.systems.uI.screens.ResScreen";
old_systems_uI_screens_ResScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_ResScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mPlayer: null
	,mScreenTitle: null
	,mHoursLabel: null
	,mBackBtn: null
	,mWeaponsLabel: null
	,mWeaponList: null
	,mWeaponButtonList: null
	,mWeaponsContainer: null
	,mWeaponIconList: null
	,mWeaponIconContainer: null
	,mWeaponSlot1Mark: null
	,mWeaponSlot2Mark: null
	,mRepairsLabel: null
	,mRepairsStateLabel: null
	,mDamageCost: null
	,mRepair1Btn: null
	,mRepair1Amount: null
	,mRepair1Cost: null
	,mRepair2Btn: null
	,mRepair2Amount: null
	,mRepair2Cost: null
	,mRepair3Btn: null
	,mRepair3Amount: null
	,mRepair3Cost: null
	,mRepairAllBtn: null
	,mRepairAllCost: null
	,mRepairAllAmount: null
	,mGunStatsTitleLabel: null
	,mGunStatsLabel: null
	,mSlideTweener: null
	,mTutorialGunsSeen: null
	,mHint: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,onBack: function(state,button) {
		AdManager.showAd();
		this.mPlayer.startWave();
		this.mPlayer.save();
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,beforeShow: function() {
		this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
		this.mRepairsStateLabel.set_text("Barricade state: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
		this.calculateRepairAll();
		this.updateRepairButtons();
		this.updateSlotMarkers();
		this.updateWeaponButtons();
		this.updateWeaponIcons();
		if(!this.mTutorialGunsSeen) {
			this.mTutorialGunsSeen = true;
			this.mHint.instaShowHint(9);
		}
	}
	,afterReady: function() {
	}
	,onRepair1: function(state,button) {
		if(this.mPlayer.get_money() >= this.mRepair1Cost) {
			if(this.mPlayer.reinforce(this.mRepair1Amount)) {
				this.mPlayer.changeMoney(-this.mRepair1Cost);
				this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
				this.mRepairsStateLabel.set_text("Barricade state: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
				this.calculateRepairAll();
				this.updateRepairButtons();
			}
		}
	}
	,onOverRepair1: function(state,button) {
		if(state) {
			this.mRepair1Btn.set_text(this.mRepair1Cost + " hours");
		} else {
			this.mRepair1Btn.set_text("+ 5%");
		}
	}
	,onRepair2: function(state,button) {
		if(this.mPlayer.get_money() >= this.mRepair2Cost) {
			if(this.mPlayer.reinforce(this.mRepair2Amount)) {
				this.mPlayer.changeMoney(-this.mRepair2Cost);
				this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
				this.mRepairsStateLabel.set_text("Barricade state: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
				this.calculateRepairAll();
				this.updateRepairButtons();
			}
		}
	}
	,onOverRepair2: function(state,button) {
		if(state) {
			this.mRepair2Btn.set_text(this.mRepair2Cost + " hours");
		} else {
			this.mRepair2Btn.set_text("+ 10%");
		}
	}
	,onRepair3: function(state,button) {
		if(this.mPlayer.get_money() >= this.mRepair3Cost) {
			if(this.mPlayer.reinforce(this.mRepair3Amount)) {
				this.mPlayer.changeMoney(-this.mRepair3Cost);
				this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
				this.mRepairsStateLabel.set_text("Barricade state: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
				this.calculateRepairAll();
				this.updateRepairButtons();
			}
		}
	}
	,onOverRepair3: function(state,button) {
		if(state) {
			this.mRepair3Btn.set_text(this.mRepair3Cost + " hours");
		} else {
			this.mRepair3Btn.set_text("+ 20%");
		}
	}
	,onRepairAll: function(state,button) {
		if(this.mPlayer.get_money() >= this.mRepairAllCost) {
			if(this.mPlayer.reinforce(this.mRepairAllAmount)) {
				this.mPlayer.changeMoney(-this.mRepairAllCost);
				this.mHoursLabel.set_text("Time: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_money() + "</font>");
				this.mRepairsStateLabel.set_text("Barricade state: <font color=\"" + "#661111" + "\">" + this.mGameSystem.get_player().get_life() + "%</font>");
				this.calculateRepairAll();
				this.updateRepairButtons();
			}
		}
	}
	,onOverRepairAll: function(state,button) {
		if(state) {
			this.mRepairAllBtn.set_text(this.mRepairAllCost + " hours");
		} else {
			this.mRepairAllBtn.set_text("Full repair");
		}
	}
	,calculateRepairAll: function() {
		var lDamage = this.mPlayer.get_damage();
		var lCost = Math.ceil(lDamage * this.mDamageCost);
		if(this.mPlayer.get_money() >= lCost) {
			this.mRepairAllCost = lCost;
			this.mRepairAllAmount = lDamage;
			this.mRepairAllBtn.set_text("Full repair");
		} else {
			lDamage = this.mPlayer.get_money() / this.mDamageCost | 0;
			this.mRepairAllCost = this.mPlayer.get_money() | 0;
			this.mRepairAllAmount = lDamage;
			this.mRepairAllBtn.set_text("Full repair");
		}
	}
	,updateRepairButtons: function() {
		if(this.mPlayer.get_money() >= this.mRepair1Cost && this.mPlayer.get_damage() > 0) {
			this.mRepair1Btn.enable(1);
		} else {
			this.mRepair1Btn.disable(0.25);
		}
		if(this.mPlayer.get_money() >= this.mRepair2Cost && this.mPlayer.get_damage() > 0) {
			this.mRepair2Btn.enable(1);
		} else {
			this.mRepair2Btn.disable(0.25);
		}
		if(this.mPlayer.get_money() >= this.mRepair3Cost && this.mPlayer.get_damage() > 0) {
			this.mRepair3Btn.enable(1);
		} else {
			this.mRepair3Btn.disable(0.25);
		}
		if(this.mPlayer.get_money() == 0 || this.mPlayer.get_damage() == 0) {
			this.mRepairAllBtn.disable(0.25);
		} else {
			this.mRepairAllBtn.enable(1);
		}
	}
	,update: function(dt) {
		old_systems_uI_UIScreen.prototype.update.call(this,dt);
		this.mSlideTweener.update(dt);
	}
	,createWeaponList: function() {
		this.mWeaponList = [];
		this.mWeaponButtonList = [];
		this.mWeaponsContainer = old_MainOld.getInstance().builder.createSprite();
		this.mWeaponsContainer.set_x(180);
		this.mWeaponsContainer.set_y(85);
		this.mMainGraphics.addChild(this.mWeaponsContainer);
		this.mWeaponSlot1Mark = old_MainOld.getInstance().builder.createSprite();
		this.mWeaponsContainer.addChild(this.mWeaponSlot1Mark);
		var lWeaponSlot1Label = new old_systems_uI_UILabel("Primary",0,0,"Ampersand",18,3750201,false,false,"left",-1);
		this.mWeaponSlot1Mark.addChild(lWeaponSlot1Label.get_mainGraphics());
		this.mWeaponSlot2Mark = old_MainOld.getInstance().builder.createSprite();
		this.mWeaponsContainer.addChild(this.mWeaponSlot2Mark);
		var lWeaponSlot2Label = new old_systems_uI_UILabel("Secondary",0,0,"Ampersand",18,3750201,false,false,"left",-1);
		this.mWeaponSlot2Mark.addChild(lWeaponSlot2Label.get_mainGraphics());
		this.mWeaponList.push(8);
		this.mWeaponList.push(4);
		this.mWeaponList.push(5);
		this.mWeaponList.push(7);
		this.mWeaponList.push(9);
		this.mWeaponList.push(0);
		this.mWeaponList.push(1);
		this.mWeaponList.push(2);
		this.mWeaponList.push(3);
		this.mWeaponList.push(6);
		var lLength = this.mWeaponList.length;
		var lWeaponModel = 0;
		var lWeaponBtn = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lWeaponModel = this.mWeaponList[i];
			lWeaponBtn = new old_systems_uI_UIButton(old_entities_equipment_ItemDescription.getInventoryGraphics(lWeaponModel),"",0,30 * i,1,120,40,$bind(this,this.onSelectWeapon),$bind(this,this.onOverWeapon),false);
			lWeaponBtn.set_id(i);
			lWeaponBtn.disable();
			this.mWeaponsContainer.addChild(lWeaponBtn.get_mainGraphics());
			this.mWeaponButtonList.push(lWeaponBtn);
		}
		this.mWeaponIconList = [];
		this.mWeaponIconContainer = old_MainOld.getInstance().builder.createSprite();
		this.mMainGraphics.addChild(this.mWeaponIconContainer);
		this.mWeaponIconContainer.set_x(180);
		this.mWeaponIconContainer.set_y(93);
		lLength = this.mWeaponList.length;
		lWeaponModel = 0;
		lWeaponBtn = null;
		var _g2 = 0;
		var _g3 = lLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lWeaponModel = this.mWeaponList[i1];
			lWeaponBtn = new old_systems_uI_UIButton("MenuSelectDeselect","",0,30 * i1,-1,120,40,$bind(this,this.onSelectWeapon),$bind(this,this.onOverWeapon),false);
			lWeaponBtn.set_id(i1);
			lWeaponBtn.disable();
			this.mWeaponIconContainer.addChild(lWeaponBtn.get_mainGraphics());
			this.mWeaponIconList.push(lWeaponBtn);
		}
	}
	,onSelectWeapon: function(state,button) {
		var lWeaponModel = this.mWeaponList[button.get_id()];
		if(this.mPlayer.get_slot1() == null && this.mPlayer.get_slot2() == null) {
			this.mPlayer.equipSlot1ByModel(lWeaponModel);
		} else if(this.mPlayer.get_slot1() != null && this.mPlayer.get_slot2() == null) {
			if(this.mPlayer.get_slot1().get_model() == lWeaponModel) {
				this.mPlayer.equipSlot1(null);
			} else {
				this.mPlayer.equipSlot2ByModel(lWeaponModel);
			}
		} else if(this.mPlayer.get_slot1() != null && this.mPlayer.get_slot2() != null) {
			if(this.mPlayer.get_slot1().get_model() == lWeaponModel) {
				this.mPlayer.equipSlot1(null);
			} else if(this.mPlayer.get_slot2().get_model() == lWeaponModel) {
				this.mPlayer.equipSlot2(null);
			}
		} else if(this.mPlayer.get_slot1() == null && this.mPlayer.get_slot2() != null) {
			if(this.mPlayer.get_slot2().get_model() == lWeaponModel) {
				this.mPlayer.equipSlot2(null);
			} else {
				this.mPlayer.equipSlot1ByModel(lWeaponModel);
			}
		}
		this.updateSlotMarkers();
		this.updateWeaponIcons();
	}
	,onOverWeapon: function(state,button) {
		var lWeaponModel = this.mWeaponList[button.get_id()];
		if(state) {
			this.mGunStatsLabel.set_visible(true);
			this.mGunStatsTitleLabel.set_visible(true);
			var lInventoryItem = this.mPlayer.getFromInventoryByModel(lWeaponModel);
			if(lInventoryItem != null) {
				this.mGunStatsLabel.set_text(lInventoryItem.get_description());
			} else {
				this.mGunStatsLabel.set_text("You haven't found this weapon yet!");
			}
		} else {
			this.mGunStatsLabel.set_visible(false);
			this.mGunStatsTitleLabel.set_visible(false);
		}
	}
	,updateSlotMarkers: function() {
		this.mWeaponSlot1Mark.set_visible(false);
		this.mWeaponSlot2Mark.set_visible(false);
		var lLength = this.mWeaponList.length;
		var lWeaponModel = 0;
		var lWeaponBtn = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lWeaponModel = this.mWeaponList[i];
			if(this.mPlayer.get_slot1() != null && this.mPlayer.get_slot1().get_model() == lWeaponModel) {
				this.mWeaponSlot1Mark.set_visible(true);
				this.mWeaponSlot1Mark.set_x(25);
				this.mWeaponSlot1Mark.set_y(30 * i + 7);
			} else if(this.mPlayer.get_slot2() != null && this.mPlayer.get_slot2().get_model() == lWeaponModel) {
				this.mWeaponSlot2Mark.set_visible(true);
				this.mWeaponSlot2Mark.set_x(25);
				this.mWeaponSlot2Mark.set_y(30 * i + 7);
			}
		}
	}
	,updateWeaponButtons: function() {
		var lPlayerInventoryLength = this.mPlayer.get_inventory().length;
		var lLength = this.mWeaponList.length;
		var lPlayerWeaponItem = null;
		var lWeaponModel = 0;
		var lWeaponBtn = null;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lWeaponBtn = this.mWeaponButtonList[i];
			lWeaponBtn.disable();
		}
		var _g2 = 0;
		var _g3 = lPlayerInventoryLength;
		while(_g2 < _g3) {
			var j = _g2++;
			lPlayerWeaponItem = this.mPlayer.get_inventory()[j];
			var _g21 = 0;
			var _g31 = lLength;
			while(_g21 < _g31) {
				var i1 = _g21++;
				lWeaponBtn = this.mWeaponButtonList[i1];
				lWeaponModel = this.mWeaponList[i1];
				if(lPlayerWeaponItem.get_model() == lWeaponModel) {
					lWeaponBtn.enable();
				}
			}
		}
	}
	,updateWeaponIcons: function() {
		var lLength = this.mWeaponList.length;
		var lWeaponIconBtn = null;
		var lWeaponBtn = null;
		var lWeaponModel = 0;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lWeaponIconBtn = this.mWeaponIconList[i];
			lWeaponIconBtn.disable();
		}
		var _g2 = 0;
		var _g3 = lLength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lWeaponBtn = this.mWeaponButtonList[i1];
			lWeaponIconBtn = this.mWeaponIconList[i1];
			lWeaponModel = this.mWeaponList[i1];
			if(this.mPlayer.get_slot1() != null && this.mPlayer.get_slot1().get_model() == lWeaponModel || this.mPlayer.get_slot2() != null && this.mPlayer.get_slot2().get_model() == lWeaponModel) {
				lWeaponIconBtn.enable();
				lWeaponIconBtn.toggle(true);
			} else if(this.mWeaponSlot1Mark.get_visible() == false || this.mWeaponSlot2Mark.get_visible() == false) {
				lWeaponIconBtn.enable();
				lWeaponIconBtn.toggle(false);
			}
		}
	}
	,__class__: old_systems_uI_screens_ResScreen
});
var old_systems_uI_screens_SurvivorsScreen = function(uiSystem,transitionCallback,gameSystem) {
	this.lFontColorSearching = "#000066";
	this.lFontColorRepairing = "#006600";
	this.lFontColorFighting = "#660000";
	this.mTutorialSurvivorsSeen = false;
	this.mHint = null;
	this.mSlideTweener = null;
	this.mSelectedButton = null;
	this.mSelectedFrom = -1;
	this.mAssignToSearching = null;
	this.mAssignToRepairing = null;
	this.mAssignToShooting = null;
	this.mAssignToFree = null;
	this.mSurvivorsSearchingContainer = null;
	this.mSurvivorsSearchingArrayLabels = null;
	this.mSurvivorsSearchingArray = null;
	this.mSurvivorsRepairingContainer = null;
	this.mSurvivorsRepairingArrayLabels = null;
	this.mSurvivorsRepairingArray = null;
	this.mSurvivorsShootingContainer = null;
	this.mSurvivorsShootingArrayLabels = null;
	this.mSurvivorsShootingArray = null;
	this.mSurvivorsFreeContainer = null;
	this.mSurvivorsFreeArrayLabels = null;
	this.mSurvivorsFreeArray = null;
	this.mSearchingHint2Label = null;
	this.mRepairingHint2Label = null;
	this.mShootingHint2Label = null;
	this.mSearchingHintLabel = null;
	this.mRepairingHintLabel = null;
	this.mShootingHintLabel = null;
	this.mFreeHintLabel = null;
	this.mSurvivorsSearchingLabel = null;
	this.mSurvivorsRepairingLabel = null;
	this.mSurvivorsShootingLabel = null;
	this.mSurvivorsFreeLabel = null;
	this.mBackBtn = null;
	this.mScreenTitle = null;
	this.mPlayer = null;
	this.mGameSystem = null;
	old_systems_uI_UIScreen.call(this,uiSystem);
	this.mGameSystem = gameSystem;
	this.mPlayer = this.mGameSystem.get_player();
	var lBackground = old_MainOld.getInstance().builder.createAnimation("MenuBack");
	lBackground.gotoFrame(6);
	lBackground.stop();
	lBackground.set_scaleX(lBackground.set_scaleY(0.66666666666666663));
	this.mMainGraphics.set_scaleX(this.mMainGraphics.set_scaleY(2.));
	this.mMainGraphics.addChild(lBackground);
	this.mMainGraphics.set_x(-100);
	lBackground.set_x(50);
	this.mScreenTitle = new old_systems_uI_UILabel("Survivors",320,20,"Ampersand",24,3750201,true);
	this.mMainGraphics.addChild(this.mScreenTitle.get_mainGraphics());
	this.createLayout();
	this.mBackBtn = new old_systems_uI_UIButton(null,"Back",320,428,0,120,30,$bind(this,this.onBack));
	this.mMainGraphics.addChild(this.mBackBtn.get_mainGraphics());
	this.mSlideTweener = new old_helper_Tweener(this.mMainGraphics,$bind(this,this.onSlideTweener));
	this.mSlideTweener.addTween("Show","alpha",0,1,0.3,22);
	this.mSlideTweener.addTween("Hide","alpha",1,0,0.3,21);
	this.mHint = new old_systems_uI_UIHint();
	this.mMainGraphics.addChild(this.mHint.get_mainGraphics());
	this.addChildSystem(this.mHint);
};
$hxClasses["old.systems.uI.screens.SurvivorsScreen"] = old_systems_uI_screens_SurvivorsScreen;
old_systems_uI_screens_SurvivorsScreen.__name__ = "old.systems.uI.screens.SurvivorsScreen";
old_systems_uI_screens_SurvivorsScreen.__super__ = old_systems_uI_UIScreen;
old_systems_uI_screens_SurvivorsScreen.prototype = $extend(old_systems_uI_UIScreen.prototype,{
	mGameSystem: null
	,mPlayer: null
	,mScreenTitle: null
	,mBackBtn: null
	,mSurvivorsFreeLabel: null
	,mSurvivorsShootingLabel: null
	,mSurvivorsRepairingLabel: null
	,mSurvivorsSearchingLabel: null
	,mFreeHintLabel: null
	,mShootingHintLabel: null
	,mRepairingHintLabel: null
	,mSearchingHintLabel: null
	,mShootingHint2Label: null
	,mRepairingHint2Label: null
	,mSearchingHint2Label: null
	,mSurvivorsFreeArray: null
	,mSurvivorsFreeArrayLabels: null
	,mSurvivorsFreeContainer: null
	,mSurvivorsShootingArray: null
	,mSurvivorsShootingArrayLabels: null
	,mSurvivorsShootingContainer: null
	,mSurvivorsRepairingArray: null
	,mSurvivorsRepairingArrayLabels: null
	,mSurvivorsRepairingContainer: null
	,mSurvivorsSearchingArray: null
	,mSurvivorsSearchingArrayLabels: null
	,mSurvivorsSearchingContainer: null
	,mAssignToFree: null
	,mAssignToShooting: null
	,mAssignToRepairing: null
	,mAssignToSearching: null
	,mSelectedFrom: null
	,mSelectedButton: null
	,mSlideTweener: null
	,mHint: null
	,mTutorialSurvivorsSeen: null
	,slideIn: function(prevState) {
		if(prevState == null) {
			prevState = 0;
		}
		this.mSlideTweener.start("Show");
	}
	,slideOut: function(nextState) {
		if(nextState == null) {
			nextState = 0;
		}
		this.mSlideTweener.start("Hide");
	}
	,onSlideTweener: function(tweenSet) {
		if(tweenSet == "Show") {
			this.mTransitionSignal.emit(1,this);
		} else {
			this.afterHide();
			this.mTransitionSignal.emit(0,this);
		}
	}
	,beforeShow: function() {
		this.mSelectedButton = null;
		this.mSelectedFrom = -1;
		this.updateButtons();
		if(!this.mTutorialSurvivorsSeen) {
			this.mTutorialSurvivorsSeen = true;
			this.mHint.instaShowHint(10);
		}
	}
	,lFontColorFighting: null
	,lFontColorRepairing: null
	,lFontColorSearching: null
	,createLayout: function() {
		this.mSurvivorsFreeLabel = new old_systems_uI_UILabel("Unassigned",120,63,"Ampersand",18,3750201,true);
		this.mMainGraphics.addChild(this.mSurvivorsFreeLabel.get_mainGraphics());
		this.mSurvivorsShootingLabel = new old_systems_uI_UILabel("Shooting",120,173,"Ampersand",18,3750201,true);
		this.mMainGraphics.addChild(this.mSurvivorsShootingLabel.get_mainGraphics());
		this.mSurvivorsRepairingLabel = new old_systems_uI_UILabel("Repairing",120,253,"Ampersand",18,3750201,true);
		this.mMainGraphics.addChild(this.mSurvivorsRepairingLabel.get_mainGraphics());
		this.mSurvivorsSearchingLabel = new old_systems_uI_UILabel("Search party",120,333,"Ampersand",18,3750201,true);
		this.mMainGraphics.addChild(this.mSurvivorsSearchingLabel.get_mainGraphics());
		this.mAssignToFree = new old_systems_uI_UIButton(null,"",this.mSurvivorsFreeLabel.get_x(),60,0,120,90,$bind(this,this.onAssignToGroup));
		this.mAssignToFree.set_id(0);
		this.mMainGraphics.addChild(this.mAssignToFree.get_mainGraphics());
		this.mAssignToShooting = new old_systems_uI_UIButton(null,"",this.mSurvivorsShootingLabel.get_x(),170,0,120,60,$bind(this,this.onAssignToGroup));
		this.mAssignToShooting.set_id(1);
		this.mMainGraphics.addChild(this.mAssignToShooting.get_mainGraphics());
		this.mAssignToRepairing = new old_systems_uI_UIButton(null,"",this.mSurvivorsRepairingLabel.get_x(),250,0,120,60,$bind(this,this.onAssignToGroup));
		this.mAssignToRepairing.set_id(2);
		this.mMainGraphics.addChild(this.mAssignToRepairing.get_mainGraphics());
		this.mAssignToSearching = new old_systems_uI_UIButton(null,"",this.mSurvivorsSearchingLabel.get_x(),330,0,120,85,$bind(this,this.onAssignToGroup));
		this.mAssignToSearching.set_id(3);
		this.mMainGraphics.addChild(this.mAssignToSearching.get_mainGraphics());
		this.mFreeHintLabel = new old_systems_uI_UILabel("",190,98,"Ampersand",18,3750201,true,false,"left",-1,410);
		this.mMainGraphics.addChild(this.mFreeHintLabel.get_mainGraphics());
		this.mShootingHintLabel = new old_systems_uI_UILabel("",190,213,"Ampersand",18,3750201,true,false,"left",-1,410);
		this.mMainGraphics.addChild(this.mShootingHintLabel.get_mainGraphics());
		this.mRepairingHintLabel = new old_systems_uI_UILabel("",190,293,"Ampersand",18,3750201,true,false,"left",-1,410);
		this.mMainGraphics.addChild(this.mRepairingHintLabel.get_mainGraphics());
		this.mSearchingHintLabel = new old_systems_uI_UILabel("",190,373,"Ampersand",18,3750201,true,false,"left",-1,410);
		this.mMainGraphics.addChild(this.mSearchingHintLabel.get_mainGraphics());
		this.mShootingHint2Label = new old_systems_uI_UILabel("",395,165,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mMainGraphics.addChild(this.mShootingHint2Label.get_mainGraphics());
		this.mRepairingHint2Label = new old_systems_uI_UILabel("",395,245,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mMainGraphics.addChild(this.mRepairingHint2Label.get_mainGraphics());
		this.mSearchingHint2Label = new old_systems_uI_UILabel("",395,325,"Ampersand",18,3750201,true,false,"left",-1,400);
		this.mMainGraphics.addChild(this.mSearchingHint2Label.get_mainGraphics());
		var lSurvivors = this.mPlayer.get_survivors();
		this.mSurvivorsFreeArray = [];
		this.mSurvivorsFreeArrayLabels = [];
		this.mSurvivorsFreeContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsFreeContainer.set_x(210);
		this.mSurvivorsFreeContainer.set_y(60);
		this.mMainGraphics.addChild(this.mSurvivorsFreeContainer);
		this.mSurvivorsShootingArray = [];
		this.mSurvivorsShootingArrayLabels = [];
		this.mSurvivorsShootingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsShootingContainer.set_x(210);
		this.mSurvivorsShootingContainer.set_y(170);
		this.mMainGraphics.addChild(this.mSurvivorsShootingContainer);
		this.mSurvivorsRepairingArray = [];
		this.mSurvivorsRepairingArrayLabels = [];
		this.mSurvivorsRepairingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsRepairingContainer.set_x(210);
		this.mSurvivorsRepairingContainer.set_y(250);
		this.mMainGraphics.addChild(this.mSurvivorsRepairingContainer);
		this.mSurvivorsSearchingArray = [];
		this.mSurvivorsSearchingArrayLabels = [];
		this.mSurvivorsSearchingContainer = old_MainOld.getInstance().builder.createSprite();
		this.mSurvivorsSearchingContainer.set_x(210);
		this.mSurvivorsSearchingContainer.set_y(330);
		this.mMainGraphics.addChild(this.mSurvivorsSearchingContainer);
		var lSurvivorGraphic = null;
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var j = -1;
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			if(i % 10 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i);
			lSurvivorButton.set_name("free");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i % 10 * 40);
			lSurvivorGraphic.container.set_y(j * 49);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsFreeArray.push(lSurvivorGraphic);
			this.mSurvivorsFreeContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i % 10 * 40 - 9,j * 49 + 27,"Ampersand",12,3750201,false,false,"center",0,32);
			this.mSurvivorsFreeArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsFreeContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g1 = 0;
		while(_g1 < 7) {
			var i1 = _g1++;
			if(i1 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i1);
			lSurvivorButton.set_name("shooting");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i1 % 7 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsShootingArray.push(lSurvivorGraphic);
			this.mSurvivorsShootingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i1 % 8 * 40 - 9,j * 35 + 27,"Ampersand",12,3750201,false,false,"center",0,32);
			this.mSurvivorsShootingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsShootingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g2 = 0;
		while(_g2 < 7) {
			var i2 = _g2++;
			if(i2 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i2);
			lSurvivorButton.set_name("repairing");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i2 % 7 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsRepairingArray.push(lSurvivorGraphic);
			this.mSurvivorsRepairingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i2 % 8 * 40 - 9,j * 35 + 27,"Ampersand",12,3750201,false,false,"center",0,32);
			this.mSurvivorsRepairingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsRepairingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
		j = -1;
		var _g3 = 0;
		while(_g3 < 7) {
			var i3 = _g3++;
			if(i3 % 7 == 0) {
				++j;
			}
			lSurvivorButton = new old_systems_uI_UIButton("UISurvivorsButton","",0,0,0,45,50,$bind(this,this.onSurvivorSelected),$bind(this,this.onSurvivorOver),true);
			lSurvivorButton.set_id(i3);
			lSurvivorButton.set_name("searching");
			lSurvivorButton.set_descriptionIdle("<font color=\"" + this.lFontColorFighting + "\">2</font> <font color=\"" + this.lFontColorRepairing + "\">1</font> <font color=\"" + this.lFontColorSearching + "\">3</font>");
			lSurvivorGraphic = new old_entities_friendlies_SurvGraphics();
			lSurvivorGraphic.container.set_x(i3 % 7 * 40);
			lSurvivorGraphic.container.set_y(j * 35);
			lSurvivorGraphic.set_btn(lSurvivorButton);
			this.mSurvivorsSearchingArray.push(lSurvivorGraphic);
			this.mSurvivorsSearchingContainer.addChild(lSurvivorGraphic.container);
			lSurvivorLabel = new old_systems_uI_UILabel(lSurvivorButton.get_descriptionIdle(),i3 % 8 * 40 - 9,j * 35 + 27,"Ampersand",12,3750201,false,false,"center",0,32);
			this.mSurvivorsSearchingArrayLabels.push(lSurvivorLabel);
			this.mSurvivorsSearchingContainer.addChild(lSurvivorLabel.get_mainGraphics());
		}
	}
	,onBack: function(state,button) {
		AdManager.showAd();
		this.mPlayer.get_survivors().save();
		this.mPlayer.get_friendliesSystem().createFriendlies();
		this.dispatchEvent(new old_events_UIEvent(old_events_UIEvent.SWAP_TO,4));
	}
	,onSurvivorOver: function(state,button) {
	}
	,onSurvivorSelected: function(state,button) {
		haxe_Log.trace("onSurvivorSelected " + (state == null ? "null" : "" + state),{ fileName : "src/old/systems/uI/screens/SurvivorsScreen.hx", lineNumber : 374, className : "old.systems.uI.screens.SurvivorsScreen", methodName : "onSurvivorSelected"});
		haxe_Log.trace("button " + Std.string(button.get_toggleable()),{ fileName : "src/old/systems/uI/screens/SurvivorsScreen.hx", lineNumber : 375, className : "old.systems.uI.screens.SurvivorsScreen", methodName : "onSurvivorSelected"});
		if(state) {
			this.mSelectedFrom = (js_Boot.__cast(button.get_data() , old_entities_survivors_Survivor)).get_category();
			if(this.mSelectedButton != null) {
				this.mSelectedButton.toggle(false);
			}
			this.mSelectedButton = button;
		} else {
			this.mSelectedButton = null;
			this.mSelectedFrom = -1;
		}
		this.updateButtons();
	}
	,onAssignToGroup: function(state,button) {
		haxe_Log.trace("onAssignToGroup",{ fileName : "src/old/systems/uI/screens/SurvivorsScreen.hx", lineNumber : 397, className : "old.systems.uI.screens.SurvivorsScreen", methodName : "onAssignToGroup"});
		var lSurvivors = this.mPlayer.get_survivors();
		var lSurvivor = null;
		if(this.mSelectedButton.get_data() == null) {
			return;
		}
		try {
			lSurvivor = js_Boot.__cast(this.mSelectedButton.get_data() , old_entities_survivors_Survivor);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			lSurvivor = null;
		}
		lSurvivors.changeCategory(lSurvivor,lSurvivor.get_category(),button.get_id());
		this.mSelectedButton.toggle(false);
		this.mSelectedButton = null;
		this.mSelectedFrom = -1;
		this.updateButtons();
	}
	,updateButtons: function() {
		var lSurvivor = null;
		var lSurvivorButton = null;
		var lSurvivorLabel = null;
		var lLength = 0;
		var lLength2 = 0;
		var lSurvivors = this.mPlayer.get_survivors();
		lLength = this.mSurvivorsFreeArray.length;
		lLength2 = lSurvivors.getCategory(0).length;
		var _g = 0;
		var _g1 = lLength;
		while(_g < _g1) {
			var i = _g++;
			lSurvivorButton = this.mSurvivorsFreeArray[i].get_btn();
			this.mSurvivorsFreeArray[i].disable(0);
			this.mSurvivorsFreeArray[i].get_frameContent().gotoFrame(1);
			this.mSurvivorsFreeArray[i].get_frameContent().stop();
			lSurvivorLabel = this.mSurvivorsFreeArrayLabels[i];
			lSurvivorLabel.set_visible(false);
		}
		var _g2 = 0;
		var _g3 = lLength2;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lSurvivor = lSurvivors.getSurvivor(i1,0);
			lSurvivorButton = this.mSurvivorsFreeArray[i1].get_btn();
			this.mSurvivorsFreeArray[i1].enable(1);
			this.mSurvivorsFreeArray[i1].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			this.mSurvivorsFreeArray[i1].get_frameContent().stop();
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsFreeArrayLabels[i1];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsShootingArray.length;
		lLength2 = lSurvivors.getCategory(1).length;
		var _g4 = 0;
		var _g5 = lLength;
		while(_g4 < _g5) {
			var i2 = _g4++;
			lSurvivorButton = this.mSurvivorsShootingArray[i2].get_btn();
			this.mSurvivorsShootingArray[i2].disable(0);
			this.mSurvivorsShootingArray[i2].get_frameContent().gotoFrame(1);
			this.mSurvivorsShootingArray[i2].get_frameContent().stop();
			lSurvivorLabel = this.mSurvivorsShootingArrayLabels[i2];
			lSurvivorLabel.set_visible(false);
		}
		var _g6 = 0;
		var _g7 = lLength2;
		while(_g6 < _g7) {
			var i3 = _g6++;
			lSurvivor = lSurvivors.getSurvivor(i3,1);
			lSurvivorButton = this.mSurvivorsShootingArray[i3].get_btn();
			this.mSurvivorsShootingArray[i3].enable(1);
			this.mSurvivorsShootingArray[i3].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			this.mSurvivorsShootingArray[i3].get_frameContent().stop();
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsShootingArrayLabels[i3];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsRepairingArray.length;
		lLength2 = lSurvivors.getCategory(2).length;
		var _g8 = 0;
		var _g9 = lLength;
		while(_g8 < _g9) {
			var i4 = _g8++;
			lSurvivorButton = this.mSurvivorsRepairingArray[i4].get_btn();
			this.mSurvivorsRepairingArray[i4].disable(0);
			this.mSurvivorsRepairingArray[i4].get_frameContent().gotoFrame(1);
			this.mSurvivorsRepairingArray[i4].get_frameContent().stop();
			lSurvivorLabel = this.mSurvivorsRepairingArrayLabels[i4];
			lSurvivorLabel.set_visible(false);
		}
		var _g10 = 0;
		var _g11 = lLength2;
		while(_g10 < _g11) {
			var i5 = _g10++;
			lSurvivor = lSurvivors.getSurvivor(i5,2);
			lSurvivorButton = this.mSurvivorsRepairingArray[i5].get_btn();
			this.mSurvivorsRepairingArray[i5].enable(1);
			this.mSurvivorsRepairingArray[i5].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			this.mSurvivorsRepairingArray[i5].get_frameContent().stop();
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsRepairingArrayLabels[i5];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		lLength = this.mSurvivorsSearchingArray.length;
		lLength2 = lSurvivors.getCategory(3).length;
		var _g12 = 0;
		var _g13 = lLength;
		while(_g12 < _g13) {
			var i6 = _g12++;
			lSurvivorButton = this.mSurvivorsSearchingArray[i6].get_btn();
			this.mSurvivorsSearchingArray[i6].disable(0);
			this.mSurvivorsSearchingArray[i6].get_frameContent().gotoFrame(1);
			this.mSurvivorsSearchingArray[i6].get_frameContent().stop();
			lSurvivorLabel = this.mSurvivorsSearchingArrayLabels[i6];
			lSurvivorLabel.set_visible(false);
		}
		var _g14 = 0;
		var _g15 = lLength2;
		while(_g14 < _g15) {
			var i7 = _g14++;
			lSurvivor = lSurvivors.getSurvivor(i7,3);
			lSurvivorButton = this.mSurvivorsSearchingArray[i7].get_btn();
			this.mSurvivorsSearchingArray[i7].enable(1);
			this.mSurvivorsSearchingArray[i7].get_frameContent().gotoFrame(lSurvivor.get_id() + 1);
			this.mSurvivorsSearchingArray[i7].get_frameContent().stop();
			lSurvivorButton.set_data(lSurvivor);
			lSurvivorLabel = this.mSurvivorsSearchingArrayLabels[i7];
			lSurvivorLabel.set_visible(true);
			lSurvivorLabel.set_text("<font color=\"" + this.lFontColorFighting + "\">" + lSurvivor.get_skillFighting() + "</font> <font color=\"" + this.lFontColorRepairing + "\">" + lSurvivor.get_skillRepairing() + "</font> <font color=\"" + this.lFontColorSearching + "\">" + lSurvivor.get_skillSearching() + "</font>");
		}
		this.mAssignToFree.enable(1);
		this.mAssignToShooting.enable(1);
		this.mAssignToRepairing.enable(1);
		this.mAssignToSearching.enable(1);
		haxe_Log.trace("mSelectedFrom " + this.mSelectedFrom,{ fileName : "src/old/systems/uI/screens/SurvivorsScreen.hx", lineNumber : 543, className : "old.systems.uI.screens.SurvivorsScreen", methodName : "updateButtons"});
		if(this.mSelectedFrom == 0) {
			this.mAssignToFree.disable(0.25);
		} else if(this.mSelectedFrom == 1) {
			this.mAssignToShooting.disable(0.25);
		} else if(this.mSelectedFrom == 2) {
			this.mAssignToRepairing.disable(0.25);
		} else if(this.mSelectedFrom == 3) {
			this.mAssignToSearching.disable(0.25);
		} else if(this.mSelectedFrom == -1) {
			this.mAssignToFree.disable(0.25);
			this.mAssignToShooting.disable(0.25);
			this.mAssignToRepairing.disable(0.25);
			this.mAssignToSearching.disable(0.25);
		}
		if(lSurvivors.isLimitReached(1)) {
			this.mAssignToShooting.disable(0.25);
		}
		if(lSurvivors.isLimitReached(2)) {
			this.mAssignToRepairing.disable(0.25);
		}
		if(lSurvivors.isLimitReached(3)) {
			this.mAssignToSearching.disable(0.25);
		}
		var lShootPartyShootSkill = lSurvivors.getTotalFightSkill(1);
		var lRepairPartyRepairSkill = lSurvivors.getTotalRepairSkill(2);
		var lSearchPartyFightSkill = lSurvivors.getTotalFightSkill(3);
		var lSearchPartySearchSkill = lSurvivors.getTotalSearchSkill(3);
		var lTopFightSkill = lSurvivors.getTopFightSkill();
		var lTopRepairSkill = lSurvivors.getTopRepairSkill();
		var lTopSearchSkill = lSurvivors.getTopSearchSkill();
		var lFightPartySize = lSurvivors.getCategory(1).length;
		var lRepairPartySize = lSurvivors.getCategory(2).length;
		var lSearchPartySize = lSurvivors.getCategory(3).length;
		var lSearchPartyFightValue = lSearchPartyFightSkill / lSearchPartySize;
		var lSearchPartySearchValue = lSearchPartySearchSkill / 1;
		var lFightGrade = 0;
		var lSearchGrade = 0;
		var lFightText;
		var lSearchText;
		if(lFightPartySize == 0) {
			this.mShootingHintLabel.set_text("Summary: Shooting party is empty");
			this.mShootingHint2Label.set_text("");
		} else if(lFightPartySize == 1) {
			this.mShootingHint2Label.set_text("Shooting efficiency: <font color=\"" + "#661111" + "\">" + lShootPartyShootSkill + "/" + lTopFightSkill + "</font>");
			this.mShootingHintLabel.set_text("Summary: <font color=\"" + "#661111" + "\">" + lFightPartySize + "</font> shooter is defending the house");
		} else {
			this.mShootingHint2Label.set_text("Shooting efficiency: <font color=\"" + "#661111" + "\">" + lShootPartyShootSkill + "/" + lTopFightSkill + "</font>");
			this.mShootingHintLabel.set_text("Summary: <font color=\"" + "#661111" + "\">" + lFightPartySize + "</font> shooters are defending the house");
		}
		if(lRepairPartySize == 0) {
			this.mRepairingHintLabel.set_text("Summary: Repair party is empty");
			this.mRepairingHint2Label.set_text("");
		} else {
			this.mRepairingHint2Label.set_text("Repairing efficiency: <font color=\"" + "#661111" + "\">" + lRepairPartyRepairSkill + "/" + lTopRepairSkill + "</font>");
			this.mRepairingHintLabel.set_text("Summary: Repair party provides <font color=\"" + "#661111" + "\">" + lRepairPartyRepairSkill * 2 + "%</font> damage resistance");
		}
		if(lSearchPartySize == 0) {
			this.mSearchingHintLabel.set_text("Summary: Search party is empty. You need at least one member to be able to search the area!");
			this.mSearchingHint2Label.set_text("");
		} else {
			this.mSearchingHint2Label.set_text("Defense efficiency: <font color=\"" + "#661111" + "\">" + lSearchPartyFightSkill + "/" + lTopFightSkill + "</font>\nSearch efficiency:  <font color=\"" + "#661111" + "\">" + lSearchPartySearchSkill + "/" + lTopSearchSkill + "</font>");
			if(lSearchPartyFightValue >= 2.5) {
				lFightText = "Search party is relatively <font color=\"" + "#661111" + "\">safe</font>";
				lFightGrade = 4;
			} else if(lSearchPartyFightValue >= 2) {
				lFightText = "Search party is <font color=\"" + "#661111" + "\">relatively well protected</font>";
				lFightGrade = 3;
			} else if(lSearchPartyFightValue >= 1) {
				lFightText = "Search party is <font color=\"" + "#661111" + "\">poorly protected</font>";
				lFightGrade = 2;
			} else {
				lFightText = "Search party is <font color=\"" + "#661111" + "\">almost unprotected</font>";
				lFightGrade = 1;
			}
			if(lSearchPartySearchValue >= 9) {
				lSearchText = "has a <font color=\"" + "#661111" + "\">good chance</font> to find something useful.";
				lSearchGrade = 4;
			} else if(lSearchPartySearchValue >= 6) {
				lSearchText = "has a <font color=\"" + "#661111" + "\">relatively good chance</font> to find something useful.";
				lSearchGrade = 3;
			} else if(lSearchPartySearchValue >= 3) {
				lSearchText = "has a <font color=\"" + "#661111" + "\">relatively poor chance</font> to find something useful.";
				lSearchGrade = 2;
			} else {
				lSearchText = "has a <font color=\"" + "#661111" + "\">weak chance</font> to find something useful.";
				lSearchGrade = 1;
			}
			this.mSearchingHintLabel.set_text("Summary: " + lFightText);
			if(lFightGrade > 2 && lSearchGrade > 2 || lFightGrade < 3 && lSearchGrade < 3) {
				var _g16 = this.mSearchingHintLabel;
				_g16.set_text(_g16.get_text() + (" and " + lSearchText));
			} else {
				var _g161 = this.mSearchingHintLabel;
				_g161.set_text(_g161.get_text() + (" but " + lSearchText));
			}
		}
	}
	,update: function(dt) {
		this.mSlideTweener.update(dt);
	}
	,__class__: old_systems_uI_screens_SurvivorsScreen
});
var old_uk_co_bigroom_geom_Vector2D = function(a,b) {
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 0;
	}
	this.x = a;
	this.y = b;
};
$hxClasses["old.uk.co.bigroom.geom.Vector2D"] = old_uk_co_bigroom_geom_Vector2D;
old_uk_co_bigroom_geom_Vector2D.__name__ = "old.uk.co.bigroom.geom.Vector2D";
old_uk_co_bigroom_geom_Vector2D.polar = function(len,angle) {
	return new old_uk_co_bigroom_geom_Vector2D(len * Math.cos(angle),len * Math.sin(angle));
};
old_uk_co_bigroom_geom_Vector2D.interpolate = function(v1,v2,f) {
	return v2.add(v1.subtract(v2).multiply(f));
};
old_uk_co_bigroom_geom_Vector2D.distance = function(v1,v2) {
	return Math.sqrt(old_uk_co_bigroom_geom_Vector2D.distanceSquared(v1,v2));
};
old_uk_co_bigroom_geom_Vector2D.distanceSquared = function(u,v) {
	var dx = u.x - v.x;
	var dy = u.y - v.y;
	return dx * dx + dy * dy;
};
old_uk_co_bigroom_geom_Vector2D.fromPoint = function(pt) {
	return new old_uk_co_bigroom_geom_Vector2D(pt.x,pt.y);
};
old_uk_co_bigroom_geom_Vector2D.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.get_lengthSquared());
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,get_angle: function() {
		return (Math.atan2(this.y,this.x) * (180 / Math.PI) + 360) % 360;
	}
	,toPoint: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,reset: function(a,b) {
		if(b == null) {
			b = 0;
		}
		if(a == null) {
			a = 0;
		}
		this.x = a;
		this.y = b;
		return this;
	}
	,assign: function(v) {
		this.x = v.x;
		this.y = v.y;
		return this;
	}
	,clone: function() {
		return new old_uk_co_bigroom_geom_Vector2D(this.x,this.y);
	}
	,add: function(v) {
		return new old_uk_co_bigroom_geom_Vector2D(this.x + v.x,this.y + v.y);
	}
	,subtract: function(v) {
		return new old_uk_co_bigroom_geom_Vector2D(this.x - v.x,this.y - v.y);
	}
	,multiply: function(s) {
		return new old_uk_co_bigroom_geom_Vector2D(this.x * s,this.y * s);
	}
	,divide: function(s) {
		return this.multiply(1 / s);
	}
	,incrementBy: function(v) {
		this.x += v.x;
		this.y += v.y;
		return this;
	}
	,decrementBy: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		return this;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		return this;
	}
	,divideBy: function(s) {
		this.x /= s;
		this.y /= s;
		return this;
	}
	,rotate: function(angle) {
		var newAngle = Math.atan2(this.y,this.x) + angle;
		return old_uk_co_bigroom_geom_Vector2D.polar(this.get_length(),newAngle);
	}
	,rotateBy: function(angle) {
		var newAngle = Math.atan2(this.y,this.x) + angle;
		var len = this.get_length();
		this.x = len * Math.cos(newAngle);
		this.y = len * Math.sin(newAngle);
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x) {
			return this.y == v.y;
		} else {
			return false;
		}
	}
	,nearEquals: function(v,e) {
		return this.subtract(v).get_lengthSquared() <= e * e;
	}
	,dotProduct: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,negative: function() {
		return new old_uk_co_bigroom_geom_Vector2D(-this.x,-this.y);
	}
	,perpendicular: function() {
		return new old_uk_co_bigroom_geom_Vector2D(-this.y,this.x);
	}
	,normalize: function() {
		var s = this.get_length();
		if(s != 0) {
			s = 1 / s;
			this.x *= s;
			this.y *= s;
		} else {
			this.x = 0;
			this.y = 0;
		}
		return this;
	}
	,reflect: function(v) {
		var lTempVector = new old_uk_co_bigroom_geom_Vector2D(v.x,v.y);
		lTempVector.normalize();
		var lDotProduct = this.dotProduct(lTempVector);
		lTempVector.scaleBy(lDotProduct);
		lTempVector.scaleBy(2);
		this.decrementBy(lTempVector);
		return this;
	}
	,unit: function() {
		return this.clone().normalize();
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__class__: old_uk_co_bigroom_geom_Vector2D
	,__properties__: {get_angle:"get_angle",get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	if(name == null) {
		return null;
	}
	return $hxClasses[name];
};
openfl_Lib.getQualifiedClassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		if(typeof(value) == "boolean" || value == Bool) {
			return "Bool";
		} else if(typeof(value) == "number" && ((value | 0) === value) || value == Int) {
			return "Int";
		} else if(typeof(value) == "number" || value == Float) {
			return "Float";
		} else {
			return null;
		}
	}
	return ref.__name__;
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		return null;
	}
	var parentRef = ref.__super__;
	if(parentRef == null) {
		return null;
	}
	return parentRef.__name__;
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,$window) {
	if($window == null) {
		$window = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,$window);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args == null ? [] : args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "openfl/Lib.hx", lineNumber : 573, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_BoolVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_BoolVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_BoolVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FloatVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FloatVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FunctionVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FunctionVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_IntVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_IntVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_IntVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_IntVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = "openfl._internal.Lib";
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl__$internal_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl__$internal_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl__$internal_formats_agal_AGALConverter = function() { };
$hxClasses["openfl._internal.formats.agal.AGALConverter"] = openfl__$internal_formats_agal_AGALConverter;
openfl__$internal_formats_agal_AGALConverter.__name__ = "openfl._internal.formats.agal.AGALConverter";
openfl__$internal_formats_agal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_formats_agal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_formats_agal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX : openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_formats_agal_RegisterMap();
	var sb_b = "";
	while(true) {
		var a = agal.position;
		if(!_$UInt_UInt_$Impl_$.gt(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal),a)) {
			break;
		}
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_formats_agal_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "precision highp float;\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_formats_agal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.DestRegister"] = openfl__$internal_formats_agal__$AGALConverter_DestRegister;
openfl__$internal_formats_agal__$AGALConverter_DestRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.DestRegister";
openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_formats_agal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_formats_agal__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_DestRegister
};
var openfl__$internal_formats_agal__$AGALConverter_ProgramType = $hxEnums["openfl._internal.formats.agal._AGALConverter.ProgramType"] = { __ename__ : "openfl._internal.formats.agal._AGALConverter.ProgramType", __constructs__ : ["VERTEX","FRAGMENT"]
	,VERTEX: {_hx_index:0,__enum__:"openfl._internal.formats.agal._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_index:1,__enum__:"openfl._internal.formats.agal._AGALConverter.ProgramType",toString:$estr}
};
var openfl__$internal_formats_agal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.formats.agal.RegisterMap"] = openfl__$internal_formats_agal_RegisterMap;
openfl__$internal_formats_agal_RegisterMap.__name__ = "openfl._internal.formats.agal.RegisterMap";
openfl__$internal_formats_agal_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb_b = "";
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage._hx_index) {
			case 0:
				lime_utils_Log.info("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/_internal/formats/agal/AGALConverter.hx", lineNumber : 746, className : "openfl._internal.formats.agal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_formats_agal_RegisterMap
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterMapEntry"] = openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry;
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.__name__ = "openfl._internal.formats.agal._AGALConverter.RegisterMapEntry";
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterUsage = $hxEnums["openfl._internal.formats.agal._AGALConverter.RegisterUsage"] = { __ename__ : "openfl._internal.formats.agal._AGALConverter.RegisterUsage", __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","SAMPLER_CUBE_ALPHA","VECTOR_4_ARRAY"]
	,UNUSED: {_hx_index:0,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_index:1,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_index:2,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_index:3,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_index:4,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_index:5,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE_ALPHA: {_hx_index:6,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_index:7,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
};
var openfl__$internal_formats_agal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SamplerRegister"] = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister;
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.SamplerRegister";
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b1 = 56;
	b1 &= 63;
	var a1;
	if(b1 == 0) {
		var this4 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this4;
	} else if(b1 < 32) {
		var this5 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a1 = this5;
	} else {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a1 = this6;
	}
	var b_high1 = 0;
	var b_low1 = 15;
	var this_high1 = a1.high & b_high1;
	var this_low1 = a1.low & b_low1;
	sr.m = this_low1;
	var b2 = 52;
	b2 &= 63;
	var a2;
	if(b2 == 0) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this7;
	} else if(b2 < 32) {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a2 = this8;
	} else {
		var this9 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a2 = this9;
	}
	var b_high2 = 0;
	var b_low2 = 15;
	var this_high2 = a2.high & b_high2;
	var this_low2 = a2.low & b_low2;
	sr.w = this_low2;
	var b3 = 48;
	b3 &= 63;
	var a3;
	if(b3 == 0) {
		var this10 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this10;
	} else if(b3 < 32) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a3 = this11;
	} else {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a3 = this12;
	}
	var b_high3 = 0;
	var b_low3 = 15;
	var this_high3 = a3.high & b_high3;
	var this_low3 = a3.low & b_low3;
	sr.s = this_low3;
	var b4 = 44;
	b4 &= 63;
	var a4;
	if(b4 == 0) {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this13;
	} else if(b4 < 32) {
		var this14 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a4 = this14;
	} else {
		var this15 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a4 = this15;
	}
	var b_high4 = 0;
	var b_low4 = 15;
	var this_high4 = a4.high & b_high4;
	var this_low4 = a4.low & b_low4;
	sr.d = this_low4;
	var b5 = 40;
	b5 &= 63;
	var a5;
	if(b5 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this16;
	} else if(b5 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a5 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a5 = this18;
	}
	var b_high5 = 0;
	var b_low5 = 15;
	var this_high5 = a5.high & b_high5;
	var this_low5 = a5.low & b_low5;
	sr.t = this_low5;
	var b6 = 32;
	b6 &= 63;
	var a6;
	if(b6 == 0) {
		var this19 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a6 = this19;
	} else if(b6 < 32) {
		var this20 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a6 = this20;
	} else {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a6 = this21;
	}
	var b_high6 = 0;
	var b_low6 = 15;
	var this_high6 = a6.high & b_high6;
	var this_low6 = a6.low & b_low6;
	sr.type = this_low6;
	var b7 = 16;
	b7 &= 63;
	var a7;
	if(b7 == 0) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = this22;
	} else if(b7 < 32) {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
		a7 = this23;
	} else {
		var this24 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
		a7 = this24;
	}
	var b_high7 = 0;
	var b_low7 = 255;
	var this_high7 = a7.high & b_high7;
	var this_low7 = a7.low & b_low7;
	sr.b = this_low7;
	var b_high8 = 0;
	var b_low8 = 65535;
	var this_high8 = v.high & b_high8;
	var this_low8 = v.low & b_low8;
	sr.n = this_low8;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		switch(this.f) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl__$internal_renderer_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SamplerRegister
};
var openfl__$internal_formats_agal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SourceRegister"] = openfl__$internal_formats_agal__$AGALConverter_SourceRegister;
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.SourceRegister";
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b1 = 48;
	b1 &= 63;
	var a1;
	if(b1 == 0) {
		var this4 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this4;
	} else if(b1 < 32) {
		var this5 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a1 = this5;
	} else {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a1 = this6;
	}
	var b_high1 = 0;
	var b_low1 = 3;
	var this_high1 = a1.high & b_high1;
	var this_low1 = a1.low & b_low1;
	sr.q = this_low1;
	var b2 = 40;
	b2 &= 63;
	var a2;
	if(b2 == 0) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this7;
	} else if(b2 < 32) {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a2 = this8;
	} else {
		var this9 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a2 = this9;
	}
	var b_high2 = 0;
	var b_low2 = 15;
	var this_high2 = a2.high & b_high2;
	var this_low2 = a2.low & b_low2;
	sr.itype = this_low2;
	var b3 = 32;
	b3 &= 63;
	var a3;
	if(b3 == 0) {
		var this10 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this10;
	} else if(b3 < 32) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a3 = this11;
	} else {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a3 = this12;
	}
	var b_high3 = 0;
	var b_low3 = 15;
	var this_high3 = a3.high & b_high3;
	var this_low3 = a3.low & b_low3;
	sr.type = this_low3;
	var b4 = 24;
	b4 &= 63;
	var a4;
	if(b4 == 0) {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this13;
	} else if(b4 < 32) {
		var this14 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a4 = this14;
	} else {
		var this15 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a4 = this15;
	}
	var b_high4 = 0;
	var b_low4 = 255;
	var this_high4 = a4.high & b_high4;
	var this_low4 = a4.low & b_low4;
	sr.s = this_low4;
	var b5 = 16;
	b5 &= 63;
	var a5;
	if(b5 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this16;
	} else if(b5 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a5 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a5 = this18;
	}
	var b_high5 = 0;
	var b_low5 = 255;
	var this_high5 = a5.high & b_high5;
	var this_low5 = a5.low & b_low5;
	sr.o = this_low5;
	var b_high6 = 0;
	var b_low6 = 65535;
	var this_high6 = v.high & b_high6;
	var this_low6 = v.low & b_low6;
	sr.n = this_low6;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = "";
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			}
			var indexRegister = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SourceRegister
};
var openfl__$internal_formats_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(_$UInt_UInt_$Impl_$.gt(js_Boot.__cast(byteArrayOffset + length , Int),openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data))) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.formats.atf.ATFReader"] = openfl__$internal_formats_atf_ATFReader;
openfl__$internal_formats_atf_ATFReader.__name__ = "openfl._internal.formats.atf.ATFReader";
openfl__$internal_formats_atf_ATFReader.prototype = {
	atfFormat: null
	,cubeMap: null
	,data: null
	,height: null
	,mipCount: null
	,version: null
	,width: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >>> 7;
		if(!cubeMap && type != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		this.atfFormat = tdata & 127;
		if(this.atfFormat != 3 && this.atfFormat != 5) {
			lime_utils_Log.warn("Only ATF block compressed textures without JPEG-XR+LZMA are supported",{ fileName : "openfl/_internal/formats/atf/ATFReader.hx", lineNumber : 96, className : "openfl._internal.formats.atf.ATFReader", methodName : "readHeader"});
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return this.atfFormat == 5;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g = 0;
		var _g1 = sideCount;
		while(_g < _g1) {
			var side = _g++;
			var _g2 = 0;
			var _g11 = this.mipCount;
			while(_g2 < _g11) {
				var level = _g2++;
				var _g3 = 0;
				var _g12 = gpuFormats;
				while(_g3 < _g12) {
					var gpuFormat = _g3++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data))) {
						throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						var this1 = this.data;
						var bytes1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
						var offset = 0;
						var length = blockLength;
						if(length == null) {
							length = 0;
						}
						if(offset == null) {
							offset = 0;
						}
						this1.readBytes(bytes1,offset,length);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,bytes);
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl__$internal_formats_atf_ATFReader
};
var openfl__$internal_formats_html_HTMLParser = function() { };
$hxClasses["openfl._internal.formats.html.HTMLParser"] = openfl__$internal_formats_html_HTMLParser;
openfl__$internal_formats_html_HTMLParser.__name__ = "openfl._internal.formats.html.HTMLParser";
openfl__$internal_formats_html_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var _g = 0;
		var _g1 = segments.length;
		while(_g < _g1) {
			var i = _g++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagStack.length == 0 || tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					lime_utils_Log.info("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "openfl/_internal/formats/html/HTMLParser.hx", lineNumber : 97, className : "openfl._internal.formats.html.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
					var tmp = textFormatRanges.get(textFormatRanges.get_length() - 1);
					tmp.end++;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl__$internal_formats_html_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_formats_html_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexFace);
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexColor));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexAlign.match(segment1)) {
							var align = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(align);
						}
						break;
					case "textformat":
						if(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g21 = 0;
							while(_g21 < values.length) {
								var stop = values[_g21];
								++_g21;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					} else if(textFormatRanges.get_length() > 0) {
						var tmp1 = textFormatRanges.get(textFormatRanges.get_length() - 1);
						tmp1.end++;
					}
				} else {
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl__$internal_formats_html_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_formats_swf_FilterType = $hxEnums["openfl._internal.formats.swf.FilterType"] = { __ename__ : "openfl._internal.formats.swf.FilterType", __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"]
	,BlurFilter: ($_=function(blurX,blurY,quality) { return {_hx_index:0,blurX:blurX,blurY:blurY,quality:quality,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["blurX","blurY","quality"],$_)
	,ColorMatrixFilter: ($_=function(matrix) { return {_hx_index:1,matrix:matrix,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["matrix"],$_)
	,DropShadowFilter: ($_=function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { return {_hx_index:2,distance:distance,angle:angle,color:color,alpha:alpha,blurX:blurX,blurY:blurY,strength:strength,quality:quality,inner:inner,knockout:knockout,hideObject:hideObject,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["distance","angle","color","alpha","blurX","blurY","strength","quality","inner","knockout","hideObject"],$_)
	,GlowFilter: ($_=function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { return {_hx_index:3,color:color,alpha:alpha,blurX:blurX,blurY:blurY,strength:strength,quality:quality,inner:inner,knockout:knockout,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["color","alpha","blurX","blurY","strength","quality","inner","knockout"],$_)
};
var openfl__$internal_formats_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
	this.symbolsByClassName = new haxe_ds_StringMap();
};
$hxClasses["openfl._internal.formats.swf.SWFLite"] = openfl__$internal_formats_swf_SWFLite;
openfl__$internal_formats_swf_SWFLite.__name__ = "openfl._internal.formats.swf.SWFLite";
openfl__$internal_formats_swf_SWFLite.resolveClass = function(name) {
	var value = $hxClasses[name];
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._legacy","openfl");
		value = $hxClasses[name1];
	}
	if(value == null) {
		var name2 = StringTools.replace(name,"openfl._v2","openfl");
		value = $hxClasses[name2];
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.resolveEnum = function(name) {
	var value = $hxEnums[name];
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._legacy","openfl");
		value = $hxEnums[name1];
	}
	if(value == null) {
		var name2 = StringTools.replace(name,"openfl._v2","openfl");
		value = $hxEnums[name2];
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_formats_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_formats_swf_SWFLite.resolveEnum});
	var swfLite = unserializer.unserialize();
	if(swfLite != null) {
		swfLite.__init();
	}
	return swfLite;
};
openfl__$internal_formats_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,symbolsByClassName: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var _this = this.symbolsByClassName;
			var symbol = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
			if(symbol != null) {
				if(((symbol) instanceof openfl__$internal_symbols_SpriteSymbol)) {
					return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var _this = this.symbolsByClassName;
		var symbol = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
		if(symbol != null) {
			if(((symbol) instanceof openfl__$internal_symbols_BitmapSymbol)) {
				var bitmap = symbol;
				return openfl_utils_Assets.getBitmapData(bitmap.path);
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var _this = this.symbolsByClassName;
		if(__map_reserved[className] != null) {
			return _this.existsReserved(className);
		} else {
			return _this.h.hasOwnProperty(className);
		}
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__init: function() {
		if(this.symbols == null) {
			return;
		}
		if(this.symbolsByClassName == null) {
			this.symbolsByClassName = new haxe_ds_StringMap();
		}
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1 == null || symbol1.className == null) {
				continue;
			}
			var key = symbol1.className;
			var _this = this.symbolsByClassName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,symbol1);
			} else {
				_this.h[key] = symbol1;
			}
		}
	}
	,__class__: openfl__$internal_formats_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = "openfl.utils.AssetLibrary";
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(((library) instanceof openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getPath: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getPath(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getPath.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,list: function(type) {
		if(this.__proxy != null) {
			return this.__proxy.list(type);
		} else {
			return lime_utils_AssetLibrary.prototype.list.call(this,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadMovieClip: function(id) {
		return lime_app_Future.withValue(this.getMovieClip(id));
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_formats_swf_SWFLiteLibrary = function(id,uuid) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.instanceID = uuid != null ? uuid : id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.formats.swf.SWFLiteLibrary"] = openfl__$internal_formats_swf_SWFLiteLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.__name__ = "openfl._internal.formats.swf.SWFLiteLibrary";
openfl__$internal_formats_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,instanceID: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			id = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		}
		var _this2 = this.alphaCheck;
		if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						var _this3 = this.cachedImages;
						if(__map_reserved[id] != null) {
							_this3.setReserved(id,image);
						} else {
							_this3.h[id] = image;
						}
						this.cachedImages.remove(bitmapSymbol.alpha);
						var _this4 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,true);
						} else {
							_this4.h[id] = true;
						}
						return image;
					}
				}
			}
			var _this5 = this.alphaCheck;
			if(__map_reserved[id] != null) {
				_this5.setReserved(id,true);
			} else {
				_this5.h[id] = true;
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var key = this.id;
			var _this = this.preload;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			var key1 = _gthis.id;
			var _this1 = _gthis.cachedText;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,data);
			} else {
				_this1.h[key1] = data;
			}
			_gthis.swf = openfl__$internal_formats_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						var key2 = bitmapSymbol.className;
						var value = bitmapSymbol.path;
						var _this2 = _gthis.imageClassNames;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value);
						} else {
							_this2.h[key2] = value;
						}
					}
				}
			}
			var key3 = _gthis.instanceID;
			var value1 = _gthis.swf;
			var _this3 = openfl__$internal_formats_swf_SWFLite.instances;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value1);
			} else {
				_this3.h[key3] = value1;
			}
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this4 = this.preload;
				if(__map_reserved[id1] != null) {
					_this4.setReserved(id1,true);
				} else {
					_this4.h[id1] = true;
				}
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				var _this5 = this.preload;
				if(__map_reserved[id3] != null) {
					_this5.setReserved(id3,true);
				} else {
					_this5.h[id3] = true;
				}
			}
			var path = null;
			var key4 = this.id;
			var _this6 = this.paths;
			if(__map_reserved[key4] != null ? _this6.existsReserved(key4) : _this6.h.hasOwnProperty(key4)) {
				var key5 = this.id;
				var _this7 = this.paths;
				path = __map_reserved[key5] != null ? _this7.getReserved(key5) : _this7.h[key5];
			} else {
				path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			}
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			id = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		}
		var tmp;
		if(!this.preloading) {
			var _this2 = this.alphaCheck;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										var _this3 = _gthis.cachedImages;
										if(__map_reserved[id] != null) {
											_this3.setReserved(id,image);
										} else {
											_this3.h[id] = image;
										}
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										var _this4 = _gthis.alphaCheck;
										if(__map_reserved[id] != null) {
											_this4.setReserved(id,true);
										} else {
											_this4.h[id] = true;
										}
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					} else {
						var _this5 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this5.setReserved(id,true);
						} else {
							_this5.h[id] = true;
						}
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var tmp;
		var key = this.instanceID;
		var _this = openfl__$internal_formats_swf_SWFLite.instances;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this.instanceID;
			var _this1 = openfl__$internal_formats_swf_SWFLite.instances;
			tmp = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) == this.swf;
		} else {
			tmp = false;
		}
		if(tmp) {
			openfl__$internal_formats_swf_SWFLite.instances.remove(this.instanceID);
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
		this.bytesTotal = 0;
		var id = this.paths.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var _this = this.sizes;
			this.bytesTotal += __map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1];
		}
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_formats_swf_SWFLiteLibrary
});
var openfl__$internal_formats_swf_ShapeCommand = $hxEnums["openfl._internal.formats.swf.ShapeCommand"] = { __ename__ : "openfl._internal.formats.swf.ShapeCommand", __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"]
	,BeginBitmapFill: ($_=function(bitmap,matrix,repeat,smooth) { return {_hx_index:0,bitmap:bitmap,matrix:matrix,repeat:repeat,smooth:smooth,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["bitmap","matrix","repeat","smooth"],$_)
	,BeginFill: ($_=function(color,alpha) { return {_hx_index:1,color:color,alpha:alpha,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["color","alpha"],$_)
	,BeginGradientFill: ($_=function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { return {_hx_index:2,fillType:fillType,colors:colors,alphas:alphas,ratios:ratios,matrix:matrix,spreadMethod:spreadMethod,interpolationMethod:interpolationMethod,focalPointRatio:focalPointRatio,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["fillType","colors","alphas","ratios","matrix","spreadMethod","interpolationMethod","focalPointRatio"],$_)
	,CurveTo: ($_=function(controlX,controlY,anchorX,anchorY) { return {_hx_index:3,controlX:controlX,controlY:controlY,anchorX:anchorX,anchorY:anchorY,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["controlX","controlY","anchorX","anchorY"],$_)
	,EndFill: {_hx_index:4,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}
	,LineStyle: ($_=function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { return {_hx_index:5,thickness:thickness,color:color,alpha:alpha,pixelHinting:pixelHinting,scaleMode:scaleMode,caps:caps,joints:joints,miterLimit:miterLimit,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["thickness","color","alpha","pixelHinting","scaleMode","caps","joints","miterLimit"],$_)
	,LineTo: ($_=function(x,y) { return {_hx_index:6,x:x,y:y,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["x","y"],$_)
	,MoveTo: ($_=function(x,y) { return {_hx_index:7,x:x,y:y,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["x","y"],$_)
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = "openfl._internal.renderer.DrawCommandBuffer";
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
				var this4 = data;
				var c3 = this4;
				this.beginShaderFill(c3.buffer.o[c3.oPos]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				this.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				this.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				this.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this9 = data;
				var c8 = this9;
				this.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this10 = data;
				var c9 = this10;
				this.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this11 = data;
				var c10 = this11;
				this.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this12 = data;
				var c11 = this12;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this13 = data;
				var c12 = this13;
				this.endFill();
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this15 = data;
				var c14 = this15;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this16 = data;
				var c15 = this16;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this17 = data;
				var c16 = this17;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this18 = data;
				var c17 = this18;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 20:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this19 = data;
				var c18 = this19;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			case 21:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this20 = data;
				var c19 = this20;
				this.windingEvenOdd();
				break;
			case 22:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this21 = data;
				var c20 = this21;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideBlendMode: function(blendMode) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE);
		this.o.push(blendMode);
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = "openfl._internal.renderer.DrawCommandReader";
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginShaderFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawQuads: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideBlendMode: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginShaderFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginShaderFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$.__properties__ = {get_shaderBuffer:"get_shaderBuffer"};
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$.get_shaderBuffer = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawQuadsView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawQuadsView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.__properties__ = {get_transforms:"get_transforms",get_indices:"get_indices",get_rects:"get_rects"};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_rects = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_transforms = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideBlendModeView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.OverrideBlendModeView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$.__properties__ = {get_blendMode:"get_blendMode"};
openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideBlendModeView_$Impl_$.get_blendMode = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxEnums["openfl._internal.renderer.DrawCommandType"] = { __ename__ : "openfl._internal.renderer.DrawCommandType", __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","BEGIN_SHADER_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_QUADS","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_BLEND_MODE","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"]
	,BEGIN_BITMAP_FILL: {_hx_index:0,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_index:1,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_index:2,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_SHADER_FILL: {_hx_index:3,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_index:4,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_index:5,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_index:6,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_index:7,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_QUADS: {_hx_index:8,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_index:9,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_index:10,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_index:11,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_index:12,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_index:13,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_index:14,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_index:15,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_index:16,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_index:17,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_index:18,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,OVERRIDE_BLEND_MODE: {_hx_index:19,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_index:20,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_index:21,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_index:22,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_index:23,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
};
var openfl__$internal_renderer_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl._internal.renderer.SamplerState"] = openfl__$internal_renderer_SamplerState;
openfl__$internal_renderer_SamplerState.__name__ = "openfl._internal.renderer.SamplerState";
openfl__$internal_renderer_SamplerState.prototype = {
	centroid: null
	,filter: null
	,ignoreSampler: null
	,lodBias: null
	,mipfilter: null
	,mipmapGenerated: null
	,textureAlpha: null
	,wrap: null
	,clone: function() {
		var copy = new openfl__$internal_renderer_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_renderer_SamplerState
};
var openfl__$internal_renderer_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl._internal.renderer.ShaderBuffer"] = openfl__$internal_renderer_ShaderBuffer;
openfl__$internal_renderer_ShaderBuffer.__name__ = "openfl._internal.renderer.ShaderBuffer";
openfl__$internal_renderer_ShaderBuffer.prototype = {
	inputCount: null
	,inputRefs: null
	,inputFilter: null
	,inputMipFilter: null
	,inputs: null
	,inputWrap: null
	,overrideBoolCount: null
	,overrideBoolNames: null
	,overrideBoolValues: null
	,overrideFloatCount: null
	,overrideFloatNames: null
	,overrideFloatValues: null
	,overrideIntCount: null
	,overrideIntNames: null
	,overrideIntValues: null
	,paramBoolCount: null
	,paramCount: null
	,paramData: null
	,paramDataBuffer: null
	,paramDataLength: null
	,paramFloatCount: null
	,paramIntCount: null
	,paramLengths: null
	,paramPositions: null
	,paramRefs_Bool: null
	,paramRefs_Float: null
	,paramRefs_Int: null
	,paramTypes: null
	,shader: null
	,addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,addIntOverride: function(name,values) {
		this.overrideIntNames[this.overrideIntCount] = name;
		this.overrideIntValues[this.overrideIntCount] = values;
		this.overrideIntCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,update: function(shader) {
		this.inputCount = 0;
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
		this.paramBoolCount = 0;
		this.paramCount = 0;
		this.paramDataLength = 0;
		this.paramFloatCount = 0;
		this.paramIntCount = 0;
		this.shader = null;
		if(shader == null) {
			return;
		}
		shader.__init();
		this.inputCount = shader.__inputBitmapData.length;
		var input;
		var _g = 0;
		var _g1 = this.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shader.__inputBitmapData[i];
			this.inputs[i] = input.input;
			this.inputFilter[i] = input.filter;
			this.inputMipFilter[i] = input.mipFilter;
			this.inputRefs[i] = input;
			this.inputWrap[i] = input.wrap;
		}
		var boolCount = shader.__paramBool.length;
		var floatCount = shader.__paramFloat.length;
		var intCount = shader.__paramInt.length;
		this.paramCount = boolCount + floatCount + intCount;
		this.paramBoolCount = boolCount;
		this.paramFloatCount = floatCount;
		this.paramIntCount = intCount;
		var length = 0;
		var p = 0;
		var param;
		var _g2 = 0;
		var _g3 = boolCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			param = shader.__paramBool[i1];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 0;
			this.paramRefs_Bool[i1] = param;
			++p;
		}
		var param1;
		var _g4 = 0;
		var _g5 = floatCount;
		while(_g4 < _g5) {
			var i2 = _g4++;
			param1 = shader.__paramFloat[i2];
			this.paramPositions[p] = this.paramDataLength;
			length = param1.value != null ? param1.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 1;
			this.paramRefs_Float[i2] = param1;
			++p;
		}
		var param2;
		var _g6 = 0;
		var _g7 = intCount;
		while(_g6 < _g7) {
			var i3 = _g6++;
			param2 = shader.__paramInt[i3];
			this.paramPositions[p] = this.paramDataLength;
			length = param2.value != null ? param2.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 2;
			this.paramRefs_Int[i3] = param2;
			++p;
		}
		if(this.paramDataLength > 0) {
			if(this.paramData == null) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				this.paramData = this1;
			} else if(this.paramDataLength > this.paramData.length) {
				var elements1 = this.paramDataLength;
				var array1 = null;
				var vector1 = null;
				var view1 = null;
				var buffer1 = null;
				var len1 = null;
				var this2;
				if(elements1 != null) {
					this2 = new Float32Array(elements1);
				} else if(array1 != null) {
					this2 = new Float32Array(array1);
				} else if(vector1 != null) {
					this2 = new Float32Array(vector1.__array);
				} else if(view1 != null) {
					this2 = new Float32Array(view1);
				} else if(buffer1 != null) {
					if(len1 == null) {
						this2 = new Float32Array(buffer1,0);
					} else {
						this2 = new Float32Array(buffer1,0,len1);
					}
				} else {
					this2 = null;
				}
				var data = this2;
				data.set(this.paramData);
				this.paramData = data;
			}
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var paramPosition = 0;
		var boolParam;
		var floatParam;
		var intParam;
		var length1;
		var _g8 = 0;
		var _g9 = this.paramCount;
		while(_g8 < _g9) {
			var i4 = _g8++;
			length1 = this.paramLengths[i4];
			if(i4 < boolCount) {
				boolParam = this.paramRefs_Bool[boolIndex];
				++boolIndex;
				var _g81 = 0;
				var _g91 = length1;
				while(_g81 < _g91) {
					var j = _g81++;
					this.paramData[paramPosition] = boolParam.value[j] ? 1 : 0;
					++paramPosition;
				}
			} else if(i4 < boolCount + floatCount) {
				floatParam = this.paramRefs_Float[floatIndex];
				++floatIndex;
				var _g82 = 0;
				var _g92 = length1;
				while(_g82 < _g92) {
					var j1 = _g82++;
					this.paramData[paramPosition] = floatParam.value[j1];
					++paramPosition;
				}
			} else {
				intParam = this.paramRefs_Int[intIndex];
				++intIndex;
				var _g83 = 0;
				var _g93 = length1;
				while(_g83 < _g93) {
					var j2 = _g83++;
					this.paramData[paramPosition] = intParam.value[j2];
					++paramPosition;
				}
			}
		}
		this.shader = shader;
	}
	,__class__: openfl__$internal_renderer_ShaderBuffer
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = "openfl._internal.renderer.cairo.CairoBitmap";
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var cairo = renderer.cairo;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		renderer.applyMatrix(bitmap.__renderTransform,cairo);
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderer.__allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
		}
		renderer.__popMaskObject(bitmap);
		renderer.__setBlendMode(10);
	}
};
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = "openfl._internal.renderer.cairo.CairoDisplayObject";
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderer) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = "openfl._internal.renderer.cairo.CairoGraphics";
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderer) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderer) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = "openfl._internal.renderer.cairo.CairoTextField";
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderer,transform) {
};
var openfl__$internal_renderer_cairo_CairoTilemap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] = openfl__$internal_renderer_cairo_CairoTilemap;
openfl__$internal_renderer_cairo_CairoTilemap.__name__ = "openfl._internal.renderer.cairo.CairoTilemap";
openfl__$internal_renderer_cairo_CairoTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,null,rect,new lime_math_Matrix3());
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,surface,pattern,rect,matrix) {
	var cairo = renderer.cairo;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile1 = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile1.get_originX(),-tile1.get_originY());
		tileTransform.concat(tile1.get_matrix());
		tileTransform.concat(parentTransform);
		tileset = tile1.get_tileset() != null ? tile1.get_tileset() : defaultTileset;
		alpha = tile1.get_alpha() * worldAlpha;
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile1.__blendMode != null ? tile1.__blendMode : defaultBlendMode;
		}
		if(tile1.__length > 0) {
			openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer(tile1,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,surface,pattern,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile1.get_id();
			if(id == -1) {
				tileRect = tile1.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				surface = bitmapData.getSurface();
				pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth ? 1 : 3);
				cairo.set_source(pattern);
				cacheBitmapData = bitmapData;
			}
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.applyMatrix(tileTransform,cairo);
			matrix.tx = tileRect.x;
			matrix.ty = tileRect.y;
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,matrix);
			cairo.set_source(pattern);
			cairo.save();
			cairo.newPath();
			cairo.rectangle(0,0,tileRect.width,tileRect.height);
			cairo.clip();
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
			cairo.restore();
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = "openfl._internal.renderer.canvas.CanvasBitmap";
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		var context = renderer.context;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = alpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = "openfl._internal.renderer.canvas.CanvasDisplayObject";
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable)) {
			var alpha1 = renderer.__getAlpha(displayObject.__worldAlpha);
			if(!(alpha1 <= 0)) {
				var graphics = displayObject.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
					var width = graphics.__width;
					var height = graphics.__height;
					var canvas = graphics.__canvas;
					if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
						var transform = graphics.__worldTransform;
						var context1 = renderer.context;
						var scrollRect = displayObject.__scrollRect;
						var scale9Grid = displayObject.__worldScale9Grid;
						if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
							renderer.__setBlendMode(displayObject.__worldBlendMode);
							renderer.__pushMaskObject(displayObject);
							context1.globalAlpha = alpha1;
							if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
								context1.setTransform(1,0,0,1,transform.tx,transform.ty);
								var bounds = graphics.__bounds;
								var scaleX = graphics.__renderTransform.a;
								var scaleY = graphics.__renderTransform.d;
								var renderScaleX = transform.a;
								var renderScaleY = transform.d;
								var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
								var top = Math.round(scale9Grid.y * scaleY);
								var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
								var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
								var centerWidth = Math.round(scale9Grid.width * scaleX);
								var centerHeight = Math.round(scale9Grid.height * scaleY);
								var renderLeft = Math.round(scale9Grid.x * renderScaleX);
								var renderTop = Math.round(scale9Grid.y * renderScaleY);
								var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
								var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
								var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
								var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
								renderer.applySmoothing(context1,false);
								if(centerWidth != 0 && centerHeight != 0) {
									context1.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
									context1.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
									context1.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
									context1.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
									context1.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
									context1.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
									context1.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
									context1.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
									context1.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
								} else if(centerWidth == 0 && centerHeight != 0) {
									var renderWidth = renderLeft + renderCenterWidth + renderRight;
									context1.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
									context1.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
									context1.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
								} else if(centerHeight == 0 && centerWidth != 0) {
									var renderHeight = renderTop + renderCenterHeight + renderBottom;
									context1.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
									context1.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
									context1.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
								}
							} else {
								renderer.setTransform(transform,context1);
								if(renderer.__isDOM) {
									var reverseScale = 1 / renderer.pixelRatio;
									context1.scale(reverseScale,reverseScale);
								}
								context1.drawImage(canvas,0,0,width,height);
							}
							renderer.__popMaskObject(displayObject);
						}
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = "openfl._internal.renderer.canvas.CanvasGraphics";
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:case 3:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this10 = data;
				var c9 = this10;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c14 = this16;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 22:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g2 = 1;
	var _g3 = len + 1;
	while(_g2 < _g3) {
		var t1 = _g2++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			var this2 = data;
			var c1 = this2;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			var this3 = data;
			var c2 = this3;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
			var this4 = data;
			var c3 = this4;
			var shaderBuffer = c3.buffer.o[c3.oPos];
			if(shaderBuffer.inputCount > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			var this5 = data;
			var c4 = this5;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			var this6 = data;
			var c5 = this6;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			var this7 = data;
			var c6 = this7;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			var this8 = data;
			var c7 = this8;
			hasPath = true;
			x = c7.buffer.f[c7.fPos];
			y = c7.buffer.f[c7.fPos + 1];
			width = c7.buffer.f[c7.fPos + 2];
			height = c7.buffer.f[c7.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
			var this9 = data;
			var c8 = this9;
			var rects = c8.buffer.o[c8.oPos];
			var indices = c8.buffer.o[c8.oPos + 1];
			var transforms = c8.buffer.o[c8.oPos + 2];
			var hasIndices = indices != null;
			var transformABCD = false;
			var transformXY = false;
			var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
			if(length == 0) {
				return;
			}
			if(transforms != null) {
				if(transforms.get_length() >= length * 6) {
					transformABCD = true;
					transformXY = true;
				} else if(transforms.get_length() >= length * 4) {
					transformABCD = true;
				} else if(transforms.get_length() >= length * 2) {
					transformXY = true;
				}
			}
			var tileRect = openfl_geom_Rectangle.__pool.get();
			var tileTransform = openfl_geom_Matrix.__pool.get();
			var transform = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__renderTransform;
			var alpha = openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha;
			var ri;
			var ti;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
			var _g2 = 0;
			var _g11 = length;
			while(_g2 < _g11) {
				var i = _g2++;
				ri = hasIndices ? indices.get(i) * 4 : i * 4;
				if(ri < 0) {
					continue;
				}
				tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
				if(tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				if(transformABCD && transformXY) {
					ti = i * 6;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
				} else if(transformABCD) {
					ti = i * 4;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
				} else if(transformXY) {
					ti = i * 2;
					tileTransform.tx = transforms.get(ti);
					tileTransform.ty = transforms.get(ti + 1);
				} else {
					tileTransform.tx = tileRect.x;
					tileTransform.ty = tileRect.y;
				}
				tileTransform.tx += positionX - offsetX;
				tileTransform.ty += positionY - offsetY;
				tileTransform.concat(transform);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
				}
			}
			openfl_geom_Rectangle.__pool.release(tileRect);
			openfl_geom_Matrix.__pool.release(tileTransform);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
			break;
		case 9:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			var this10 = data;
			var c9 = this10;
			optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
						var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
						var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c9.buffer.f[c9.fPos + 1];
					sl = c9.buffer.f[c9.fPos];
					sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
					sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
			}
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			var this11 = data;
			var c10 = this11;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this12 = data;
			var c11 = this12;
			var v = c11.buffer.o[c11.oPos];
			var ind = c11.buffer.o[c11.oPos + 1];
			var uvt = c11.buffer.o[c11.oPos + 2];
			var pattern = null;
			var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
					var _g3 = 0;
					var _g12 = v.get_length() / 2 | 0;
					while(_g3 < _g12) {
						var i1 = _g3++;
						uvt.push(v.get(i1 * 2) - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
						uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.get_length() != v.get_length();
				var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
				}
			}
			var i2 = 0;
			var l = ind.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x1;
			var y1;
			var x2;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i2 < l) {
				a_ = i2;
				b_ = i2 + 1;
				c_ = i2 + 2;
				iax = ind.get(a_) * 2;
				iay = ind.get(a_) * 2 + 1;
				ibx = ind.get(b_) * 2;
				iby = ind.get(b_) * 2 + 1;
				icx = ind.get(c_) * 2;
				icy = ind.get(c_) * 2 + 1;
				x1 = v.get(iax) - offsetX;
				y1 = v.get(iay) - offsetY;
				x2 = v.get(ibx) - offsetX;
				y2 = v.get(iby) - offsetY;
				x3 = v.get(icx) - offsetX;
				y3 = v.get(icy) - offsetY;
				switch(c11.buffer.o[c11.oPos + 3]) {
				case 0:
					if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
						i2 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
						i2 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					i2 += 3;
					continue;
				}
				uvx1 = uvt.get(iax) * pattern.width;
				uvx2 = uvt.get(ibx) * pattern.width;
				uvx3 = uvt.get(icx) * pattern.width;
				uvy1 = uvt.get(iay) * pattern.height;
				uvy2 = uvt.get(iby) * pattern.height;
				uvy3 = uvt.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i2 += 3;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					continue;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
				t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				i2 += 3;
			}
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			var this13 = data;
			var c12 = this13;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			var this14 = data;
			var c13 = this14;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			var this15 = data;
			var c14 = this15;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c14.buffer.o[c14.oPos] == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
				var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c14.buffer.o[c14.oPos + 3]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c14.buffer.o[c14.oPos + 2] == null ? "round" : c14.buffer.o[c14.oPos + 2] == 0 ? "butt" : openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c14.buffer.o[c14.oPos + 2]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
				if(c14.buffer.f[c14.fPos] == 1) {
					var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
					g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
					b = c14.buffer.i[c14.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 17:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			var this16 = data;
			var c15 = this16;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
			positionX = c15.buffer.f[c15.fPos];
			positionY = c15.buffer.f[c15.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			var this17 = data;
			var c16 = this17;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
			positionX = c16.buffer.f[c16.fPos];
			positionY = c16.buffer.f[c16.fPos + 1];
			if(setStart) {
				closeGap = true;
			}
			startX = c16.buffer.f[c16.fPos];
			startY = c16.buffer.f[c16.fPos + 1];
			setStart = true;
			break;
		case 21:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			break;
		case 22:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			}
			if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__softwareDirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			renderer.__setBlendModeContext(openfl__$internal_renderer_canvas_CanvasGraphics.context,10);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:case 3:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this4 = data;
						var c3 = this4;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this11 = data;
					var c10 = this11;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this12 = data;
					var c11 = this12;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this13 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this15 = data;
					var c13 = this15;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this16 = data;
					var c14 = this16;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this17 = data;
					var c15 = this17;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this18 = data;
					var c16 = this18;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this19 = data;
					var c17 = this19;
					renderer.__setBlendModeContext(openfl__$internal_renderer_canvas_CanvasGraphics.context,c17.buffer.o[c17.oPos]);
					break;
				case 21:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this20 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 22:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this21 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.__softwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = "openfl._internal.renderer.canvas.CanvasShape";
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(shape.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
		var width = graphics.__width;
		var height = graphics.__height;
		var canvas = graphics.__canvas;
		if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
			var transform = graphics.__worldTransform;
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			var scale9Grid = shape.__worldScale9Grid;
			if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = alpha;
				if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
					context.setTransform(1,0,0,1,transform.tx,transform.ty);
					var bounds = graphics.__bounds;
					var scaleX = graphics.__renderTransform.a;
					var scaleY = graphics.__renderTransform.d;
					var renderScaleX = transform.a;
					var renderScaleY = transform.d;
					var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
					var top = Math.round(scale9Grid.y * scaleY);
					var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
					var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
					var centerWidth = Math.round(scale9Grid.width * scaleX);
					var centerHeight = Math.round(scale9Grid.height * scaleY);
					var renderLeft = Math.round(scale9Grid.x * renderScaleX);
					var renderTop = Math.round(scale9Grid.y * renderScaleY);
					var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
					var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
					var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
					var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
					renderer.applySmoothing(context,false);
					if(centerWidth != 0 && centerHeight != 0) {
						context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
						context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
						context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
						context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
						context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
						context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
						context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
						context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
					} else if(centerWidth == 0 && centerHeight != 0) {
						var renderWidth = renderLeft + renderCenterWidth + renderRight;
						context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
						context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
					} else if(centerHeight == 0 && centerWidth != 0) {
						var renderHeight = renderTop + renderCenterHeight + renderBottom;
						context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
						context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
						context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
					}
				} else {
					renderer.setTransform(transform,context);
					if(renderer.__isDOM) {
						var reverseScale = 1 / renderer.pixelRatio;
						context.scale(reverseScale,reverseScale);
					}
					context.drawImage(canvas,0,0,width,height);
				}
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = "openfl._internal.renderer.canvas.CanvasTextField";
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			if(renderer.__isDOM) {
				var scale = renderer.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform1);
				matrix.scale(scale,scale);
				renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g4 = textField.__caretIndex - group1.startIndex;
								while(_g3 < _g4) {
									var i1 = _g3++;
									if(group1.positions.length <= i1) {
										break;
									}
									advance += group1.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g5 = textField.get_scrollV();
								var _g6 = group1.lineIndex + 1;
								while(_g5 < _g6) {
									var i2 = _g5++;
									scrollY1 += textEngine.lineHeights.get(i2 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp2 = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g2 = 0;
					var _g11 = textField.get_scrollV() - 1;
					while(_g2 < _g11) {
						var i3 = _g2++;
						scrollY2 += textEngine.lineHeights.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp5 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTilemap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] = openfl__$internal_renderer_canvas_CanvasTilemap;
openfl__$internal_renderer_canvas_CanvasTilemap.__name__ = "openfl._internal.renderer.canvas.CanvasTilemap";
openfl__$internal_renderer_canvas_CanvasTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = false;
	}
	openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = true;
	}
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,source,rect) {
	var context = renderer.context;
	var roundPixels = renderer.__roundPixels;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var length = group.__length;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		tile = tiles[i];
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,source,rect);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				if(bitmapData.image.buffer.__srcImage == null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmapData.image);
				}
				source = bitmapData.image.get_src();
				cacheBitmapData = bitmapData;
			}
			context.globalAlpha = alpha;
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.setTransform(tileTransform,context);
			context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
var openfl__$internal_renderer_context3D_Context3DBitmap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DBitmap"] = openfl__$internal_renderer_context3D_Context3DBitmap;
openfl__$internal_renderer_context3D_Context3DBitmap.__name__ = "openfl._internal.renderer.context3D.Context3DBitmap";
openfl__$internal_renderer_context3D_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl__$internal_renderer_context3D_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl__$internal_renderer_context3D_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl._internal.renderer.context3D.Context3DBuffer"] = openfl__$internal_renderer_context3D_Context3DBuffer;
openfl__$internal_renderer_context3D_Context3DBuffer.__name__ = "openfl._internal.renderer.context3D.Context3DBuffer";
openfl__$internal_renderer_context3D_Context3DBuffer.prototype = {
	dataPerVertex: null
	,elementCount: null
	,elementType: null
	,indexBufferData: null
	,indexBuffers: null
	,indexCount: null
	,vertexBuffer: null
	,vertexBufferData: null
	,vertexCount: null
	,context3D: null
	,drawElements: function(start,length) {
		if(length == null) {
			length = -1;
		}
		if(this.indexCount == 0 || this.vertexCount == 0) {
			return;
		}
		if(this.elementType._hx_index == 0) {
			if(length == -1) {
				length = this.elementCount * 2;
			}
			if(start < 10922 && length - start < 10922) {
				this.context3D.drawTriangles(this.indexBuffers[0],start,length * 2);
			} else {
				var end = start + length;
				while(start < end) {
					var arrayBufferIndex = Math.floor(start / 10922);
					length = Math.min(end - start,10922) | 0;
					if(length <= 0) {
						break;
					}
					this.context3D.drawTriangles(this.indexBuffers[arrayBufferIndex],(start - arrayBufferIndex * 10922) * 3,length * 2);
					start += length;
				}
			}
		}
	}
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(this.vertexBufferData));
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		switch(this.elementType._hx_index) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var array1 = null;
			var vector1 = null;
			var view1 = null;
			var buffer1 = null;
			var len1 = null;
			var this2;
			if(vertexLength != null) {
				this2 = new Float32Array(vertexLength);
			} else if(array1 != null) {
				this2 = new Float32Array(array1);
			} else if(vector1 != null) {
				this2 = new Float32Array(vector1.__array);
			} else if(view1 != null) {
				this2 = new Float32Array(view1);
			} else if(buffer1 != null) {
				if(len1 == null) {
					this2 = new Float32Array(buffer1,0);
				} else {
					this2 = new Float32Array(buffer1,0,len1);
				}
			} else {
				this2 = null;
			}
			this.vertexBufferData = this2;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl__$internal_renderer_context3D_Context3DBuffer
};
var openfl__$internal_renderer_context3D_Context3DElementType = $hxEnums["openfl._internal.renderer.context3D.Context3DElementType"] = { __ename__ : "openfl._internal.renderer.context3D.Context3DElementType", __constructs__ : ["QUADS","TRIANGLES","TRIANGLE_INDICES"]
	,QUADS: {_hx_index:0,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
	,TRIANGLES: {_hx_index:1,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
	,TRIANGLE_INDICES: {_hx_index:2,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
};
var openfl__$internal_renderer_context3D_Context3DDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DDisplayObject"] = openfl__$internal_renderer_context3D_Context3DDisplayObject;
openfl__$internal_renderer_context3D_Context3DDisplayObject.__name__ = "openfl._internal.renderer.context3D.Context3DDisplayObject";
openfl__$internal_renderer_context3D_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.render(displayObject,renderer);
	}
};
openfl__$internal_renderer_context3D_Context3DDisplayObject.renderMask = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl__$internal_renderer_context3D_Context3DGraphics = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DGraphics"] = openfl__$internal_renderer_context3D_Context3DGraphics;
openfl__$internal_renderer_context3D_Context3DGraphics.__name__ = "openfl._internal.renderer.context3D.Context3DGraphics";
openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
			var this2 = data;
			var c1 = this2;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			bitmap = null;
			if(shaderBuffer != null) {
				var _g2 = 0;
				var _g11 = shaderBuffer.inputCount;
				while(_g2 < _g11) {
					var i = _g2++;
					if(shaderBuffer.inputRefs[i].name == "bitmap") {
						bitmap = shaderBuffer.inputs[i];
						break;
					}
				}
			}
			break;
		case 8:
			if(bitmap != null) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this3 = data;
				var c2 = this3;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl__$internal_renderer_context3D_Context3DBuffer(context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				var bitmapWidth = bitmap.width;
				var bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g3 = 0;
				var _g12 = length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					vertexOffset = (quadBufferPosition + i1) * stride;
					ri = hasIndices ? indices.get(i1) * 4 : i1 * 4;
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i1 * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i1 * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i1 * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this4 = data;
			var c3 = this4;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g4 = 0;
			var _g13 = length1;
			while(_g4 < _g13) {
				var i2 = _g4++;
				offset = vertexOffset1 + i2 * dataPerVertex1;
				vertOffset = hasIndices1 ? indices1.get(i2) * 2 : i2 * 2;
				uvOffset = hasIndices1 ? indices1.get(i2) * uvStride : i2 * uvStride;
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer1 = graphics.__vertexBuffer;
		if(buffer1 == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer1 = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer1;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer1.uploadFromTypedArray(lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(graphics.__vertexBufferData));
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer2 = graphics.__vertexBufferUVT;
		if(buffer2 == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer2 = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer2;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer2.uploadFromTypedArray(lime_utils__$Float32Array_Float32Array_$Impl_$.toArrayBufferView(graphics.__vertexBufferDataUVT));
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible = function(graphics) {
	if(graphics.__owner.__worldScale9Grid != null) {
		return false;
	}
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 19:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl__$internal_renderer_context3D_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__hardwareDirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this2 = data;
					var c1 = this2;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
						var this4 = data;
						var c3 = this4;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							shader = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						var this5 = data;
						var c4 = this5;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width1 = c4.buffer.f[c4.fPos + 2];
						var height1 = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width1,height1);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData,true,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						renderer.__clearShader();
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this6 = data;
					var c5 = this6;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						shader2 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 1:
						context.setCulling(3);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(0,length1);
					shaderBufferOffset += length1;
					if(hasUVTData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					switch(culling) {
					case 1:case 2:
						context.setCulling(0);
						break;
					default:
					}
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this7 = data;
					var c6 = this7;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this8 = data;
					var c7 = this8;
					renderer.__setBlendMode(c7.buffer.o[c7.oPos]);
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.__hardwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = true;
	openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = false;
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeIndexBuffer = function(graphics,isQuad,length) {
	if(isQuad) {
		return;
	}
	var buffer = isQuad ? null : graphics.__triangleIndexBufferData;
	var position = 0;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array1 = null;
		var vector1 = null;
		var view1 = null;
		var buffer2 = null;
		var len1 = null;
		var this2;
		if(length != null) {
			this2 = new Uint16Array(length);
		} else if(array1 != null) {
			this2 = new Uint16Array(array1);
		} else if(vector1 != null) {
			this2 = new Uint16Array(vector1.__array);
		} else if(view1 != null) {
			this2 = new Uint16Array(view1);
		} else if(buffer2 != null) {
			if(len1 == null) {
				this2 = new Uint16Array(buffer2,0);
			} else {
				this2 = new Uint16Array(buffer2,0,len1);
			}
		} else {
			this2 = null;
		}
		newBuffer = this2;
		newBuffer.set(buffer);
		position = buffer.length;
	}
	if(newBuffer != null) {
		if(!isQuad) {
			graphics.__triangleIndexBufferData = newBuffer;
		}
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array1 = null;
		var vector1 = null;
		var view1 = null;
		var buffer2 = null;
		var len1 = null;
		var this2;
		if(length != null) {
			this2 = new Float32Array(length);
		} else if(array1 != null) {
			this2 = new Float32Array(array1);
		} else if(vector1 != null) {
			this2 = new Float32Array(vector1.__array);
		} else if(view1 != null) {
			this2 = new Float32Array(view1);
		} else if(buffer2 != null) {
			if(len1 == null) {
				this2 = new Float32Array(buffer2,0);
			} else {
				this2 = new Float32Array(buffer2,0,len1);
			}
		} else {
			this2 = null;
		}
		newBuffer = this2;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\r\n\t\t\r\n\t\tuniform sampler2D openfl_Texture;\r\n\t\t\r\n\t\tvoid main(void) {\r\n\t\t\t\r\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\r\n\t\t\t\r\n\t\t\tif (color.a == 0.0) {\r\n\t\t\t\t\r\n\t\t\t\tdiscard;\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = color;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\t\t\r\n\t\tuniform mat4 openfl_Matrix;\r\n\t\t\r\n\t\tvoid main(void) {\r\n\t\t\t\r\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\r\n\t\t\t\r\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\t\t\t\r\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl._internal.renderer.context3D.Context3DMaskShader"] = openfl__$internal_renderer_context3D_Context3DMaskShader;
openfl__$internal_renderer_context3D_Context3DMaskShader.__name__ = "openfl._internal.renderer.context3D.Context3DMaskShader";
openfl__$internal_renderer_context3D_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_context3D_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: openfl__$internal_renderer_context3D_Context3DMaskShader
});
var openfl__$internal_renderer_context3D_Context3DShape = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DShape"] = openfl__$internal_renderer_context3D_Context3DShape;
openfl__$internal_renderer_context3D_Context3DShape.__name__ = "openfl._internal.renderer.context3D.Context3DShape";
openfl__$internal_renderer_context3D_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var scale9Grid = shape.__worldScale9Grid;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl__$internal_renderer_context3D_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_context3D_Context3DGraphics.renderMask(graphics,renderer);
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl._internal.renderer.context3D.Context3DState"] = openfl__$internal_renderer_context3D_Context3DState;
openfl__$internal_renderer_context3D_Context3DState.__name__ = "openfl._internal.renderer.context3D.Context3DState";
openfl__$internal_renderer_context3D_Context3DState.prototype = {
	backBufferEnableDepthAndStencil: null
	,blendDestinationAlphaFactor: null
	,blendSourceAlphaFactor: null
	,blendDestinationRGBFactor: null
	,blendSourceRGBFactor: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,culling: null
	,depthCompareMode: null
	,depthMask: null
	,program: null
	,renderToTexture: null
	,renderToTextureAntiAlias: null
	,renderToTextureDepthStencil: null
	,renderToTextureSurfaceSelector: null
	,samplerStates: null
	,scissorEnabled: null
	,scissorRectangle: null
	,stencilCompareMode: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilPass: null
	,stencilReadMask: null
	,stencilReferenceValue: null
	,stencilTriangleFace: null
	,stencilWriteMask: null
	,textures: null
	,shader: null
	,__currentGLArrayBuffer: null
	,__currentGLElementArrayBuffer: null
	,__currentGLFramebuffer: null
	,__currentGLTexture2D: null
	,__currentGLTextureCubeMap: null
	,__enableGLBlend: null
	,__enableGLCullFace: null
	,__enableGLDepthTest: null
	,__enableGLScissorTest: null
	,__enableGLStencilTest: null
	,__frontFaceGLCCW: null
	,__glBlendEquation: null
	,__primaryGLFramebuffer: null
	,__rttDepthGLRenderbuffer: null
	,__rttGLFramebuffer: null
	,__rttGLRenderbuffer: null
	,__rttStencilGLRenderbuffer: null
	,__class__: openfl__$internal_renderer_context3D_Context3DState
};
var openfl__$internal_renderer_context3D_Context3DTextField = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DTextField"] = openfl__$internal_renderer_context3D_Context3DTextField;
openfl__$internal_renderer_context3D_Context3DTextField.__name__ = "openfl._internal.renderer.context3D.Context3DTextField";
openfl__$internal_renderer_context3D_Context3DTextField.render = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform1);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g4 = textField.__caretIndex - group1.startIndex;
								while(_g3 < _g4) {
									var i1 = _g3++;
									if(group1.positions.length <= i1) {
										break;
									}
									advance += group1.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g5 = textField.get_scrollV();
								var _g6 = group1.lineIndex + 1;
								while(_g5 < _g6) {
									var i2 = _g5++;
									scrollY1 += textEngine.lineHeights.get(i2 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp2 = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g2 = 0;
					var _g11 = textField.get_scrollV() - 1;
					while(_g2 < _g11) {
						var i3 = _g2++;
						scrollY2 += textEngine.lineHeights.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp5 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
openfl__$internal_renderer_context3D_Context3DTextField.renderMask = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform1);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g4 = textField.__caretIndex - group1.startIndex;
								while(_g3 < _g4) {
									var i1 = _g3++;
									if(group1.positions.length <= i1) {
										break;
									}
									advance += group1.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g5 = textField.get_scrollV();
								var _g6 = group1.lineIndex + 1;
								while(_g5 < _g6) {
									var i2 = _g5++;
									scrollY1 += textEngine.lineHeights.get(i2 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp2 = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g2 = 0;
					var _g11 = textField.get_scrollV() - 1;
					while(_g2 < _g11) {
						var i3 = _g2++;
						scrollY2 += textEngine.lineHeights.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp5 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
var openfl__$internal_renderer_context3D_Context3DTilemap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DTilemap"] = openfl__$internal_renderer_context3D_Context3DTilemap;
openfl__$internal_renderer_context3D_Context3DTilemap.__name__ = "openfl._internal.renderer.context3D.Context3DTilemap";
openfl__$internal_renderer_context3D_Context3DTilemap.buildBuffer = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.numTiles = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData = tilemap.__buffer != null ? tilemap.__buffer.vertexBufferData : null;
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition = 0;
	var rect = openfl_geom_Rectangle.__pool.get();
	var matrix = openfl_geom_Matrix.__pool.get();
	var parentTransform = openfl_geom_Matrix.__pool.get();
	openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex = 4;
	if(tilemap.tileAlphaEnabled) {
		openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex++;
	}
	if(tilemap.tileColorTransformEnabled) {
		openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex += 8;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer(tilemap,tilemap.__group,renderer,parentTransform,tilemap.__tileset,tilemap.tileAlphaEnabled,tilemap.__worldAlpha,tilemap.tileColorTransformEnabled,tilemap.__worldColorTransform,null,rect,matrix);
	tilemap.__buffer.flushVertexBufferData();
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Matrix.__pool.release(matrix);
	openfl_geom_Matrix.__pool.release(parentTransform);
};
openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer = function(tilemap,group,renderer,parentTransform,defaultTileset,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,cacheBitmapData,rect,matrix) {
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var roundPixels = renderer.__roundPixels;
	var tiles = group.__tiles;
	var length = group.__length;
	openfl__$internal_renderer_context3D_Context3DTilemap.resizeBuffer(tilemap,openfl__$internal_renderer_context3D_Context3DTilemap.numTiles + length);
	var tile;
	var tileset;
	var alpha;
	var visible;
	var colorTransform = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var tileWidth;
	var tileHeight;
	var uvX;
	var uvY;
	var uvHeight;
	var uvWidth;
	var vertexOffset;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	var alphaPosition = 4;
	var ctPosition = alphaEnabled ? 5 : 4;
	var _g = 0;
	while(_g < tiles.length) {
		var tile1 = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile1.get_originX(),-tile1.get_originY());
		tileTransform.concat(tile1.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile1.get_tileset() != null ? tile1.get_tileset() : defaultTileset;
		alpha = tile1.get_alpha() * worldAlpha;
		visible = tile1.get_visible();
		tile1.__dirty = false;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(colorTransformEnabled) {
			if(tile1.get_colorTransform() != null) {
				if(defaultColorTransform == null) {
					colorTransform = tile1.get_colorTransform();
				} else {
					if(openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform == null) {
						openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform = new openfl_geom_ColorTransform();
					}
					colorTransform = openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform;
					colorTransform.redMultiplier = defaultColorTransform.redMultiplier * tile1.get_colorTransform().redMultiplier;
					colorTransform.greenMultiplier = defaultColorTransform.greenMultiplier * tile1.get_colorTransform().greenMultiplier;
					colorTransform.blueMultiplier = defaultColorTransform.blueMultiplier * tile1.get_colorTransform().blueMultiplier;
					colorTransform.alphaMultiplier = defaultColorTransform.alphaMultiplier * tile1.get_colorTransform().alphaMultiplier;
					colorTransform.redOffset = defaultColorTransform.redOffset + tile1.get_colorTransform().redOffset;
					colorTransform.greenOffset = defaultColorTransform.greenOffset + tile1.get_colorTransform().greenOffset;
					colorTransform.blueOffset = defaultColorTransform.blueOffset + tile1.get_colorTransform().blueOffset;
					colorTransform.alphaOffset = defaultColorTransform.alphaOffset + tile1.get_colorTransform().alphaOffset;
				}
			} else {
				colorTransform = defaultColorTransform;
			}
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(tile1.__length > 0) {
			openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer(tilemap,tile1,renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile1.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile1.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				uvX = tileRect.x / bitmapData.width;
				uvY = tileRect.y / bitmapData.height;
				uvWidth = tileRect.get_right() / bitmapData.width;
				uvHeight = tileRect.get_bottom() / bitmapData.height;
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
				uvX = tileData.__uvX;
				uvY = tileData.__uvY;
				uvWidth = tileData.__uvWidth;
				uvHeight = tileData.__uvHeight;
			}
			tileWidth = tileRect.width;
			tileHeight = tileRect.height;
			x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			vertexOffset = openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset] = x;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 1] = y;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 2] = uvX;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 3] = uvY;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex] = x2;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 1] = y2;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 2] = uvWidth;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 3] = uvY;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2] = x3;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 1] = y3;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 2] = uvX;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 3] = uvHeight;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3] = x4;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 1] = y4;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 2] = uvWidth;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 3] = uvHeight;
			if(alphaEnabled) {
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 0 + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + alphaPosition] = alpha;
			}
			if(colorTransformEnabled) {
				if(colorTransform != null) {
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition] = colorTransform.redMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 1] = colorTransform.greenMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 2] = colorTransform.blueMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 3] = colorTransform.alphaMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 4] = colorTransform.redOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 5] = colorTransform.greenOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 6] = colorTransform.blueOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 7] = colorTransform.alphaOffset;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 1] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 2] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 3] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 4] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 5] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 6] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 7] = 0;
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition += openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 4;
		}
	}
	group.__dirty = false;
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DTilemap.flush = function(tilemap,renderer,blendMode) {
	if(openfl__$internal_renderer_context3D_Context3DTilemap.currentShader == null) {
		openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = renderer.__defaultDisplayShader;
	}
	if(openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition > openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition && openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData != null && openfl__$internal_renderer_context3D_Context3DTilemap.currentShader != null) {
		var shader = renderer.__initDisplayShader(openfl__$internal_renderer_context3D_Context3DTilemap.currentShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData,tilemap.smoothing);
		renderer.applyMatrix(renderer.__getMatrix(tilemap.__renderTransform,1));
		if(tilemap.tileAlphaEnabled) {
			renderer.useAlphaArray();
		} else {
			renderer.applyAlpha(tilemap.__worldAlpha);
		}
		if(tilemap.tileBlendModeEnabled) {
			renderer.__setBlendMode(blendMode);
		}
		if(tilemap.tileColorTransformEnabled) {
			renderer.applyHasColorTransform(true);
			renderer.useColorTransformArray();
		} else {
			renderer.applyColorTransform(tilemap.__worldColorTransform);
		}
		renderer.updateShader();
		var vertexBuffer = tilemap.__buffer.vertexBuffer;
		var vertexBufferPosition = openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition * openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 4;
		var length = openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition - openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition;
		while(openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition < openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition) {
			length = Math.min(openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition - openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition,openfl__$internal_renderer_context3D_Context3DTilemap.context.__quadIndexBufferElements) | 0;
			if(length <= 0) {
				break;
			}
			if(shader.__position != null) {
				openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__position.index,vertexBuffer,vertexBufferPosition,2);
			}
			if(shader.__textureCoord != null) {
				openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,vertexBufferPosition + 2,2);
			}
			if(tilemap.tileAlphaEnabled) {
				if(shader.__alpha != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__alpha.index,vertexBuffer,vertexBufferPosition + 4,1);
				}
			}
			if(tilemap.tileColorTransformEnabled) {
				var position = tilemap.tileAlphaEnabled ? 5 : 4;
				if(shader.__colorMultiplier != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__colorMultiplier.index,vertexBuffer,vertexBufferPosition + position,4);
				}
				if(shader.__colorOffset != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__colorOffset.index,vertexBuffer,vertexBufferPosition + position + 4,4);
				}
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.context.drawTriangles(openfl__$internal_renderer_context3D_Context3DTilemap.context.__quadIndexBuffer,0,length * 2);
			openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition += length;
		}
		renderer.__clearShader();
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedBitmapData = openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedShader = openfl__$internal_renderer_context3D_Context3DTilemap.currentShader;
};
openfl__$internal_renderer_context3D_Context3DTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.context = renderer.__context3D;
	openfl__$internal_renderer_context3D_Context3DTilemap.buildBuffer(tilemap,renderer);
	if(openfl__$internal_renderer_context3D_Context3DTilemap.numTiles == 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedBitmapData = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedShader = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode = tilemap.__worldBlendMode;
	if(!tilemap.tileBlendModeEnabled) {
		renderer.__setBlendMode(openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
	}
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer(tilemap,renderer,tilemap.__group,tilemap.__worldShader,tilemap.__tileset,tilemap.__worldAlpha,tilemap.tileBlendModeEnabled,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode,null);
	openfl__$internal_renderer_context3D_Context3DTilemap.flush(tilemap,renderer,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer = function(tilemap,renderer,group,defaultShader,defaultTileset,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var shader;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile1 = tiles[_g];
		++_g;
		tileset = tile1.get_tileset() != null ? tile1.get_tileset() : defaultTileset;
		alpha = tile1.get_alpha() * worldAlpha;
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		shader = tile1.get_shader() != null ? tile1.get_shader() : defaultShader;
		if(blendModeEnabled) {
			blendMode = tile1.__blendMode != null ? tile1.__blendMode : defaultBlendMode;
		}
		if(tile1.__length > 0) {
			openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer(tilemap,renderer,tile1,shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile1.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile1.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
			}
			if(shader != openfl__$internal_renderer_context3D_Context3DTilemap.currentShader || bitmapData != openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData && openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData != null || openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode != blendMode) {
				openfl__$internal_renderer_context3D_Context3DTilemap.flush(tilemap,renderer,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData = bitmapData;
			openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = shader;
			openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode = blendMode;
			openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition++;
		}
	}
};
openfl__$internal_renderer_context3D_Context3DTilemap.renderMask = function(tilemap,renderer) {
};
openfl__$internal_renderer_context3D_Context3DTilemap.resizeBuffer = function(tilemap,count) {
	openfl__$internal_renderer_context3D_Context3DTilemap.numTiles = count;
	if(tilemap.__buffer == null) {
		tilemap.__buffer = new openfl__$internal_renderer_context3D_Context3DBuffer(openfl__$internal_renderer_context3D_Context3DTilemap.context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,openfl__$internal_renderer_context3D_Context3DTilemap.numTiles,openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex);
	} else {
		tilemap.__buffer.resize(openfl__$internal_renderer_context3D_Context3DTilemap.numTiles,openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex);
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData = tilemap.__buffer.vertexBufferData;
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = "openfl._internal.renderer.dom.DOMBitmap";
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = "openfl._internal.renderer.dom.DOMDisplayObject";
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderer) {
	if(displayObject.__cacheBitmap != null) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(displayObject.__cacheBitmap,renderer);
	}
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderer.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					renderer.__initializeElement(displayObject,displayObject.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
			}
		}
		if(displayObject.__canvas != null) {
			renderer.__pushMaskObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			renderer.__updateClip(displayObject);
			renderer.__applyStyle(displayObject,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderer.__popMaskObject(displayObject);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = "openfl._internal.renderer.dom.DOMShape";
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = "openfl._internal.renderer.dom.DOMTextField";
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderer) {
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				var div = textField.__div;
				div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				var _this_r = new RegExp("\r\n","g".split("u").join(""));
				var tmp = text.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r1 = new RegExp("\n","g".split("u").join(""));
				var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
				textField.__div.innerHTML = tmp1;
				var _this_r2 = new RegExp("\r","g".split("u").join(""));
				var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
				textField.__div.innerHTML = tmp2;
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				switch(textField.__textFormat.align) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_dom_DOMTilemap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTilemap"] = openfl__$internal_renderer_dom_DOMTilemap;
openfl__$internal_renderer_dom_DOMTilemap.__name__ = "openfl._internal.renderer.dom.DOMTilemap";
openfl__$internal_renderer_dom_DOMTilemap.clear = function(tilemap,renderer) {
	if(tilemap.__canvas != null) {
		renderer.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTilemap.render = function(tilemap,renderer) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			renderer.__initializeElement(tilemap,tilemap.__canvas);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		renderer.__canvasRenderer.context = tilemap.__context;
		var renderer1 = renderer.__canvasRenderer;
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer1.context;
				renderer1.__setBlendMode(tilemap.__worldBlendMode);
				renderer1.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer1.__popMaskRect();
				renderer1.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
		renderer.__canvasRenderer.context = null;
		renderer.__updateClip(tilemap);
		renderer.__applyStyle(tilemap,true,false,true);
	} else {
		openfl__$internal_renderer_dom_DOMTilemap.clear(tilemap,renderer);
	}
};
var openfl__$internal_renderer_flash_FlashRenderer = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashRenderer"] = openfl__$internal_renderer_flash_FlashRenderer;
openfl__$internal_renderer_flash_FlashRenderer.__name__ = "openfl._internal.renderer.flash.FlashRenderer";
openfl__$internal_renderer_flash_FlashRenderer.register = function(renderObject) {
	if(openfl__$internal_renderer_flash_FlashRenderer.instances == null) {
		openfl__$internal_renderer_flash_FlashRenderer.instances = openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap(null,true);
		openfl_Lib.get_current().stage.addEventListener("enterFrame",openfl__$internal_renderer_flash_FlashRenderer.render,false,-2147483648);
	}
	openfl__$internal_renderer_flash_FlashRenderer.instances.set(renderObject,true);
};
openfl__$internal_renderer_flash_FlashRenderer.render = function(_) {
	var instance = openfl__$internal_renderer_flash_FlashRenderer.instances.keys();
	while(instance.hasNext()) {
		var instance1 = instance.next();
		instance1.__renderFlash();
	}
};
var openfl__$internal_renderer_flash_IDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.flash.IDisplayObject"] = openfl__$internal_renderer_flash_IDisplayObject;
openfl__$internal_renderer_flash_IDisplayObject.__name__ = "openfl._internal.renderer.flash.IDisplayObject";
openfl__$internal_renderer_flash_IDisplayObject.__isInterface__ = true;
openfl__$internal_renderer_flash_IDisplayObject.prototype = {
	__renderFlash: null
	,__class__: openfl__$internal_renderer_flash_IDisplayObject
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		if(this.__bitmapData != null) {
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
		} else {
			bounds.setTo(0,0,0,0);
		}
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
		renderer.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(!(!bitmap.__renderable)) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable)) {
					var alpha1 = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha1 <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context1 = renderer.context;
							renderer.setTransform(this.__renderTransform,context1);
							var color = this.opaqueBackground;
							context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context1.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(!(!this.__renderable)) {
								var alpha2 = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha2 <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context2 = renderer.context;
											var scrollRect1 = this.__scrollRect;
											var scale9Grid = this.__worldScale9Grid;
											if(scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context2.globalAlpha = alpha2;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context2.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context2,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context2.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context2.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context2.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context2.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context2.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context2.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context2.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context2.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context2.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context2.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context2.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context2.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context2.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context2.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context2.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context2);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context2.scale(reverseScale,reverseScale);
													}
													context2.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(!(!this.__renderable)) {
				var alpha3 = renderer.__getAlpha(this.__worldAlpha);
				if(alpha3 > 0 && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
					var context3 = renderer.context;
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__bitmapData.image);
					context3.globalAlpha = alpha3;
					var scrollRect2 = this.__scrollRect;
					renderer.setTransform(this.__renderTransform,context3);
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context3.imageSmoothingEnabled = false;
					}
					if(scrollRect2 == null) {
						context3.drawImage(this.__bitmapData.image.get_src(),0,0,this.__bitmapData.image.width,this.__bitmapData.image.height);
					} else {
						context3.drawImage(this.__bitmapData.image.get_src(),scrollRect2.x,scrollRect2.y,scrollRect2.width,scrollRect2.height);
					}
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context3.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(this,false);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		renderer.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__softwareDirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
			if(this.stage != null && this.__worldVisible && this.__renderable && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
				renderer.__pushMaskObject(this);
				if(this.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderer);
				}
				renderer.__popMaskObject(this);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color = this.opaqueBackground;
						context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_context3D_Context3DBitmap.renderMask(this,renderer);
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__bitmapData == null || this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderer,this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion);
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleY(value / this.__bitmapData.height);
		} else {
			this.set_scaleY(0);
		}
		return value;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleX(value / this.__bitmapData.width);
		} else {
			this.set_scaleX(0);
		}
		return value;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_flash_FlashTilemap = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashTilemap"] = openfl__$internal_renderer_flash_FlashTilemap;
openfl__$internal_renderer_flash_FlashTilemap.__name__ = "openfl._internal.renderer.flash.FlashTilemap";
openfl__$internal_renderer_flash_FlashTilemap.render = function(tilemap) {
};
openfl__$internal_renderer_flash_FlashTilemap.renderTileContainer = function(group,bitmapData,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
};
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = "openfl._internal.symbols.SWFSymbol";
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = "openfl._internal.symbols.BitmapSymbol";
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = "openfl._internal.symbols.ButtonSymbol";
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var name = this.className;
			var symbolType = $hxClasses[name];
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = "openfl._internal.symbols.DynamicTextSymbol";
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = "openfl._internal.symbols.FontSymbol";
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = "openfl._internal.symbols.ShapeSymbol";
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command._hx_index) {
			case 0:
				var smooth = command.smooth;
				var repeat = command.repeat;
				var matrix = command.matrix;
				var bitmapID = command.bitmap;
				var bitmapSymbol = swf.symbols.h[bitmapID];
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command.alpha;
				var color = command.color;
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command.focalPointRatio;
				var interpolationMethod = command.interpolationMethod;
				var spreadMethod = command.spreadMethod;
				var matrix1 = command.matrix;
				var ratios = command.ratios;
				var alphas = command.alphas;
				var colors = command.colors;
				var fillType = command.fillType;
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command.anchorY;
				var anchorX = command.anchorX;
				var controlY = command.controlY;
				var controlX = command.controlX;
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command.miterLimit;
				var joints = command.joints;
				var caps = command.caps;
				var scaleMode = command.scaleMode;
				var pixelHinting = command.pixelHinting;
				var alpha1 = command.alpha;
				var color1 = command.color;
				var thickness = command.thickness;
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command.y;
				var x = command.x;
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command.y;
				var x1 = command.x;
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = "openfl._internal.symbols.SpriteSymbol";
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,scale9Grid: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			var name = this.className;
			symbolType = $hxClasses[name];
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			var name1 = this.baseClassName;
			symbolType = $hxClasses[name1];
			var tmp1 = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		movieClip.set_scale9Grid(this.scale9Grid);
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = "openfl._internal.symbols.StaticTextSymbol";
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g2 = 0;
					var _g11 = record.glyphs.length;
					while(_g2 < _g11) {
						var i = _g2++;
						index = record.glyphs[i];
						var code = font.codes[index];
						text += String.fromCodePoint(code);
						var _g3 = 0;
						var _g12 = font.glyphs[index];
						while(_g3 < _g12.length) {
							var command = _g12[_g3];
							++_g3;
							switch(command._hx_index) {
							case 1:
								var _g21 = command.color;
								var alpha = command.alpha;
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command.anchorY;
								var anchorX = command.anchorX;
								var controlY = command.controlY;
								var controlX = command.controlX;
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command.miterLimit;
								var joints = command.joints;
								var caps = command.caps;
								var scaleMode = command.scaleMode;
								var pixelHinting = command.pixelHinting;
								var alpha1 = command.alpha;
								var color1 = command.color;
								var thickness = command.thickness;
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command.y;
								var x = command.x;
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command.y;
								var x1 = command.x;
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = "openfl._internal.symbols.StaticTextRecord";
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_symbols_timeline_Frame = function() {
};
$hxClasses["openfl._internal.symbols.timeline.Frame"] = openfl__$internal_symbols_timeline_Frame;
openfl__$internal_symbols_timeline_Frame.__name__ = "openfl._internal.symbols.timeline.Frame";
openfl__$internal_symbols_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_symbols_timeline_Frame
};
var openfl__$internal_symbols_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.symbols.timeline.FrameObject"] = openfl__$internal_symbols_timeline_FrameObject;
openfl__$internal_symbols_timeline_FrameObject.__name__ = "openfl._internal.symbols.timeline.FrameObject";
openfl__$internal_symbols_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_symbols_timeline_FrameObject
};
var openfl__$internal_symbols_timeline_FrameObjectType = $hxEnums["openfl._internal.symbols.timeline.FrameObjectType"] = { __ename__ : "openfl._internal.symbols.timeline.FrameObjectType", __constructs__ : ["CREATE","UPDATE","DESTROY"]
	,CREATE: {_hx_index:0,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
	,UPDATE: {_hx_index:1,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
	,DESTROY: {_hx_index:2,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
};
var openfl__$internal_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["openfl._internal.text.GlyphPosition"] = openfl__$internal_text_GlyphPosition;
openfl__$internal_text_GlyphPosition.__name__ = "openfl._internal.text.GlyphPosition";
openfl__$internal_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: openfl__$internal_text_GlyphPosition
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.numLines = 1;
	this.sharpness = 0;
	this.scrollH = 0;
	this.set_scrollV(1);
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	if(openfl__$internal_text_TextEngine.__context == null) {
		openfl__$internal_text_TextEngine.__context = window.document.createElement("canvas").getContext("2d");
	}
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = "openfl._internal.text.TextEngine";
openfl__$internal_text_TextEngine.findFont = function(name) {
	var _this = openfl_text_Font.__fontByName;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
	} else {
		tmp = false;
	}
	if(tmp) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			tmp1 = __map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				tmp2 = __map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2);
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
			}
		}
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	var font = openfl__$internal_text_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			tmp1 = __map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				tmp2 = __map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2);
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return openfl__$internal_text_TextEngine.findFontVariant(format);
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textBounds: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.offsetX < x) {
				x = group1.offsetX;
			}
			if(group1.offsetY < y) {
				y = group1.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.maxScrollH = 0;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			while(group1.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
			}
			currentLineAscent = Math.max(currentLineAscent,group1.ascent);
			currentLineDescent = Math.max(currentLineDescent,group1.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group1.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group1.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group1.height);
			currentLineWidth = group1.offsetX - 2 + group1.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group1.offsetY - 2 + group1.ascent + group1.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		}
		if(this.layoutGroups.get_length() > 0) {
			var group2 = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
			if(group2 != null && group2.startIndex == group2.endIndex) {
				this.textHeight -= currentLineHeight;
			}
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var align = 3;
		var blockIndent = 0;
		var bullet = false;
		var indent = 0;
		var leftMargin = 0;
		var rightMargin = 0;
		var tabStops = null;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0;
		var maxHeightValue = 0;
		var previousSpaceIndex = -2;
		var previousBreakIndex = -1;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var getPositions = function(text,startIndex,endIndex) {
			var positions1 = [];
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			if(_gthis.__useIntAdvances == null) {
				var getPositions1 = new EReg("Trident/7.0","");
				_gthis.__useIntAdvances = getPositions1.match(window.navigator.userAgent);
			}
			if(_gthis.__useIntAdvances) {
				var previousWidth = 0.0;
				var width;
				var _g = startIndex;
				var _g1 = endIndex;
				while(_g < _g1) {
					var i = _g++;
					width = openfl__$internal_text_TextEngine.__context.measureText(text.substring(startIndex,i + 1)).width;
					positions1.push(width - previousWidth);
					previousWidth = width;
				}
			} else {
				var _g2 = startIndex;
				var _g11 = endIndex;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var advance;
					if(i1 < text.length - 1) {
						var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i1 + 1)).width;
						var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(HxOverrides.substr(text,i1,2)).width;
						advance = twoWidths - nextWidth;
					} else {
						advance = openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i1)).width;
					}
					positions1.push(advance);
				}
			}
			return positions1;
		};
		var getPositionsWidth = function(positions2) {
			var width1 = 0.0;
			var _g3 = 0;
			while(_g3 < positions2.length) {
				var position = positions2[_g3];
				++_g3;
				width1 += position;
			}
			return width1;
		};
		var getTextWidth = function(text1) {
			return openfl__$internal_text_TextEngine.__context.measureText(text1).width;
		};
		var nextLayoutGroup = function(startIndex1,endIndex1) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,startIndex1,endIndex1);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex1;
				layoutGroup.endIndex = endIndex1;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = Math.ceil(ascent + descent + leading);
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var setParagraphMetrics = function() {
			if(currentFormat.align != null) {
				align = currentFormat.align;
			}
			var setParagraphMetrics1 = currentFormat.blockIndent != null;
			var setParagraphMetrics2 = currentFormat.bullet != null;
			var setParagraphMetrics3 = currentFormat.indent != null;
			if(currentFormat.leftMargin != null) {
				leftMargin = currentFormat.leftMargin;
			}
			if(currentFormat.rightMargin != null) {
				rightMargin = currentFormat.rightMargin;
			}
			var setParagraphMetrics4 = currentFormat.tabStops != null;
		};
		var nextFormatRange = function() {
			var nextFormatRange1 = _gthis.textFormatRanges.get_length() - 1;
			if(rangeIndex < nextFormatRange1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
				return true;
			}
			return false;
		};
		var setFormattedPositions = function(startIndex2,endIndex2) {
			if(endIndex2 <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex2,endIndex2);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex2;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
					}
					if(tempRangeEnd != endIndex2) {
						if(!nextFormatRange()) {
							lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/_internal/text/TextEngine.hx", lineNumber : 1059, className : "openfl._internal.text.TextEngine", methodName : "getLayoutGroups"});
							break;
						}
						tempIndex = tempRangeEnd;
						tempRangeEnd = endIndex2 < formatRange.end ? endIndex2 : formatRange.end;
						++countRanges;
					} else {
						widthValue = getPositionsWidth(positions);
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex3) {
			if(endIndex3 <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex3);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex3);
				layoutGroup.positions = positions;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex3 == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd1 = endIndex3 < formatRange.end ? endIndex3 : formatRange.end;
					if(textIndex != tempRangeEnd1) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd1);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd1);
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd1;
					}
					if(tempRangeEnd1 == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd1 == endIndex3) {
						break;
					}
					if(!nextFormatRange()) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/_internal/text/TextEngine.hx", lineNumber : 1147, className : "openfl._internal.text.TextEngine", methodName : "getLayoutGroups"});
						break;
					}
					setLineMetrics();
				}
			}
			textIndex = endIndex3;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i2 = _gthis.layoutGroups.get_length();
			while(--i2 > -1) {
				var lg = _gthis.layoutGroups.get(i2);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0;
			lineIndex += 1;
			offsetX = 2;
		};
		var breakLongWords = function(endIndex4) {
			var remainingPositions = positions;
			var i3;
			var bufferCount;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempWidth = getPositionsWidth(remainingPositions);
			while(offsetX + tempWidth > _gthis.width - 2) {
				bufferCount = 0;
				i3 = bufferCount;
				positionWidth = 0.0;
				while(offsetX + positionWidth < _gthis.width - 2) {
					currentPosition = remainingPositions[i3];
					if(currentPosition == 0.0) {
						++i3;
						++bufferCount;
					} else {
						positionWidth += currentPosition;
						++i3;
					}
				}
				if(positionWidth == 0.0) {
					break;
				} else if(i3 < 2 && positionWidth + offsetX > _gthis.width - 2) {
					if(textIndex + i3 - bufferCount == endIndex4) {
						break;
					}
				} else {
					while(offsetX + positionWidth > _gthis.width - 2) {
						--i3;
						if(i3 - bufferCount > 0) {
							setFormattedPositions(textIndex,textIndex + i3 - bufferCount);
							positionWidth = widthValue;
						} else {
							i3 = 1;
							bufferCount = 0;
							setFormattedPositions(textIndex,textIndex + 1);
							positionWidth = 0;
						}
					}
				}
				placeIndex = textIndex + i3 - bufferCount;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex4);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex5) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex5);
			}
			placeFormattedText(endIndex5);
		};
		nextFormatRange();
		setParagraphMetrics();
		setLineMetrics();
		var wrap;
		var maxLoops = this.text.length + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
			}
			alignBaseline();
			textIndex = breakIndex + 1;
			previousBreakIndex = breakIndex;
			breakIndex = this.getLineBreakIndex(textIndex);
			setParagraphMetrics();
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex < this.text.length) {
				var endIndex6 = -1;
				if(spaceIndex == -1) {
					endIndex6 = breakIndex;
				} else {
					endIndex6 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex6) {
						endIndex6 = breakIndex;
					}
				}
				if(endIndex6 == -1) {
					endIndex6 = this.text.length;
				}
				setFormattedPositions(textIndex,endIndex6);
				if(align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex6 == spaceIndex + 1) {
						--endIndex6;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex6 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i4 = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i4);
						if(i4 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i4;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g4 = this.layoutGroups.get_length() - offsetCount;
						var _g12 = this.layoutGroups.get_length();
						while(_g4 < _g12) {
							var i5 = _g4++;
							layoutGroup = this.layoutGroups.get(i5);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex6);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex) {
					if(align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex6;
				} else if(layoutGroup == null || align == 2) {
					placeText(endIndex6);
				} else {
					var tempRangeEnd2 = endIndex6 < formatRange.end ? endIndex6 : formatRange.end;
					if(tempRangeEnd2 < endIndex6) {
						positions = getPositions(this.text,textIndex,tempRangeEnd2);
						widthValue = getPositionsWidth(positions);
					}
					layoutGroup.endIndex = tempRangeEnd2;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					offsetX += widthValue;
					if(tempRangeEnd2 == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
						textIndex = tempRangeEnd2;
						if(tempRangeEnd2 != endIndex6) {
							placeFormattedText(endIndex6);
						}
					}
					if(breakIndex == endIndex6) {
						++endIndex6;
					}
					textIndex = endIndex6;
				}
				var nextSpaceIndex = this.text.indexOf(" ",textIndex);
				if(breakIndex == previousSpaceIndex) {
					layoutGroup.endIndex = breakIndex;
					if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
						layoutGroup.positions.push(0.0);
					}
					textIndex = breakIndex + 1;
				}
				previousSpaceIndex = spaceIndex;
				spaceIndex = nextSpaceIndex;
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > this.text.length) {
					break;
				}
			}
		} else {
			if(textIndex < this.text.length) {
				setFormattedPositions(textIndex,this.text.length);
				placeText(this.text.length);
				alignBaseline();
			}
			textIndex += 1;
		}
		if(previousBreakIndex == textIndex - 2 && previousBreakIndex > -1) {
			nextLayoutGroup(textIndex,textIndex);
			layoutGroup.positions = [];
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetX = 2;
			layoutGroup.offsetY = offsetY;
			layoutGroup.width = 0;
			layoutGroup.height = heightValue;
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				totalWidth = this.width - 4 - group.format.rightMargin;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g11 = this.layoutGroups.get_length();
						while(_g2 < _g11) {
							var j = _g2++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || HxOverrides.cca(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = HxOverrides.cca(this.text,group.endIndex);
							if(group.endIndex < this.text.length && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,trimText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		return value;
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,get_bottomScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var tempHeight = 0.0;
			var ret = this.lineHeights.get_length();
			var _g = ret - 1;
			var _g1 = this.lineHeights.get_length();
			while(_g < _g1) {
				var i = _g++;
				if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
					tempHeight += this.lineHeights.get(i);
				} else {
					ret = i;
					break;
				}
			}
			if(ret < 1) {
				return 1;
			}
			return ret;
		}
	}
	,get_maxScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var i = this.numLines - 1;
			var tempHeight = 0.0;
			if(HxOverrides.cca(this.text,this.text.length - 1) == 10) {
				--i;
			}
			var j = i;
			while(i >= 0) if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
				tempHeight += this.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			if(i == j) {
				i = this.numLines;
			} else {
				i += 2;
			}
			if(i < 1) {
				return 1;
			}
			return i;
		}
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || this.restrict.length == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,get_scrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		}
		var max = this.get_maxScrollV();
		if(this.scrollV > max) {
			return max;
		}
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		if(value < 1) {
			value = 1;
		}
		return this.scrollV = value;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_restrict:"set_restrict",get_maxScrollV:"get_maxScrollV",get_bottomScrollV:"get_bottomScrollV"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = "openfl._internal.text.TextFormatRange";
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.letterSpacing = 0;
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
	this.__create(this.__direction,this.__script,this.__language);
};
$hxClasses["openfl._internal.text.TextLayout"] = openfl__$internal_text_TextLayout;
openfl__$internal_text_TextLayout.__name__ = "openfl._internal.text.TextLayout";
openfl__$internal_text_TextLayout.prototype = {
	autoHint: null
	,font: null
	,glyphs: null
	,letterSpacing: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__dirty: null
	,__handle: null
	,__language: null
	,__script: null
	,__font: null
	,__hbBuffer: null
	,__hbFont: null
	,__create: function(direction,script,language) {
		if(language.length != 4) {
			return;
		}
		this.__hbBuffer = lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$._new();
		switch(direction) {
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		default:
		}
		var this1 = this.__hbBuffer;
		var value = lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new(language);
	}
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: openfl__$internal_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var openfl__$internal_text__$TextLayout_TextDirection_$Impl_$ = {};
$hxClasses["openfl._internal.text._TextLayout.TextDirection_Impl_"] = openfl__$internal_text__$TextLayout_TextDirection_$Impl_$;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.__name__ = "openfl._internal.text._TextLayout.TextDirection_Impl_";
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.toHBDirection = function(this1) {
	switch(this1) {
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	default:
		return 0;
	}
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var openfl__$internal_text__$TextLayout_TextScript_$Impl_$ = {};
$hxClasses["openfl._internal.text._TextLayout.TextScript_Impl_"] = openfl__$internal_text__$TextLayout_TextScript_$Impl_$;
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.__name__ = "openfl._internal.text._TextLayout.TextScript_Impl_";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"};
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.toHBScript = function(this1) {
	return 1517910393;
};
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = "openfl._internal.text.TextLayoutGroup";
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_utils_AbstractNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	this.stitch = stitch;
	this.stitch_threshold = stitch_threshold;
	this.octaves = octaves;
	this.channels = channels;
	this.grayscale = grayScale;
	this.calculateOctaves(falloff);
};
$hxClasses["openfl._internal.utils.AbstractNoise"] = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_AbstractNoise.__name__ = "openfl._internal.utils.AbstractNoise";
openfl__$internal_utils_AbstractNoise.prototype = {
	octaves: null
	,stitch: null
	,stitch_threshold: null
	,channels: null
	,grayscale: null
	,octaves_frequencies: null
	,octaves_persistences: null
	,persistence_max: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
	}
	,stitching: function(bitmap,color,px,py,stitch_w,stitch_h,width,height) {
		var r = color >> 16 & 255;
		var g = color >> 8 & 255;
		var b = color & 255;
		if(width - stitch_w < px) {
			var dest = bitmap.getPixel32(width - px,py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (width - px) / stitch_w;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		if(height - stitch_h < py) {
			var dest1 = bitmap.getPixel32(px,height - py);
			var dest_r1 = dest1 >> 16 & 255;
			var dest_g1 = dest1 >> 8 & 255;
			var dest_b1 = dest1 & 255;
			var u1 = (height - py) / stitch_h;
			var uu1 = u1 * u1;
			r = this.mixI(dest_r1,r,u1);
			g = this.mixI(dest_g1,g,u1);
			b = this.mixI(dest_b1,b,u1);
		}
		return -16777216 | r << 16 | g << 8 | b;
	}
	,color: function(r_noise,g_noise,b_noise) {
		var color_r = 0;
		var color_g = 0;
		var color_b = 0;
		if(null != r_noise) {
			color_r = this.noiseToColor(r_noise);
		}
		if(null != g_noise) {
			color_g = this.noiseToColor(g_noise);
		}
		if(null != b_noise) {
			color_b = this.noiseToColor(b_noise);
		}
		return -16777216 | color_r << 16 | color_g << 8 | color_b;
	}
	,noiseToColor: function(noise) {
		return (noise * this.persistence_max + 1.0) * 128 | 0;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	}
	,mixI: function(x,y,t) {
		return (1.0 - t) * x + t * y | 0;
	}
	,mix: function(x,y,t) {
		return (1.0 - t) * x + t * y;
	}
	,fastfloor: function(x) {
		if(x > 0) {
			return x | 0;
		} else {
			return x - 1 | 0;
		}
	}
	,dot2d: function(grad,x,y) {
		return grad[0] * x + grad[1] * y;
	}
	,dot: function(grad,x,y,z) {
		return grad[0] * x + grad[1] * y + grad[2] * z;
	}
	,calculateOctaves: function(fPersistence) {
		var fFreq;
		var fPers;
		this.octaves_frequencies = [];
		this.octaves_persistences = [];
		this.persistence_max = 0;
		var _g = 0;
		var _g1 = this.octaves;
		while(_g < _g1) {
			var i = _g++;
			fFreq = Math.pow(2.0,i);
			fPers = Math.pow(fPersistence,i);
			this.persistence_max += fPers;
			this.octaves_frequencies.push(fFreq);
			this.octaves_persistences.push(fPers);
		}
		this.persistence_max = 1.0 / this.persistence_max;
	}
	,__class__: openfl__$internal_utils_AbstractNoise
};
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	openfl__$internal_utils_AbstractNoise.call(this,seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold);
	this.p_perm = [];
	var _g = 0;
	while(_g < 512) {
		var i = _g++;
		this.p_perm[i] = openfl__$internal_utils_PerlinNoise.P[i & 255];
	}
	this.base_factor = 0.03125;
	this.setSeed(seed);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = "openfl._internal.utils.PerlinNoise";
openfl__$internal_utils_PerlinNoise.__super__ = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_PerlinNoise.prototype = $extend(openfl__$internal_utils_AbstractNoise.prototype,{
	p_perm: null
	,x_offset: null
	,y_offset: null
	,z_offset: null
	,base_factor: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
		var width = bitmap.width;
		var height = bitmap.height;
		var octaves = this.octaves;
		var octaves_frequencies = this.octaves_frequencies;
		var octaves_persistences = this.octaves_persistences;
		var isRed = (1 & this.channels) == 1;
		var isGreen = (2 & this.channels) == 2;
		var isBlue = (4 & this.channels) == 4;
		var channels = 0;
		if(isRed) {
			++channels;
		}
		if(isGreen) {
			++channels;
		}
		if(isBlue) {
			++channels;
		}
		var grayscale = this.grayscale;
		var stitch_w = this.stitch_threshold * width | 0;
		var stitch_h = this.stitch_threshold * height | 0;
		var base_x = _scale_x * this.base_factor + this.x_offset;
		_scale_y = _scale_y * this.base_factor + this.y_offset;
		_scale_z = _scale_z * this.base_factor + this.z_offset;
		var g_offset = 1.0;
		var b_offset = 2.0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var py = _g++;
			_scale_x = base_x;
			var _g2 = 0;
			var _g11 = width;
			while(_g2 < _g11) {
				var px = _g2++;
				var color1 = 0.0;
				var color2 = 0.0;
				var color3 = 0.0;
				var _g3 = 0;
				var _g12 = octaves;
				while(_g3 < _g12) {
					var i = _g3++;
					var frequency = octaves_frequencies[i];
					var persistence = octaves_persistences[i];
					color1 += this.noise(_scale_x * frequency,_scale_y * frequency,_scale_z * frequency) * persistence;
					if(!grayscale) {
						if(1 < channels) {
							color2 += this.noise((_scale_x + g_offset) * frequency,(_scale_y + g_offset) * frequency,_scale_z * frequency) * persistence;
						}
						if(2 < channels) {
							color3 += this.noise((_scale_x + b_offset) * frequency,(_scale_y + b_offset) * frequency,_scale_z * frequency) * persistence;
						}
					}
				}
				var color = 0;
				if(grayscale) {
					color = this.color(color1,color1,color1);
				} else if(isRed && isGreen && isBlue) {
					color = this.color(color1,color2,color3);
				} else if(isRed && isGreen) {
					color = this.color(color1,color2,null);
				} else if(isRed && isBlue) {
					color = this.color(color1,null,color2);
				} else if(isGreen && isBlue) {
					color = this.color(null,color1,color2);
				} else if(isRed) {
					color = this.color(color1,null,null);
				} else if(isGreen) {
					color = this.color(null,color1,null);
				} else if(isBlue) {
					color = this.color(null,null,color1);
				}
				if(this.stitch) {
					color = this.stitching(bitmap,color,px,py,stitch_w,stitch_h,width,height);
				}
				bitmap.setPixel32(px,py,color);
				_scale_x += this.base_factor;
			}
			_scale_y += this.base_factor;
		}
	}
	,noise: function(x,y,z) {
		var xf = x - x % 1;
		var yf = y - y % 1;
		var zf = z - z % 1;
		x -= xf;
		y -= yf;
		z -= zf;
		var X = (xf | 0) & 255;
		var Y = (yf | 0) & 255;
		var Z = (zf | 0) & 255;
		var u = this.fade(x);
		var v = this.fade(y);
		var w = this.fade(z);
		var A = this.p_perm[X] + Y;
		var AA = this.p_perm[A] + Z;
		var AB = this.p_perm[A + 1] + Z;
		var B = this.p_perm[X + 1] + Y;
		var BA = this.p_perm[B] + Z;
		var BB = this.p_perm[B + 1] + Z;
		var x1 = x - 1;
		var y1 = y - 1;
		var z1 = z - 1;
		var hash = this.p_perm[BB + 1] & 15;
		var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AB + 1] & 15;
		var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
		hash = this.p_perm[BA + 1] & 15;
		var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AA + 1] & 15;
		var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
		hash = this.p_perm[BB] & 15;
		var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AB] & 15;
		var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
		hash = this.p_perm[BA] & 15;
		var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AA] & 15;
		var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
		g2 += u * (g1 - g2);
		g4 += u * (g3 - g4);
		g6 += u * (g5 - g6);
		g8 += u * (g7 - g8);
		g4 += v * (g2 - g4);
		g8 += v * (g6 - g8);
		return g8 + w * (g4 - g8);
	}
	,setSeed: function(seed) {
		seed = seed * 16807.0 % 2147483647 | 0;
		this.x_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.y_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.z_offset = seed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
});
var openfl__$internal_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.utils.TouchData"] = openfl__$internal_utils_TouchData;
openfl__$internal_utils_TouchData.__name__ = "openfl._internal.utils.TouchData";
openfl__$internal_utils_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_utils_TouchData
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = "openfl.display.Application";
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.h[$window.id] = $window;
		var f = $bind(this,this.__onWindowClose);
		var window1 = $window;
		var tmp = function() {
			f(window1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,__class__: openfl_display_Application
});
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = "openfl.display._BlendMode.BlendMode_Impl_";
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = "openfl.display.DisplayObjectRenderer";
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__allowSmoothing: null
	,__blendMode: null
	,__cleared: null
	,__context: null
	,__overrideBlendMode: null
	,__roundPixels: null
	,__stage: null
	,__tempColorTransform: null
	,__transparent: null
	,__type: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__getColorTransform: function(value) {
		if(this.__worldColorTransform != null) {
			this.__tempColorTransform.__copyFrom(this.__worldColorTransform);
			this.__tempColorTransform.__combine(value);
			return this.__tempColorTransform;
		} else {
			return value;
		}
	}
	,__popMask: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__popMaskRect: function() {
	}
	,__pushMask: function(mask) {
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskRect: function(rect,transform) {
	}
	,__render: function(object) {
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = "openfl.display.CairoRenderer";
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	cairo: null
	,__matrix: null
	,__matrix3: null
	,applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		mask.__renderCairoMask(this);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		object.__renderCairo(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeCairo(this.cairo,value);
	}
	,__setBlendModeCairo: function(cairo,value) {
		switch(value) {
		case 0:
			cairo.setOperator(12);
			break;
		case 2:
			cairo.setOperator(17);
			break;
		case 3:
			cairo.setOperator(23);
			break;
		case 5:
			cairo.setOperator(21);
			break;
		case 7:
			cairo.setOperator(2);
			break;
		case 8:
			cairo.setOperator(18);
			break;
		case 9:
			cairo.setOperator(14);
			break;
		case 11:
			cairo.setOperator(16);
			break;
		case 12:
			cairo.setOperator(15);
			break;
		default:
			cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = "openfl.display.CanvasRenderer";
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	context: null
	,pixelRatio: null
	,__isDOM: null
	,__tempMatrix: null
	,applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		mask.__renderCanvasMask(this);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		object.__renderCanvas(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeContext(this.context,value);
	}
	,__setBlendModeContext: function(context,value) {
		switch(value) {
		case 0:
			context.globalCompositeOperation = "lighter";
			break;
		case 2:
			context.globalCompositeOperation = "darken";
			break;
		case 3:
			context.globalCompositeOperation = "difference";
			break;
		case 5:
			context.globalCompositeOperation = "hard-light";
			break;
		case 8:
			context.globalCompositeOperation = "lighten";
			break;
		case 9:
			context.globalCompositeOperation = "multiply";
			break;
		case 11:
			context.globalCompositeOperation = "overlay";
			break;
		case 12:
			context.globalCompositeOperation = "screen";
			break;
		default:
			context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = "openfl.display._CapsStyle.CapsStyle_Impl_";
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromInt = function(value) {
	return value;
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toInt = function(this1) {
	return this1;
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = ((function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		}))();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = "openfl.display.DOMRenderer";
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	element: null
	,pixelRatio: null
	,__canvasRenderer: null
	,__clipRects: null
	,__currentClipRect: null
	,__numClipRects: null
	,__transformOriginProperty: null
	,__transformProperty: null
	,__vendorPrefix: null
	,__z: null
	,applyStyle: function(parent,childElement) {
		if(parent != null && childElement != null) {
			if(parent.__style == null || childElement.parentElement != this.element) {
				this.__initializeElement(parent,childElement);
			}
			parent.__style = childElement.style;
			this.__updateClip(parent);
			this.__applyStyle(parent,true,true,true);
		}
	}
	,clearStyle: function(childElement) {
		if(childElement != null && childElement.parentElement == this.element) {
			this.element.removeChild(childElement);
		}
	}
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			var roundPixels = this.__roundPixels;
			if(roundPixels == null) {
				roundPixels = false;
			}
			style.setProperty(this.__transformProperty,roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		object.__renderDOM(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "va
